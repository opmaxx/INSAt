
INSAt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0800e758  0800e758  0001e758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edcc  0800edcc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800edcc  0800edcc  0001edcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edd4  0800edd4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edd4  0800edd4  0001edd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edd8  0800edd8  0001edd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800eddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023cc  200001ec  0800efc8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025b8  0800efc8  000225b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028500  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a24  00000000  00000000  0004875f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023b8  00000000  00000000  0004d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bde  00000000  00000000  0004f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002db47  00000000  00000000  0005111e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002660a  00000000  00000000  0007ec65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00116c16  00000000  00000000  000a526f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a910  00000000  00000000  001bbe88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  001c6798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e740 	.word	0x0800e740

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0800e740 	.word	0x0800e740

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <DWT_Delay_Init+0x58>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <DWT_Delay_Init+0x58>)
 8000f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f72:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <DWT_Delay_Init+0x58>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <DWT_Delay_Init+0x58>)
 8000f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f7e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <DWT_Delay_Init+0x5c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <DWT_Delay_Init+0x5c>)
 8000f86:	f023 0301 	bic.w	r3, r3, #1
 8000f8a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <DWT_Delay_Init+0x5c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <DWT_Delay_Init+0x5c>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <DWT_Delay_Init+0x5c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f9e:	bf00      	nop
     __ASM volatile ("NOP");
 8000fa0:	bf00      	nop
  __ASM volatile ("NOP");
 8000fa2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <DWT_Delay_Init+0x5c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000fac:	2300      	movs	r3, #0
 8000fae:	e000      	b.n	8000fb2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000fb0:	2301      	movs	r3, #1
  }
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000edf0 	.word	0xe000edf0
 8000fc0:	e0001000 	.word	0xe0001000

08000fc4 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	72fb      	strb	r3, [r7, #11]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	685c      	ldr	r4, [r3, #4]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	68d8      	ldr	r0, [r3, #12]
 8000fe0:	893b      	ldrh	r3, [r7, #8]
 8000fe2:	7af9      	ldrb	r1, [r7, #11]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	47a0      	blx	r4
 8000fe8:	6178      	str	r0, [r7, #20]

  return ret;
 8000fea:	697b      	ldr	r3, [r7, #20]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd90      	pop	{r4, r7, pc}

08000ff4 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	461a      	mov	r2, r3
 8001000:	460b      	mov	r3, r1
 8001002:	72fb      	strb	r3, [r7, #11]
 8001004:	4613      	mov	r3, r2
 8001006:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681c      	ldr	r4, [r3, #0]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	68d8      	ldr	r0, [r3, #12]
 8001010:	893b      	ldrh	r3, [r7, #8]
 8001012:	7af9      	ldrb	r1, [r7, #11]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	47a0      	blx	r4
 8001018:	6178      	str	r0, [r7, #20]

  return ret;
 800101a:	697b      	ldr	r3, [r7, #20]
}
 800101c:	4618      	mov	r0, r3
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd90      	pop	{r4, r7, pc}

08001024 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 800102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001050 <lsm9ds1_from_fs4g_to_mg+0x2c>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	3df9db23 	.word	0x3df9db23

08001054 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001080 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 800106e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	428c0000 	.word	0x428c0000

08001084 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010b0 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010a2:	eeb0 0a67 	vmov.f32	s0, s15
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	3f147ae1 	.word	0x3f147ae1

080010b4 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80010c0:	f107 0208 	add.w	r2, r7, #8
 80010c4:	2301      	movs	r3, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff7b 	bl	8000fc4 <lsm9ds1_read_reg>
 80010ce:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10f      	bne.n	80010f6 <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	7a3b      	ldrb	r3, [r7, #8]
 80010e0:	f362 03c4 	bfi	r3, r2, #3, #2
 80010e4:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80010e6:	f107 0208 	add.w	r2, r7, #8
 80010ea:	2301      	movs	r3, #1
 80010ec:	2110      	movs	r1, #16
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff80 	bl	8000ff4 <lsm9ds1_write_reg>
 80010f4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800110c:	f107 0210 	add.w	r2, r7, #16
 8001110:	2301      	movs	r3, #1
 8001112:	2110      	movs	r1, #16
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff55 	bl	8000fc4 <lsm9ds1_read_reg>
 800111a:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	b2da      	uxtb	r2, r3
 800112a:	7c3b      	ldrb	r3, [r7, #16]
 800112c:	f362 1347 	bfi	r3, r2, #5, #3
 8001130:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8001132:	f107 0210 	add.w	r2, r7, #16
 8001136:	2301      	movs	r3, #1
 8001138:	2110      	movs	r1, #16
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff5a 	bl	8000ff4 <lsm9ds1_write_reg>
 8001140:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d107      	bne.n	8001158 <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	2301      	movs	r3, #1
 800114e:	2120      	movs	r1, #32
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff37 	bl	8000fc4 <lsm9ds1_read_reg>
 8001156:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d110      	bne.n	8001180 <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	b2da      	uxtb	r2, r3
 8001168:	7b3b      	ldrb	r3, [r7, #12]
 800116a:	f362 1347 	bfi	r3, r2, #5, #3
 800116e:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8001170:	f107 020c 	add.w	r2, r7, #12
 8001174:	2301      	movs	r3, #1
 8001176:	2120      	movs	r1, #32
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff3b 	bl	8000ff4 <lsm9ds1_write_reg>
 800117e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d107      	bne.n	8001196 <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001186:	f107 0208 	add.w	r2, r7, #8
 800118a:	2301      	movs	r3, #1
 800118c:	2112      	movs	r1, #18
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff18 	bl	8000fc4 <lsm9ds1_read_reg>
 8001194:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d111      	bne.n	80011c0 <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	09db      	lsrs	r3, r3, #7
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	7a3b      	ldrb	r3, [r7, #8]
 80011aa:	f362 13c7 	bfi	r3, r2, #7, #1
 80011ae:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80011b0:	f107 0208 	add.w	r2, r7, #8
 80011b4:	2301      	movs	r3, #1
 80011b6:	2112      	movs	r1, #18
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff1b 	bl	8000ff4 <lsm9ds1_write_reg>
 80011be:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 80011c0:	697b      	ldr	r3, [r7, #20]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80011d6:	f107 0208 	add.w	r2, r7, #8
 80011da:	2301      	movs	r3, #1
 80011dc:	2120      	movs	r1, #32
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fef0 	bl	8000fc4 <lsm9ds1_read_reg>
 80011e4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10f      	bne.n	800120c <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	7a3b      	ldrb	r3, [r7, #8]
 80011f6:	f362 03c4 	bfi	r3, r2, #3, #2
 80011fa:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80011fc:	f107 0208 	add.w	r2, r7, #8
 8001200:	2301      	movs	r3, #1
 8001202:	2120      	movs	r1, #32
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fef5 	bl	8000ff4 <lsm9ds1_write_reg>
 800120a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 800120c:	68fb      	ldr	r3, [r7, #12]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b088      	sub	sp, #32
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4613      	mov	r3, r2
 8001222:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8001224:	f107 0218 	add.w	r2, r7, #24
 8001228:	2301      	movs	r3, #1
 800122a:	2122      	movs	r1, #34	; 0x22
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f7ff fec9 	bl	8000fc4 <lsm9ds1_read_reg>
 8001232:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10f      	bne.n	800125a <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	7e3b      	ldrb	r3, [r7, #24]
 8001244:	f362 1386 	bfi	r3, r2, #6, #1
 8001248:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 800124a:	f107 0218 	add.w	r2, r7, #24
 800124e:	2301      	movs	r3, #1
 8001250:	2122      	movs	r1, #34	; 0x22
 8001252:	68b8      	ldr	r0, [r7, #8]
 8001254:	f7ff fece 	bl	8000ff4 <lsm9ds1_write_reg>
 8001258:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8001260:	f107 0214 	add.w	r2, r7, #20
 8001264:	2301      	movs	r3, #1
 8001266:	2124      	movs	r1, #36	; 0x24
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff feab 	bl	8000fc4 <lsm9ds1_read_reg>
 800126e:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	43db      	mvns	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	7d3b      	ldrb	r3, [r7, #20]
 8001284:	f362 13c7 	bfi	r3, r2, #7, #1
 8001288:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	7d3b      	ldrb	r3, [r7, #20]
 8001294:	f362 1386 	bfi	r3, r2, #6, #1
 8001298:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 800129a:	f107 0214 	add.w	r2, r7, #20
 800129e:	2301      	movs	r3, #1
 80012a0:	2124      	movs	r1, #36	; 0x24
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff fea6 	bl	8000ff4 <lsm9ds1_write_reg>
 80012a8:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 80012aa:	69fb      	ldr	r3, [r7, #28]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 80012c0:	f107 0210 	add.w	r2, r7, #16
 80012c4:	2301      	movs	r3, #1
 80012c6:	2120      	movs	r1, #32
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fe7b 	bl	8000fc4 <lsm9ds1_read_reg>
 80012ce:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d125      	bne.n	8001322 <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	7c3b      	ldrb	r3, [r7, #16]
 80012e2:	f362 0341 	bfi	r3, r2, #1, #1
 80012e6:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	7c3b      	ldrb	r3, [r7, #16]
 80012f2:	f362 0384 	bfi	r3, r2, #2, #3
 80012f6:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	7c3b      	ldrb	r3, [r7, #16]
 8001304:	f362 1346 	bfi	r3, r2, #5, #2
 8001308:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 800130a:	7c3b      	ldrb	r3, [r7, #16]
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8001312:	f107 0210 	add.w	r2, r7, #16
 8001316:	2301      	movs	r3, #1
 8001318:	2120      	movs	r1, #32
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe6a 	bl	8000ff4 <lsm9ds1_write_reg>
 8001320:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8001328:	f107 020c 	add.w	r2, r7, #12
 800132c:	2301      	movs	r3, #1
 800132e:	2122      	movs	r1, #34	; 0x22
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fe47 	bl	8000fc4 <lsm9ds1_read_reg>
 8001336:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d111      	bne.n	8001362 <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	b2da      	uxtb	r2, r3
 800134a:	7b3b      	ldrb	r3, [r7, #12]
 800134c:	f362 0301 	bfi	r3, r2, #0, #2
 8001350:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8001352:	f107 020c 	add.w	r2, r7, #12
 8001356:	2301      	movs	r3, #1
 8001358:	2122      	movs	r1, #34	; 0x22
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fe4a 	bl	8000ff4 <lsm9ds1_write_reg>
 8001360:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d107      	bne.n	8001378 <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8001368:	f107 0208 	add.w	r2, r7, #8
 800136c:	2301      	movs	r3, #1
 800136e:	2123      	movs	r1, #35	; 0x23
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fe27 	bl	8000fc4 <lsm9ds1_read_reg>
 8001376:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d110      	bne.n	80013a0 <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	b2da      	uxtb	r2, r3
 8001388:	7a3b      	ldrb	r3, [r7, #8]
 800138a:	f362 0383 	bfi	r3, r2, #2, #2
 800138e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8001390:	f107 0208 	add.w	r2, r7, #8
 8001394:	2301      	movs	r3, #1
 8001396:	2123      	movs	r1, #35	; 0x23
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fe2b 	bl	8000ff4 <lsm9ds1_write_reg>
 800139e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 80013a0:	697b      	ldr	r3, [r7, #20]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 80013b6:	f107 0208 	add.w	r2, r7, #8
 80013ba:	2301      	movs	r3, #1
 80013bc:	2121      	movs	r1, #33	; 0x21
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fe00 	bl	8000fc4 <lsm9ds1_read_reg>
 80013c4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10f      	bne.n	80013ec <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	7a3b      	ldrb	r3, [r7, #8]
 80013d6:	f362 1346 	bfi	r3, r2, #5, #2
 80013da:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 80013dc:	f107 0208 	add.w	r2, r7, #8
 80013e0:	2301      	movs	r3, #1
 80013e2:	2121      	movs	r1, #33	; 0x21
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe05 	bl	8000ff4 <lsm9ds1_write_reg>
 80013ea:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 80013ec:	68fb      	ldr	r3, [r7, #12]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	2306      	movs	r3, #6
 8001406:	2118      	movs	r1, #24
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fddb 	bl	8000fc4 <lsm9ds1_read_reg>
 800140e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	b21a      	sxth	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	b29b      	uxth	r3, r3
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b29a      	uxth	r2, r3
 8001424:	7b3b      	ldrb	r3, [r7, #12]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	b21a      	sxth	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3302      	adds	r3, #2
 8001438:	b212      	sxth	r2, r2
 800143a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	3302      	adds	r3, #2
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	b29b      	uxth	r3, r3
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b29a      	uxth	r2, r3
 800144a:	7bbb      	ldrb	r3, [r7, #14]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4413      	add	r3, r2
 8001450:	b29a      	uxth	r2, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	3302      	adds	r3, #2
 8001456:	b212      	sxth	r2, r2
 8001458:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800145a:	7c7a      	ldrb	r2, [r7, #17]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3304      	adds	r3, #4
 8001460:	b212      	sxth	r2, r2
 8001462:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3304      	adds	r3, #4
 8001468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146c:	b29b      	uxth	r3, r3
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	b29a      	uxth	r2, r3
 8001472:	7c3b      	ldrb	r3, [r7, #16]
 8001474:	b29b      	uxth	r3, r3
 8001476:	4413      	add	r3, r2
 8001478:	b29a      	uxth	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	3304      	adds	r3, #4
 800147e:	b212      	sxth	r2, r2
 8001480:	801a      	strh	r2, [r3, #0]

  return ret;
 8001482:	697b      	ldr	r3, [r7, #20]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	2306      	movs	r3, #6
 800149c:	2128      	movs	r1, #40	; 0x28
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fd90 	bl	8000fc4 <lsm9ds1_read_reg>
 80014a4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80014a6:	7b7b      	ldrb	r3, [r7, #13]
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	7b3b      	ldrb	r3, [r7, #12]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	3302      	adds	r3, #2
 80014ce:	b212      	sxth	r2, r2
 80014d0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3302      	adds	r3, #2
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b29a      	uxth	r2, r3
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3302      	adds	r3, #2
 80014ec:	b212      	sxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80014f0:	7c7a      	ldrb	r2, [r7, #17]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3304      	adds	r3, #4
 80014f6:	b212      	sxth	r2, r2
 80014f8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3304      	adds	r3, #4
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	b29b      	uxth	r3, r3
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b29a      	uxth	r2, r3
 8001508:	7c3b      	ldrb	r3, [r7, #16]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3304      	adds	r3, #4
 8001514:	b212      	sxth	r2, r2
 8001516:	801a      	strh	r2, [r3, #0]

  return ret;
 8001518:	697b      	ldr	r3, [r7, #20]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 800152c:	f107 020c 	add.w	r2, r7, #12
 8001530:	2306      	movs	r3, #6
 8001532:	2128      	movs	r1, #40	; 0x28
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fd45 	bl	8000fc4 <lsm9ds1_read_reg>
 800153a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800153c:	7b7b      	ldrb	r3, [r7, #13]
 800153e:	b21a      	sxth	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	b29b      	uxth	r3, r3
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b29a      	uxth	r2, r3
 8001550:	7b3b      	ldrb	r3, [r7, #12]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	b21a      	sxth	r2, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3302      	adds	r3, #2
 8001564:	b212      	sxth	r2, r2
 8001566:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3302      	adds	r3, #2
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	b29b      	uxth	r3, r3
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b29a      	uxth	r2, r3
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4413      	add	r3, r2
 800157c:	b29a      	uxth	r2, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3302      	adds	r3, #2
 8001582:	b212      	sxth	r2, r2
 8001584:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001586:	7c7a      	ldrb	r2, [r7, #17]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	b212      	sxth	r2, r2
 800158e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3304      	adds	r3, #4
 8001594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001598:	b29b      	uxth	r3, r3
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b29a      	uxth	r2, r3
 800159e:	7c3b      	ldrb	r3, [r7, #16]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3304      	adds	r3, #4
 80015aa:	b212      	sxth	r2, r2
 80015ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80015ae:	697b      	ldr	r3, [r7, #20]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	2301      	movs	r3, #1
 80015c8:	210f      	movs	r1, #15
 80015ca:	68b8      	ldr	r0, [r7, #8]
 80015cc:	f7ff fcfa 	bl	8000fc4 <lsm9ds1_read_reg>
 80015d0:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	2301      	movs	r3, #1
 80015de:	210f      	movs	r1, #15
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fcef 	bl	8000fc4 <lsm9ds1_read_reg>
 80015e6:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 80015e8:	697b      	ldr	r3, [r7, #20]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8001602:	2301      	movs	r3, #1
 8001604:	2117      	movs	r1, #23
 8001606:	68b8      	ldr	r0, [r7, #8]
 8001608:	f7ff fcdc 	bl	8000fc4 <lsm9ds1_read_reg>
 800160c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8001614:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8001616:	2301      	movs	r3, #1
 8001618:	2127      	movs	r1, #39	; 0x27
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff fcd2 	bl	8000fc4 <lsm9ds1_read_reg>
 8001620:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001622:	697b      	ldr	r3, [r7, #20]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 800163a:	f107 0214 	add.w	r2, r7, #20
 800163e:	2301      	movs	r3, #1
 8001640:	2122      	movs	r1, #34	; 0x22
 8001642:	68b8      	ldr	r0, [r7, #8]
 8001644:	f7ff fcbe 	bl	8000fc4 <lsm9ds1_read_reg>
 8001648:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10f      	bne.n	8001670 <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	b2da      	uxtb	r2, r3
 8001658:	7d3b      	ldrb	r3, [r7, #20]
 800165a:	f362 0300 	bfi	r3, r2, #0, #1
 800165e:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8001660:	f107 0214 	add.w	r2, r7, #20
 8001664:	2301      	movs	r3, #1
 8001666:	2122      	movs	r1, #34	; 0x22
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f7ff fcc3 	bl	8000ff4 <lsm9ds1_write_reg>
 800166e:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d107      	bne.n	8001686 <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8001676:	f107 0218 	add.w	r2, r7, #24
 800167a:	2301      	movs	r3, #1
 800167c:	2121      	movs	r1, #33	; 0x21
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fca0 	bl	8000fc4 <lsm9ds1_read_reg>
 8001684:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10f      	bne.n	80016ac <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	7e3b      	ldrb	r3, [r7, #24]
 8001696:	f362 0382 	bfi	r3, r2, #2, #1
 800169a:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 800169c:	f107 0218 	add.w	r2, r7, #24
 80016a0:	2301      	movs	r3, #1
 80016a2:	2121      	movs	r1, #33	; 0x21
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff fca5 	bl	8000ff4 <lsm9ds1_write_reg>
 80016aa:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 80016ac:	69fb      	ldr	r3, [r7, #28]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80016c2:	f107 0208 	add.w	r2, r7, #8
 80016c6:	2301      	movs	r3, #1
 80016c8:	2110      	movs	r1, #16
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fc7a 	bl	8000fc4 <lsm9ds1_read_reg>
 80016d0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10f      	bne.n	80016f8 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	7a3b      	ldrb	r3, [r7, #8]
 80016e2:	f362 0301 	bfi	r3, r2, #0, #2
 80016e6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80016e8:	f107 0208 	add.w	r2, r7, #8
 80016ec:	2301      	movs	r3, #1
 80016ee:	2110      	movs	r1, #16
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fc7f 	bl	8000ff4 <lsm9ds1_write_reg>
 80016f6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 800170e:	f107 0210 	add.w	r2, r7, #16
 8001712:	2301      	movs	r3, #1
 8001714:	2111      	movs	r1, #17
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fc54 	bl	8000fc4 <lsm9ds1_read_reg>
 800171c:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10f      	bne.n	8001744 <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	b2da      	uxtb	r2, r3
 800172c:	7c3b      	ldrb	r3, [r7, #16]
 800172e:	f362 0301 	bfi	r3, r2, #0, #2
 8001732:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8001734:	f107 0210 	add.w	r2, r7, #16
 8001738:	2301      	movs	r3, #1
 800173a:	2111      	movs	r1, #17
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fc59 	bl	8000ff4 <lsm9ds1_write_reg>
 8001742:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d107      	bne.n	800175a <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800174a:	f107 020c 	add.w	r2, r7, #12
 800174e:	2301      	movs	r3, #1
 8001750:	2112      	movs	r1, #18
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fc36 	bl	8000fc4 <lsm9ds1_read_reg>
 8001758:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d110      	bne.n	8001782 <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	7b3b      	ldrb	r3, [r7, #12]
 800176c:	f362 1386 	bfi	r3, r2, #6, #1
 8001770:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001772:	f107 020c 	add.w	r2, r7, #12
 8001776:	2301      	movs	r3, #1
 8001778:	2112      	movs	r1, #18
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fc3a 	bl	8000ff4 <lsm9ds1_write_reg>
 8001780:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8001782:	697b      	ldr	r3, [r7, #20]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001798:	f107 0208 	add.w	r2, r7, #8
 800179c:	2301      	movs	r3, #1
 800179e:	2112      	movs	r1, #18
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fc0f 	bl	8000fc4 <lsm9ds1_read_reg>
 80017a6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	7a3b      	ldrb	r3, [r7, #8]
 80017b8:	f362 0303 	bfi	r3, r2, #0, #4
 80017bc:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80017be:	f107 0208 	add.w	r2, r7, #8
 80017c2:	2301      	movs	r3, #1
 80017c4:	2112      	movs	r1, #18
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fc14 	bl	8000ff4 <lsm9ds1_write_reg>
 80017cc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80017e4:	f107 0208 	add.w	r2, r7, #8
 80017e8:	2301      	movs	r3, #1
 80017ea:	2120      	movs	r1, #32
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fbe9 	bl	8000fc4 <lsm9ds1_read_reg>
 80017f2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	b2da      	uxtb	r2, r3
 8001802:	7a3b      	ldrb	r3, [r7, #8]
 8001804:	f362 0301 	bfi	r3, r2, #0, #2
 8001808:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	7a3b      	ldrb	r3, [r7, #8]
 8001816:	f362 0382 	bfi	r3, r2, #2, #1
 800181a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800181c:	f107 0208 	add.w	r2, r7, #8
 8001820:	2301      	movs	r3, #1
 8001822:	2120      	movs	r1, #32
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fbe5 	bl	8000ff4 <lsm9ds1_write_reg>
 800182a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	460b      	mov	r3, r1
 8001840:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8001842:	f107 0208 	add.w	r2, r7, #8
 8001846:	2301      	movs	r3, #1
 8001848:	2121      	movs	r1, #33	; 0x21
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fbba 	bl	8000fc4 <lsm9ds1_read_reg>
 8001850:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10f      	bne.n	8001878 <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	7a3b      	ldrb	r3, [r7, #8]
 8001862:	f362 0382 	bfi	r3, r2, #2, #1
 8001866:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8001868:	f107 0208 	add.w	r2, r7, #8
 800186c:	2301      	movs	r3, #1
 800186e:	2121      	movs	r1, #33	; 0x21
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fbbf 	bl	8000ff4 <lsm9ds1_write_reg>
 8001876:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8001878:	68fb      	ldr	r3, [r7, #12]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 800188e:	f107 0208 	add.w	r2, r7, #8
 8001892:	2301      	movs	r3, #1
 8001894:	2121      	movs	r1, #33	; 0x21
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fb94 	bl	8000fc4 <lsm9ds1_read_reg>
 800189c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d118      	bne.n	80018d6 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	7a3b      	ldrb	r3, [r7, #8]
 80018b0:	f362 13c7 	bfi	r3, r2, #7, #1
 80018b4:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	7a3b      	ldrb	r3, [r7, #8]
 80018c0:	f362 1346 	bfi	r3, r2, #5, #2
 80018c4:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80018c6:	f107 0208 	add.w	r2, r7, #8
 80018ca:	2301      	movs	r3, #1
 80018cc:	2121      	movs	r1, #33	; 0x21
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fb90 	bl	8000ff4 <lsm9ds1_write_reg>
 80018d4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e4:	f001 fd25 	bl	8003332 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e8:	f000 f850 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ec:	f000 f964 	bl	8001bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f0:	f000 f944 	bl	8001b7c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80018f4:	f000 f8de 	bl	8001ab4 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80018f8:	f000 f89c 	bl	8001a34 <MX_I2C1_Init>
  MX_SPI1_Init();
 80018fc:	f000 f906 	bl	8001b0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001900:	f006 ff1a 	bl	8008738 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of consoleMutex */
  consoleMutexHandle = osMutexNew(&consoleMutex_attributes);
 8001904:	4814      	ldr	r0, [pc, #80]	; (8001958 <main+0x78>)
 8001906:	f007 f80e 	bl	8008926 <osMutexNew>
 800190a:	4603      	mov	r3, r0
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <main+0x7c>)
 800190e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of consoleQueue */
  consoleQueueHandle = osMessageQueueNew (10, sizeof(char), &consoleQueue_attributes);
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <main+0x80>)
 8001912:	2101      	movs	r1, #1
 8001914:	200a      	movs	r0, #10
 8001916:	f007 f914 	bl	8008b42 <osMessageQueueNew>
 800191a:	4603      	mov	r3, r0
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <main+0x84>)
 800191e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of consoleTask */
  consoleTaskHandle = osThreadNew(StartConsoleTask, NULL, &consoleTask_attributes);
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <main+0x88>)
 8001922:	2100      	movs	r1, #0
 8001924:	4811      	ldr	r0, [pc, #68]	; (800196c <main+0x8c>)
 8001926:	f006 ff51 	bl	80087cc <osThreadNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <main+0x90>)
 800192e:	6013      	str	r3, [r2, #0]

  /* creation of imuTask */
  imuTaskHandle = osThreadNew(StartIMUTask, NULL, &imuTask_attributes);
 8001930:	4a10      	ldr	r2, [pc, #64]	; (8001974 <main+0x94>)
 8001932:	2100      	movs	r1, #0
 8001934:	4810      	ldr	r0, [pc, #64]	; (8001978 <main+0x98>)
 8001936:	f006 ff49 	bl	80087cc <osThreadNew>
 800193a:	4603      	mov	r3, r0
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <main+0x9c>)
 800193e:	6013      	str	r3, [r2, #0]

  /* creation of rfTask */
  rfTaskHandle = osThreadNew(StartRFTask, NULL, &rfTask_attributes);
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <main+0xa0>)
 8001942:	2100      	movs	r1, #0
 8001944:	480f      	ldr	r0, [pc, #60]	; (8001984 <main+0xa4>)
 8001946:	f006 ff41 	bl	80087cc <osThreadNew>
 800194a:	4603      	mov	r3, r0
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <main+0xa8>)
 800194e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001950:	f006 ff16 	bl	8008780 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001954:	e7fe      	b.n	8001954 <main+0x74>
 8001956:	bf00      	nop
 8001958:	0800e8c4 	.word	0x0800e8c4
 800195c:	20000ab4 	.word	0x20000ab4
 8001960:	0800e8ac 	.word	0x0800e8ac
 8001964:	20000ab0 	.word	0x20000ab0
 8001968:	0800e840 	.word	0x0800e840
 800196c:	08001d7d 	.word	0x08001d7d
 8001970:	20000390 	.word	0x20000390
 8001974:	0800e864 	.word	0x0800e864
 8001978:	08001e21 	.word	0x08001e21
 800197c:	200005f0 	.word	0x200005f0
 8001980:	0800e888 	.word	0x0800e888
 8001984:	08002205 	.word	0x08002205
 8001988:	20000850 	.word	0x20000850

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	; 0x58
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2244      	movs	r2, #68	; 0x44
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f00a ff7b 	bl	800c896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b2:	f003 f801 	bl	80049b8 <HAL_PWREx_ControlVoltageScaling>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019bc:	f000 fcec 	bl	8002398 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019c0:	2310      	movs	r3, #16
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d0:	2302      	movs	r3, #2
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019d4:	2301      	movs	r3, #1
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80019dc:	2347      	movs	r3, #71	; 0x47
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e0:	2302      	movs	r3, #2
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80019e8:	2306      	movs	r3, #6
 80019ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 f847 	bl	8004a84 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019fc:	f000 fccc 	bl	8002398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2303      	movs	r3, #3
 8001a06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fc4c 	bl	80052b8 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a26:	f000 fcb7 	bl	8002398 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3758      	adds	r7, #88	; 0x58
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <MX_I2C1_Init+0x78>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00505B89;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <MX_I2C1_Init+0x7c>)
 8001a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6e:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a70:	f002 f960 	bl	8003d34 <HAL_I2C_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a7a:	f000 fc8d 	bl	8002398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a82:	f002 fef3 	bl	800486c <HAL_I2CEx_ConfigAnalogFilter>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a8c:	f000 fc84 	bl	8002398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a90:	2100      	movs	r1, #0
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_I2C1_Init+0x74>)
 8001a94:	f002 ff35 	bl	8004902 <HAL_I2CEx_ConfigDigitalFilter>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a9e:	f000 fc7b 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000208 	.word	0x20000208
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	00505b89 	.word	0x00505b89

08001ab4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <MX_LPUART1_UART_Init+0x54>)
 8001abc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_LPUART1_UART_Init+0x50>)
 8001af2:	f005 fce3 	bl	80074bc <HAL_UART_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001afc:	f000 fc4c 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	2000025c 	.word	0x2000025c
 8001b08:	40008000 	.word	0x40008000

08001b0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b12:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <MX_SPI1_Init+0x6c>)
 8001b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b42:	2218      	movs	r2, #24
 8001b44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b5a:	220a      	movs	r2, #10
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_SPI1_Init+0x68>)
 8001b60:	f004 faca 	bl	80060f8 <HAL_SPI_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001b6a:	f000 fc15 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000032c 	.word	0x2000032c
 8001b78:	40013000 	.word	0x40013000

08001b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_DMA_Init+0x38>)
 8001b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <MX_DMA_Init+0x38>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6493      	str	r3, [r2, #72]	; 0x48
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_DMA_Init+0x38>)
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	2045      	movs	r0, #69	; 0x45
 8001ba0:	f001 fcdc 	bl	800355c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001ba4:	2045      	movs	r0, #69	; 0x45
 8001ba6:	f001 fcf5 	bl	8003594 <HAL_NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be6:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a5f      	ldr	r2, [pc, #380]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a59      	ldr	r2, [pc, #356]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	4b54      	ldr	r3, [pc, #336]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a53      	ldr	r2, [pc, #332]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2e:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a4d      	ldr	r2, [pc, #308]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c34:	f043 0308 	orr.w	r3, r3, #8
 8001c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3a:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c46:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <MX_GPIO_Init+0x1b0>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001c5e:	f002 ff01 	bl	8004a64 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001c68:	4840      	ldr	r0, [pc, #256]	; (8001d6c <MX_GPIO_Init+0x1b4>)
 8001c6a:	f002 f819 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c74:	483e      	ldr	r0, [pc, #248]	; (8001d70 <MX_GPIO_Init+0x1b8>)
 8001c76:	f002 f813 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	483d      	ldr	r0, [pc, #244]	; (8001d74 <MX_GPIO_Init+0x1bc>)
 8001c80:	f002 f80e 	bl	8003ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4837      	ldr	r0, [pc, #220]	; (8001d78 <MX_GPIO_Init+0x1c0>)
 8001c9c:	f001 fe6e 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001ca0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	482c      	ldr	r0, [pc, #176]	; (8001d6c <MX_GPIO_Init+0x1b4>)
 8001cba:	f001 fe5f 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001cbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4826      	ldr	r0, [pc, #152]	; (8001d70 <MX_GPIO_Init+0x1b8>)
 8001cd8:	f001 fe50 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : GDO0_Pin */
  GPIO_InitStruct.Pin = GDO0_Pin;
 8001cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ce2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GDO0_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481f      	ldr	r0, [pc, #124]	; (8001d70 <MX_GPIO_Init+0x1b8>)
 8001cf4:	f001 fe42 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481a      	ldr	r0, [pc, #104]	; (8001d74 <MX_GPIO_Init+0x1bc>)
 8001d0c:	f001 fe36 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4813      	ldr	r0, [pc, #76]	; (8001d74 <MX_GPIO_Init+0x1bc>)
 8001d28:	f001 fe28 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d2c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d3e:	230a      	movs	r3, #10
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4c:	f001 fe16 	bl	800397c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2105      	movs	r1, #5
 8001d54:	2028      	movs	r0, #40	; 0x28
 8001d56:	f001 fc01 	bl	800355c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d5a:	2028      	movs	r0, #40	; 0x28
 8001d5c:	f001 fc1a 	bl	8003594 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d60:	bf00      	nop
 8001d62:	3730      	adds	r7, #48	; 0x30
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	48000c00 	.word	0x48000c00
 8001d74:	48001800 	.word	0x48001800
 8001d78:	48000800 	.word	0x48000800

08001d7c <StartConsoleTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartConsoleTask */
void StartConsoleTask(void *argument)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0a4      	sub	sp, #144	; 0x90
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osStatus_t status;
	char data[128]; // Taille maximale des données à envoyer

	consoleQueueHandle = osMessageQueueNew(10, sizeof(data), NULL);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	200a      	movs	r0, #10
 8001d8a:	f006 feda 	bl	8008b42 <osMessageQueueNew>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <StartConsoleTask+0x94>)
 8001d92:	6013      	str	r3, [r2, #0]
	consoleMutexHandle = osMutexNew(NULL);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f006 fdc6 	bl	8008926 <osMutexNew>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <StartConsoleTask+0x98>)
 8001d9e:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001da0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da4:	481c      	ldr	r0, [pc, #112]	; (8001e18 <StartConsoleTask+0x9c>)
 8001da6:	f001 ff93 	bl	8003cd0 <HAL_GPIO_TogglePin>
		status = osMessageQueueGet(consoleQueueHandle, &data, NULL, 0); // vérification si données dans fifo
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <StartConsoleTask+0x94>)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f107 010c 	add.w	r1, r7, #12
 8001db2:	2300      	movs	r3, #0
 8001db4:	2200      	movs	r2, #0
 8001db6:	f006 ff97 	bl	8008ce8 <osMessageQueueGet>
 8001dba:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (status == osOK)
 8001dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d11f      	bne.n	8001e06 <StartConsoleTask+0x8a>
		{
		  status = osMutexAcquire(consoleMutexHandle, osWaitForever);
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <StartConsoleTask+0x98>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f04f 31ff 	mov.w	r1, #4294967295
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f006 fe2f 	bl	8008a32 <osMutexAcquire>
 8001dd4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  if (status == osOK)
 8001dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d112      	bne.n	8001e06 <StartConsoleTask+0x8a>
		  {
			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)&data, strlen(data), 0xFFFF); // envoyer données à UART
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fa53 	bl	8000290 <strlen>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	f107 010c 	add.w	r1, r7, #12
 8001df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df6:	4809      	ldr	r0, [pc, #36]	; (8001e1c <StartConsoleTask+0xa0>)
 8001df8:	f005 fbae 	bl	8007558 <HAL_UART_Transmit>
			  osMutexRelease(consoleMutexHandle);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <StartConsoleTask+0x98>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f006 fe61 	bl	8008ac8 <osMutexRelease>
		  }
		}
		osDelay(1000);
 8001e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e0a:	f006 fd71 	bl	80088f0 <osDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001e0e:	e7c7      	b.n	8001da0 <StartConsoleTask+0x24>
 8001e10:	20000ab0 	.word	0x20000ab0
 8001e14:	20000ab4 	.word	0x20000ab4
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	2000025c 	.word	0x2000025c

08001e20 <StartIMUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMUTask */
void StartIMUTask(void* argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 6 */
  stmdev_ctx_t dev_ctx_imu;
  stmdev_ctx_t dev_ctx_mag;

  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = stm32l4_write_imu;
 8001e28:	4b94      	ldr	r3, [pc, #592]	; (800207c <StartIMUTask+0x25c>)
 8001e2a:	61bb      	str	r3, [r7, #24]
  dev_ctx_imu.read_reg = stm32l4_read_imu;
 8001e2c:	4b94      	ldr	r3, [pc, #592]	; (8002080 <StartIMUTask+0x260>)
 8001e2e:	61fb      	str	r3, [r7, #28]
  dev_ctx_imu.handle = (void *)&imu_bus;
 8001e30:	4b94      	ldr	r3, [pc, #592]	; (8002084 <StartIMUTask+0x264>)
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = stm32l4_write_mag;
 8001e34:	4b94      	ldr	r3, [pc, #592]	; (8002088 <StartIMUTask+0x268>)
 8001e36:	60bb      	str	r3, [r7, #8]
  dev_ctx_mag.read_reg = stm32l4_read_mag;
 8001e38:	4b94      	ldr	r3, [pc, #592]	; (800208c <StartIMUTask+0x26c>)
 8001e3a:	60fb      	str	r3, [r7, #12]
  dev_ctx_mag.handle = (void *)&mag_bus;
 8001e3c:	4b94      	ldr	r3, [pc, #592]	; (8002090 <StartIMUTask+0x270>)
 8001e3e:	617b      	str	r3, [r7, #20]

  osDelay(BOOT_TIME);
 8001e40:	2014      	movs	r0, #20
 8001e42:	f006 fd55 	bl	80088f0 <osDelay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 8001e46:	f107 0118 	add.w	r1, r7, #24
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	4a91      	ldr	r2, [pc, #580]	; (8002094 <StartIMUTask+0x274>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbb1 	bl	80015b8 <lsm9ds1_dev_id_get>

  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID)
 8001e56:	4b8f      	ldr	r3, [pc, #572]	; (8002094 <StartIMUTask+0x274>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b68      	cmp	r3, #104	; 0x68
 8001e5c:	d103      	bne.n	8001e66 <StartIMUTask+0x46>
 8001e5e:	4b8d      	ldr	r3, [pc, #564]	; (8002094 <StartIMUTask+0x274>)
 8001e60:	785b      	ldrb	r3, [r3, #1]
 8001e62:	2b3d      	cmp	r3, #61	; 0x3d
 8001e64:	d003      	beq.n	8001e6e <StartIMUTask+0x4e>
  {
	    sendUART("whoami not passed\r\n");
 8001e66:	488c      	ldr	r0, [pc, #560]	; (8002098 <StartIMUTask+0x278>)
 8001e68:	f000 f9ba 	bl	80021e0 <sendUART>
 8001e6c:	e005      	b.n	8001e7a <StartIMUTask+0x5a>
  }
  else
  {
    	sendUART("whoami passed\r\n");
 8001e6e:	488b      	ldr	r0, [pc, #556]	; (800209c <StartIMUTask+0x27c>)
 8001e70:	f000 f9b6 	bl	80021e0 <sendUART>
    	osDelay(100);
 8001e74:	2064      	movs	r0, #100	; 0x64
 8001e76:	f006 fd3b 	bl	80088f0 <osDelay>
  }
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8001e7a:	f107 0118 	add.w	r1, r7, #24
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	2201      	movs	r2, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fbd1 	bl	800162c <lsm9ds1_dev_reset_set>
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu,
 8001e8a:	f107 0118 	add.w	r1, r7, #24
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2201      	movs	r2, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f9be 	bl	8001216 <lsm9ds1_block_data_update_set>
                                PROPERTY_ENABLE);
  /* Set full scale */
   lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 8001e9a:	f107 0318 	add.w	r3, r7, #24
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f992 	bl	80011ca <lsm9ds1_xl_full_scale_set>
   lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	2103      	movs	r1, #3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f901 	bl	80010b4 <lsm9ds1_gy_full_scale_set>
   lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fa76 	bl	80013aa <lsm9ds1_mag_full_scale_set>
   lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fc87 	bl	80017d8 <lsm9ds1_xl_filter_aalias_bandwidth_set>
   lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu,
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	2110      	movs	r1, #16
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fcd6 	bl	8001882 <lsm9ds1_xl_filter_lp_bandwidth_set>
                                      LSM9DS1_LP_ODR_DIV_50);
   lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 8001ed6:	f107 0318 	add.w	r3, r7, #24
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fcaa 	bl	8001836 <lsm9ds1_xl_filter_out_path_set>
   /* Gyroscope filtering chain */
   lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu,
 8001ee2:	f107 0318 	add.w	r3, r7, #24
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fbe4 	bl	80016b6 <lsm9ds1_gy_filter_lp_bandwidth_set>
                                      LSM9DS1_LP_ULTRA_LIGHT);
   lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 8001eee:	f107 0318 	add.w	r3, r7, #24
 8001ef2:	2105      	movs	r1, #5
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fc49 	bl	800178c <lsm9ds1_gy_filter_hp_bandwidth_set>
   lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu,
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	2112      	movs	r1, #18
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fbfe 	bl	8001702 <lsm9ds1_gy_filter_out_path_set>
                                  LSM9DS1_LPF1_HPF_LPF2_OUT);
   /* Set Output Data Rate / Power mode */
   lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 8001f06:	f107 0318 	add.w	r3, r7, #24
 8001f0a:	2122      	movs	r1, #34	; 0x22
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f8f7 	bl	8001100 <lsm9ds1_imu_data_rate_set>
   lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	2134      	movs	r1, #52	; 0x34
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f9cb 	bl	80012b4 <lsm9ds1_mag_data_rate_set>
  /* Infinite loop */
  for(;;)
  {
    /* Read device status register */
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8001f1e:	f107 0118 	add.w	r1, r7, #24
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4a5e      	ldr	r2, [pc, #376]	; (80020a0 <StartIMUTask+0x280>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fb62 	bl	80015f2 <lsm9ds1_dev_status_get>
	if ( reg.status_imu.xlda && reg.status_imu.gda )
 8001f2e:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <StartIMUTask+0x280>)
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d061      	beq.n	8002000 <StartIMUTask+0x1e0>
 8001f3c:	4b58      	ldr	r3, [pc, #352]	; (80020a0 <StartIMUTask+0x280>)
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d05a      	beq.n	8002000 <StartIMUTask+0x1e0>
	{
	  /* Read imu data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001f4a:	2206      	movs	r2, #6
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4855      	ldr	r0, [pc, #340]	; (80020a4 <StartIMUTask+0x284>)
 8001f50:	f00a fca1 	bl	800c896 <memset>
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001f54:	2206      	movs	r2, #6
 8001f56:	2100      	movs	r1, #0
 8001f58:	4853      	ldr	r0, [pc, #332]	; (80020a8 <StartIMUTask+0x288>)
 8001f5a:	f00a fc9c 	bl	800c896 <memset>
	  lsm9ds1_acceleration_raw_get(&dev_ctx_imu,
 8001f5e:	f107 0318 	add.w	r3, r7, #24
 8001f62:	4950      	ldr	r1, [pc, #320]	; (80020a4 <StartIMUTask+0x284>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fa91 	bl	800148c <lsm9ds1_acceleration_raw_get>
	                               data_raw_acceleration);
	  lsm9ds1_angular_rate_raw_get(&dev_ctx_imu,
 8001f6a:	f107 0318 	add.w	r3, r7, #24
 8001f6e:	494e      	ldr	r1, [pc, #312]	; (80020a8 <StartIMUTask+0x288>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fa40 	bl	80013f6 <lsm9ds1_angular_rate_raw_get>
	                               data_raw_angular_rate);
	  acceleration_mg[0] = lsm9ds1_from_fs4g_to_mg(
 8001f76:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <StartIMUTask+0x284>)
 8001f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff f851 	bl	8001024 <lsm9ds1_from_fs4g_to_mg>
 8001f82:	eef0 7a40 	vmov.f32	s15, s0
 8001f86:	4b49      	ldr	r3, [pc, #292]	; (80020ac <StartIMUTask+0x28c>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
	                         data_raw_acceleration[0]);
	  acceleration_mg[1] = lsm9ds1_from_fs4g_to_mg(
 8001f8c:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <StartIMUTask+0x284>)
 8001f8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f846 	bl	8001024 <lsm9ds1_from_fs4g_to_mg>
 8001f98:	eef0 7a40 	vmov.f32	s15, s0
 8001f9c:	4b43      	ldr	r3, [pc, #268]	; (80020ac <StartIMUTask+0x28c>)
 8001f9e:	edc3 7a01 	vstr	s15, [r3, #4]
	                         data_raw_acceleration[1]);
	  acceleration_mg[2] = lsm9ds1_from_fs4g_to_mg(
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <StartIMUTask+0x284>)
 8001fa4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f83b 	bl	8001024 <lsm9ds1_from_fs4g_to_mg>
 8001fae:	eef0 7a40 	vmov.f32	s15, s0
 8001fb2:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <StartIMUTask+0x28c>)
 8001fb4:	edc3 7a02 	vstr	s15, [r3, #8]
	                         data_raw_acceleration[2]);
	  angular_rate_mdps[0] = lsm9ds1_from_fs2000dps_to_mdps(
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <StartIMUTask+0x288>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f848 	bl	8001054 <lsm9ds1_from_fs2000dps_to_mdps>
 8001fc4:	eef0 7a40 	vmov.f32	s15, s0
 8001fc8:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <StartIMUTask+0x290>)
 8001fca:	edc3 7a00 	vstr	s15, [r3]
	                           data_raw_angular_rate[0]);
	  angular_rate_mdps[1] = lsm9ds1_from_fs2000dps_to_mdps(
 8001fce:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <StartIMUTask+0x288>)
 8001fd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f83d 	bl	8001054 <lsm9ds1_from_fs2000dps_to_mdps>
 8001fda:	eef0 7a40 	vmov.f32	s15, s0
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <StartIMUTask+0x290>)
 8001fe0:	edc3 7a01 	vstr	s15, [r3, #4]
	                           data_raw_angular_rate[1]);
	  angular_rate_mdps[2] = lsm9ds1_from_fs2000dps_to_mdps(
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <StartIMUTask+0x288>)
 8001fe6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f832 	bl	8001054 <lsm9ds1_from_fs2000dps_to_mdps>
 8001ff0:	eef0 7a40 	vmov.f32	s15, s0
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <StartIMUTask+0x290>)
 8001ff6:	edc3 7a02 	vstr	s15, [r3, #8]
	  //sprintf((char *)tx_buffer,
	  //        "IMU - [mg]:%4.2f\t%4.2f\t%4.2f\t[mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
	  //        acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
	  //        angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
	  //sprintf((char *)tx_buffer, "blabla\r\n");
	  osDelay(100);
 8001ffa:	2064      	movs	r0, #100	; 0x64
 8001ffc:	f006 fc78 	bl	80088f0 <osDelay>
	}

	if ( reg.status_mag.zyxda )
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <StartIMUTask+0x280>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d02e      	beq.n	800206c <StartIMUTask+0x24c>
	{
	  /* Read magnetometer data */
	  memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 800200e:	2206      	movs	r2, #6
 8002010:	2100      	movs	r1, #0
 8002012:	4828      	ldr	r0, [pc, #160]	; (80020b4 <StartIMUTask+0x294>)
 8002014:	f00a fc3f 	bl	800c896 <memset>
	  lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	4925      	ldr	r1, [pc, #148]	; (80020b4 <StartIMUTask+0x294>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fa7f 	bl	8001522 <lsm9ds1_magnetic_raw_get>
	  magnetic_field_mgauss[0] = lsm9ds1_from_fs16gauss_to_mG(
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <StartIMUTask+0x294>)
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f82a 	bl	8001084 <lsm9ds1_from_fs16gauss_to_mG>
 8002030:	eef0 7a40 	vmov.f32	s15, s0
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <StartIMUTask+0x298>)
 8002036:	edc3 7a00 	vstr	s15, [r3]
	                               data_raw_magnetic_field[0]);
	  magnetic_field_mgauss[1] = lsm9ds1_from_fs16gauss_to_mG(
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <StartIMUTask+0x294>)
 800203c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f81f 	bl	8001084 <lsm9ds1_from_fs16gauss_to_mG>
 8002046:	eef0 7a40 	vmov.f32	s15, s0
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <StartIMUTask+0x298>)
 800204c:	edc3 7a01 	vstr	s15, [r3, #4]
	                               data_raw_magnetic_field[1]);
	  magnetic_field_mgauss[2] = lsm9ds1_from_fs16gauss_to_mG(
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <StartIMUTask+0x294>)
 8002052:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f814 	bl	8001084 <lsm9ds1_from_fs16gauss_to_mG>
 800205c:	eef0 7a40 	vmov.f32	s15, s0
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <StartIMUTask+0x298>)
 8002062:	edc3 7a02 	vstr	s15, [r3, #8]
	                               data_raw_magnetic_field[2]);
	  //sprintf((char *)tx_buffer, "MAG - [mG]:%4.2f\t%4.2f\t%4.2f\r\n",
	  //        magnetic_field_mgauss[0], magnetic_field_mgauss[1],
	  //        magnetic_field_mgauss[2]);
	  osDelay(100);
 8002066:	2064      	movs	r0, #100	; 0x64
 8002068:	f006 fc42 	bl	80088f0 <osDelay>
	}
	sendUART("Mesures faites\r\n");
 800206c:	4813      	ldr	r0, [pc, #76]	; (80020bc <StartIMUTask+0x29c>)
 800206e:	f000 f8b7 	bl	80021e0 <sendUART>
    osDelay(2000);
 8002072:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002076:	f006 fc3b 	bl	80088f0 <osDelay>
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 800207a:	e750      	b.n	8001f1e <StartIMUTask+0xfe>
 800207c:	080020c1 	.word	0x080020c1
 8002080:	08002105 	.word	0x08002105
 8002084:	20000008 	.word	0x20000008
 8002088:	08002149 	.word	0x08002149
 800208c:	08002195 	.word	0x08002195
 8002090:	20000000 	.word	0x20000000
 8002094:	20000af8 	.word	0x20000af8
 8002098:	0800e794 	.word	0x0800e794
 800209c:	0800e7a8 	.word	0x0800e7a8
 80020a0:	20000af4 	.word	0x20000af4
 80020a4:	20000ab8 	.word	0x20000ab8
 80020a8:	20000ac0 	.word	0x20000ac0
 80020ac:	20000ad0 	.word	0x20000ad0
 80020b0:	20000adc 	.word	0x20000adc
 80020b4:	20000ac8 	.word	0x20000ac8
 80020b8:	20000ae8 	.word	0x20000ae8
 80020bc:	0800e7b8 	.word	0x0800e7b8

080020c0 <stm32l4_write_imu>:
  /* USER CODE END 6 */
}

static int32_t stm32l4_write_imu(void *handle, uint8_t reg,
                                  const uint8_t *bufp, uint16_t len)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af04      	add	r7, sp, #16
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	461a      	mov	r2, r3
 80020cc:	460b      	mov	r3, r1
 80020ce:	72fb      	strb	r3, [r7, #11]
 80020d0:	4613      	mov	r3, r2
 80020d2:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	791b      	ldrb	r3, [r3, #4]
 80020e0:	b299      	uxth	r1, r3
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ea:	9302      	str	r3, [sp, #8]
 80020ec:	893b      	ldrh	r3, [r7, #8]
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	f001 feb9 	bl	8003e6c <HAL_I2C_Mem_Write>
                 I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <stm32l4_read_imu>:

static int32_t stm32l4_read_imu(void *handle, uint8_t reg,
                                 uint8_t *bufp, uint16_t len)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af04      	add	r7, sp, #16
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	461a      	mov	r2, r3
 8002110:	460b      	mov	r3, r1
 8002112:	72fb      	strb	r3, [r7, #11]
 8002114:	4613      	mov	r3, r2
 8002116:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	791b      	ldrb	r3, [r3, #4]
 8002124:	b299      	uxth	r1, r3
 8002126:	7afb      	ldrb	r3, [r7, #11]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	893b      	ldrh	r3, [r7, #8]
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2301      	movs	r3, #1
 800213a:	f001 ffab 	bl	8004094 <HAL_I2C_Mem_Read>
                 I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <stm32l4_write_mag>:

static int32_t stm32l4_write_mag(void *handle, uint8_t reg,
                                  const uint8_t *bufp, uint16_t len)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af04      	add	r7, sp, #16
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	461a      	mov	r2, r3
 8002154:	460b      	mov	r3, r1
 8002156:	72fb      	strb	r3, [r7, #11]
 8002158:	4613      	mov	r3, r2
 800215a:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	617b      	str	r3, [r7, #20]

  reg |= 0x80;
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002166:	72fb      	strb	r3, [r7, #11]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg,
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	b299      	uxth	r1, r3
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	b29a      	uxth	r2, r3
 8002176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	893b      	ldrh	r3, [r7, #8]
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2301      	movs	r3, #1
 8002186:	f001 fe71 	bl	8003e6c <HAL_I2C_Mem_Write>
                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <stm32l4_read_mag>:

static int32_t stm32l4_read_mag(void *handle, uint8_t reg,
                                 uint8_t *bufp, uint16_t len)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af04      	add	r7, sp, #16
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	72fb      	strb	r3, [r7, #11]
 80021a4:	4613      	mov	r3, r2
 80021a6:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	617b      	str	r3, [r7, #20]
  reg |= 0x80;
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021b2:	72fb      	strb	r3, [r7, #11]

  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg,
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	791b      	ldrb	r3, [r3, #4]
 80021bc:	b299      	uxth	r1, r3
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c6:	9302      	str	r3, [sp, #8]
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2301      	movs	r3, #1
 80021d2:	f001 ff5f 	bl	8004094 <HAL_I2C_Mem_Read>
                 I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <sendUART>:

void sendUART(char *data)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	osMessageQueuePut(consoleQueueHandle, (char *)data, 0, 0);
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <sendUART+0x20>)
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	2300      	movs	r3, #0
 80021ee:	2200      	movs	r2, #0
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	f006 fd19 	bl	8008c28 <osMessageQueuePut>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000ab0 	.word	0x20000ab0

08002204 <StartRFTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRFTask */
void StartRFTask(void *argument)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af02      	add	r7, sp, #8
 800220a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRFTask */
	rf_begin(&hspi1, GFSK_1_2_kb, MHz434, CS_GPIO_Port, CS_Pin, GDO0_Pin);
 800220c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <StartRFTask+0x78>)
 800221a:	2202      	movs	r2, #2
 800221c:	2101      	movs	r1, #1
 800221e:	4818      	ldr	r0, [pc, #96]	; (8002280 <StartRFTask+0x7c>)
 8002220:	f000 f8e4 	bl	80023ec <rf_begin>
	rf_sidle();
 8002224:	f000 fb20 	bl	8002868 <rf_sidle>
	uint8_t result = rf_read_register(MARCSTATE);
 8002228:	20f5      	movs	r0, #245	; 0xf5
 800222a:	f000 fc84 	bl	8002b36 <rf_read_register>
 800222e:	4603      	mov	r3, r0
 8002230:	737b      	strb	r3, [r7, #13]
	rf_set_carrier_frequency(433.98);
 8002232:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002284 <StartRFTask+0x80>
 8002236:	f000 fa9b 	bl	8002770 <rf_set_carrier_frequency>
	rf_set_carrier_offset(50);
 800223a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002288 <StartRFTask+0x84>
 800223e:	f000 fa6b 	bl	8002718 <rf_set_carrier_offset>
	uint16_t i = 2;
 8002242:	2302      	movs	r3, #2
 8002244:	81fb      	strh	r3, [r7, #14]
	while(i<33){
 8002246:	e00a      	b.n	800225e <StartRFTask+0x5a>
			  transmit_demo(i);
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f81e 	bl	800228c <transmit_demo>
			  osDelay(1000);
 8002250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002254:	f006 fb4c 	bl	80088f0 <osDelay>
			  i++;
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	3301      	adds	r3, #1
 800225c:	81fb      	strh	r3, [r7, #14]
	while(i<33){
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	2b20      	cmp	r3, #32
 8002262:	d9f1      	bls.n	8002248 <StartRFTask+0x44>
	}
  /* Infinite loop */
  for(;;)
  {
		transmit_demo(i);
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f810 	bl	800228c <transmit_demo>
		i +=100;
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	3364      	adds	r3, #100	; 0x64
 8002270:	81fb      	strh	r3, [r7, #14]
		osDelay(1000);
 8002272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002276:	f006 fb3b 	bl	80088f0 <osDelay>
		transmit_demo(i);
 800227a:	e7f3      	b.n	8002264 <StartRFTask+0x60>
 800227c:	48000c00 	.word	0x48000c00
 8002280:	2000032c 	.word	0x2000032c
 8002284:	43d8fd71 	.word	0x43d8fd71
 8002288:	42480000 	.word	0x42480000

0800228c <transmit_demo>:
  }
  /* USER CODE END StartRFTask */
}

void transmit_demo(uint16_t size){
 800228c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002290:	b087      	sub	sp, #28
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	80fb      	strh	r3, [r7, #6]
 8002298:	466b      	mov	r3, sp
 800229a:	461e      	mov	r6, r3
	uint8_t data[size];
 800229c:	88f9      	ldrh	r1, [r7, #6]
 800229e:	460b      	mov	r3, r1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	b28b      	uxth	r3, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	4698      	mov	r8, r3
 80022aa:	4691      	mov	r9, r2
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022c0:	b28b      	uxth	r3, r1
 80022c2:	2200      	movs	r2, #0
 80022c4:	461c      	mov	r4, r3
 80022c6:	4615      	mov	r5, r2
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	00eb      	lsls	r3, r5, #3
 80022d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022d6:	00e2      	lsls	r2, r4, #3
 80022d8:	460b      	mov	r3, r1
 80022da:	3307      	adds	r3, #7
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	ebad 0d03 	sub.w	sp, sp, r3
 80022e4:	466b      	mov	r3, sp
 80022e6:	3300      	adds	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
	int i;
	static int counter = 0;
	data[0] = size & 0xFF;
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	701a      	strb	r2, [r3, #0]
	data[1] = (size>>8) & 0xFF;
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	705a      	strb	r2, [r3, #1]

	for(i=2; i<size; i++){
 80022fe:	2302      	movs	r3, #2
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e00e      	b.n	8002322 <transmit_demo+0x96>
	  data[i] = (i)%256;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	425a      	negs	r2, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	bf58      	it	pl
 800230e:	4253      	negpl	r3, r2
 8002310:	b2d9      	uxtb	r1, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4413      	add	r3, r2
 8002318:	460a      	mov	r2, r1
 800231a:	701a      	strb	r2, [r3, #0]
	for(i=2; i<size; i++){
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	429a      	cmp	r2, r3
 8002328:	dbec      	blt.n	8002304 <transmit_demo+0x78>
	}

	if(send_frame(data, size)!=FRAME_OK) sendUART("ERROR\n\r");
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	4619      	mov	r1, r3
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fb16 	bl	8002960 <send_frame>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d003      	beq.n	8002342 <transmit_demo+0xb6>
 800233a:	480b      	ldr	r0, [pc, #44]	; (8002368 <transmit_demo+0xdc>)
 800233c:	f7ff ff50 	bl	80021e0 <sendUART>
 8002340:	e002      	b.n	8002348 <transmit_demo+0xbc>
	else sendUART("Niquel!\r\n");
 8002342:	480a      	ldr	r0, [pc, #40]	; (800236c <transmit_demo+0xe0>)
 8002344:	f7ff ff4c 	bl	80021e0 <sendUART>
	data[size-1] = counter++;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <transmit_demo+0xe4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <transmit_demo+0xe4>)
 8002350:	600a      	str	r2, [r1, #0]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	3a01      	subs	r2, #1
 8002356:	b2d9      	uxtb	r1, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	5499      	strb	r1, [r3, r2]
 800235c:	46b5      	mov	sp, r6

}
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002368:	0800e7cc 	.word	0x0800e7cc
 800236c:	0800e7d4 	.word	0x0800e7d4
 8002370:	20000afc 	.word	0x20000afc

08002374 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002386:	f000 ffed 	bl	8003364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40001400 	.word	0x40001400

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i
}
 800239e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <Error_Handler+0x8>
	...

080023a4 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <DWT_Delay_us+0x40>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80023b2:	f003 f90d 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <DWT_Delay_us+0x44>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0c9b      	lsrs	r3, r3, #18
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80023c8:	bf00      	nop
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <DWT_Delay_us+0x40>)
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad2      	subs	r2, r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3f8      	bcc.n	80023ca <DWT_Delay_us+0x26>
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e0001000 	.word	0xe0001000
 80023e8:	431bde83 	.word	0x431bde83

080023ec <rf_begin>:
/* Private user code ---------------------------------------------------------*/

/* RF DRIVER ----------------------------------------------------------------------------------------------------------------------*/

/*--------------------------[CC1101 Init and Settings]------------------------------*/
uint8_t rf_begin(SPI_HandleTypeDef* hspi, MODULATION_TypeDef mode, ISMBAND_TypeDef ism_band, GPIO_TypeDef* cs_port, uint16_t cs_pin, uint16_t gdo0){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	72fb      	strb	r3, [r7, #11]
 80023fa:	4613      	mov	r3, r2
 80023fc:	72bb      	strb	r3, [r7, #10]
	 * @param gdo0: Pin number of the pin connected to C1101 CGDO0, used for interruptions. Interruption is configured as FALLING EDGE.
	 *
	 */

	//Pinout linking
	hal_spi = hspi;
 80023fe:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <rf_begin+0x7c>)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port = cs_port;
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <rf_begin+0x80>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
	CS_Pin = cs_pin;
 800240a:	4a19      	ldr	r2, [pc, #100]	; (8002470 <rf_begin+0x84>)
 800240c:	8b3b      	ldrh	r3, [r7, #24]
 800240e:	8013      	strh	r3, [r2, #0]
	GDO0_Pin = gdo0;
 8002410:	4a18      	ldr	r2, [pc, #96]	; (8002474 <rf_begin+0x88>)
 8002412:	8bbb      	ldrh	r3, [r7, #28]
 8002414:	8013      	strh	r3, [r2, #0]

	//Turn on the chip
	rf_reset();
 8002416:	f000 f82f 	bl	8002478 <rf_reset>

	//Check that the SPI works
	if(!rf_check()){
 800241a:	f000 f853 	bl	80024c4 <rf_check>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <rf_begin+0x3c>
		return FALSE;
 8002424:	2300      	movs	r3, #0
 8002426:	e01b      	b.n	8002460 <rf_begin+0x74>
	}


	rf_write_strobe(SFTX); //Flush TX FIFO
 8002428:	203b      	movs	r0, #59	; 0x3b
 800242a:	f000 fb73 	bl	8002b14 <rf_write_strobe>
	HAL_Delay(1); //TODO I don't think this is really needed
 800242e:	2001      	movs	r0, #1
 8002430:	f000 ffb8 	bl	80033a4 <HAL_Delay>
	rf_write_strobe(SFRX); //Flush RX FIFO
 8002434:	203a      	movs	r0, #58	; 0x3a
 8002436:	f000 fb6d 	bl	8002b14 <rf_write_strobe>
	HAL_Delay(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 ffb2 	bl	80033a4 <HAL_Delay>

	rf_set_modulation_mode(mode);
 8002440:	7afb      	ldrb	r3, [r7, #11]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f86a 	bl	800251c <rf_set_modulation_mode>

	rf_set_ISMband(ism_band);
 8002448:	7abb      	ldrb	r3, [r7, #10]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f8a8 	bl	80025a0 <rf_set_ISMband>
	rf_set_channel(0);
 8002450:	2000      	movs	r0, #0
 8002452:	f000 f907 	bl	8002664 <rf_set_channel>
	rf_set_output_power_level(-30);
 8002456:	f06f 001d 	mvn.w	r0, #29
 800245a:	f000 f911 	bl	8002680 <rf_set_output_power_level>
	return TRUE;
 800245e:	2301      	movs	r3, #1


}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000b00 	.word	0x20000b00
 800246c:	20000b08 	.word	0x20000b08
 8002470:	20000b04 	.word	0x20000b04
 8002474:	20000b0c 	.word	0x20000b0c

08002478 <rf_reset>:

void rf_reset(){
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	/**
	 * @brief Turns on the RF chip with a specific sequence on the CS pin and a SRES command.
	 * The former is only needed on a cold start.
	 */
	DWT_Delay_Init();
 800247c:	f7fe fd72 	bl	8000f64 <DWT_Delay_Init>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <rf_reset+0x44>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <rf_reset+0x48>)
 8002486:	8811      	ldrh	r1, [r2, #0]
 8002488:	2200      	movs	r2, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fc08 	bl	8003ca0 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 8002490:	200a      	movs	r0, #10
 8002492:	f7ff ff87 	bl	80023a4 <DWT_Delay_us>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <rf_reset+0x44>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <rf_reset+0x48>)
 800249c:	8811      	ldrh	r1, [r2, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fbfd 	bl	8003ca0 <HAL_GPIO_WritePin>
	DWT_Delay_us(40);
 80024a6:	2028      	movs	r0, #40	; 0x28
 80024a8:	f7ff ff7c 	bl	80023a4 <DWT_Delay_us>

	rf_write_strobe(SRES);
 80024ac:	2030      	movs	r0, #48	; 0x30
 80024ae:	f000 fb31 	bl	8002b14 <rf_write_strobe>
	HAL_Delay(1);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f000 ff76 	bl	80033a4 <HAL_Delay>

}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000b08 	.word	0x20000b08
 80024c0:	20000b04 	.word	0x20000b04

080024c4 <rf_check>:

uint8_t rf_check(){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
	/**
	 * @brief Checks the version of the RF chip to check if SPI is OK. It checks 10 times to make sure wires are really OK.
	 */

	uint8_t ok = TRUE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t version;
	for(i=0; i<10; i++){
 80024ce:	2300      	movs	r3, #0
 80024d0:	71bb      	strb	r3, [r7, #6]
 80024d2:	e00c      	b.n	80024ee <rf_check+0x2a>
		version = rf_read_register(VERSION);
 80024d4:	20f1      	movs	r0, #241	; 0xf1
 80024d6:	f000 fb2e 	bl	8002b36 <rf_read_register>
 80024da:	4603      	mov	r3, r0
 80024dc:	717b      	strb	r3, [r7, #5]
		if(version!=0x14)
 80024de:	797b      	ldrb	r3, [r7, #5]
 80024e0:	2b14      	cmp	r3, #20
 80024e2:	d001      	beq.n	80024e8 <rf_check+0x24>
			ok = FALSE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<10; i++){
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	3301      	adds	r3, #1
 80024ec:	71bb      	strb	r3, [r7, #6]
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b09      	cmp	r3, #9
 80024f2:	d9ef      	bls.n	80024d4 <rf_check+0x10>
	}

	if (ok){
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <rf_check+0x3e>
		printf("RF check: OK\n\r");
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <rf_check+0x50>)
 80024fc:	f00a f976 	bl	800c7ec <iprintf>
 8002500:	e002      	b.n	8002508 <rf_check+0x44>
	}else{
		printf("RF check: No luck :(\n\r");
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <rf_check+0x54>)
 8002504:	f00a f972 	bl	800c7ec <iprintf>
	}
	return ok;
 8002508:	79fb      	ldrb	r3, [r7, #7]

}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	0800e7e0 	.word	0x0800e7e0
 8002518:	0800e7f0 	.word	0x0800e7f0

0800251c <rf_set_modulation_mode>:

void rf_set_modulation_mode(MODULATION_TypeDef mode){
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	 * @brief Loads the wanted modulation preset to the CC1101.
	 */

    const uint8_t* cfg_reg;

    switch (mode)
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	3b01      	subs	r3, #1
 800252a:	2b05      	cmp	r3, #5
 800252c:	d820      	bhi.n	8002570 <rf_set_modulation_mode+0x54>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <rf_set_modulation_mode+0x18>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	0800254d 	.word	0x0800254d
 8002538:	08002553 	.word	0x08002553
 800253c:	08002559 	.word	0x08002559
 8002540:	0800255f 	.word	0x0800255f
 8002544:	08002565 	.word	0x08002565
 8002548:	0800256b 	.word	0x0800256b
    {
        case GFSK_1_2_kb:
        			cfg_reg = cc1100_GFSK_1_2_kb;
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <rf_set_modulation_mode+0x6c>)
 800254e:	60fb      	str	r3, [r7, #12]
                    break;
 8002550:	e011      	b.n	8002576 <rf_set_modulation_mode+0x5a>
        case GFSK_38_4_kb:
                    cfg_reg = cc1100_GFSK_38_4_kb;
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <rf_set_modulation_mode+0x70>)
 8002554:	60fb      	str	r3, [r7, #12]
                    break;
 8002556:	e00e      	b.n	8002576 <rf_set_modulation_mode+0x5a>
        case GFSK_100_kb:
        			cfg_reg = cc1100_GFSK_100_kb;
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <rf_set_modulation_mode+0x74>)
 800255a:	60fb      	str	r3, [r7, #12]
                    break;
 800255c:	e00b      	b.n	8002576 <rf_set_modulation_mode+0x5a>
        case MSK_250_kb:
        			cfg_reg = cc1100_MSK_250_kb;
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <rf_set_modulation_mode+0x78>)
 8002560:	60fb      	str	r3, [r7, #12]
                    break;
 8002562:	e008      	b.n	8002576 <rf_set_modulation_mode+0x5a>
        case MSK_500_kb:
        			cfg_reg = cc1100_MSK_500_kb;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <rf_set_modulation_mode+0x7c>)
 8002566:	60fb      	str	r3, [r7, #12]
                    break;
 8002568:	e005      	b.n	8002576 <rf_set_modulation_mode+0x5a>
        case OOK_4_8_kb:
        			cfg_reg = cc1100_OOK_4_8_kb;
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <rf_set_modulation_mode+0x80>)
 800256c:	60fb      	str	r3, [r7, #12]
                    break;
 800256e:	e002      	b.n	8002576 <rf_set_modulation_mode+0x5a>
        default:
        			cfg_reg = cc1100_GFSK_38_4_kb;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <rf_set_modulation_mode+0x70>)
 8002572:	60fb      	str	r3, [r7, #12]
                    break;
 8002574:	bf00      	nop
    }

    rf_write_data(WRITE_BURST(0), cfg_reg, CFG_REGISTER);                            //writes all 47 config register
 8002576:	222f      	movs	r2, #47	; 0x2f
 8002578:	68f9      	ldr	r1, [r7, #12]
 800257a:	2040      	movs	r0, #64	; 0x40
 800257c:	f000 fb05 	bl	8002b8a <rf_write_data>


}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	0800e8f4 	.word	0x0800e8f4
 800258c:	0800e924 	.word	0x0800e924
 8002590:	0800e954 	.word	0x0800e954
 8002594:	0800e984 	.word	0x0800e984
 8002598:	0800e9b4 	.word	0x0800e9b4
 800259c:	0800e9e4 	.word	0x0800e9e4

080025a0 <rf_set_ISMband>:

//(Semi)DEPRECATED
void rf_set_ISMband(ISMBAND_TypeDef band){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
	 * Deprecated by rf_set_frequency(float), although the second still doesn't configure the PATABLES registers, so it is still needed.
	 */
    uint8_t freq2, freq1, freq0;
    const uint8_t* patable;

    switch (band)
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d82e      	bhi.n	8002610 <rf_set_ISMband+0x70>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <rf_set_ISMband+0x18>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025db 	.word	0x080025db
 80025c0:	080025ed 	.word	0x080025ed
 80025c4:	080025ff 	.word	0x080025ff
    {
        case MHz315:
                    freq2=0x0C;
 80025c8:	230c      	movs	r3, #12
 80025ca:	73fb      	strb	r3, [r7, #15]
                    freq1=0x1D;
 80025cc:	231d      	movs	r3, #29
 80025ce:	73bb      	strb	r3, [r7, #14]
                    freq0=0x89;
 80025d0:	2389      	movs	r3, #137	; 0x89
 80025d2:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_315;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <rf_set_ISMband+0xb4>)
 80025d6:	60bb      	str	r3, [r7, #8]
                    break;
 80025d8:	e023      	b.n	8002622 <rf_set_ISMband+0x82>
        case MHz434:                                                          //433.92MHz
                    freq2=0x10;
 80025da:	2310      	movs	r3, #16
 80025dc:	73fb      	strb	r3, [r7, #15]
                    freq1=0xB0;
 80025de:	23b0      	movs	r3, #176	; 0xb0
 80025e0:	73bb      	strb	r3, [r7, #14]
                    freq0=0x71;
 80025e2:	2371      	movs	r3, #113	; 0x71
 80025e4:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_433;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <rf_set_ISMband+0xb8>)
 80025e8:	60bb      	str	r3, [r7, #8]
                    break;
 80025ea:	e01a      	b.n	8002622 <rf_set_ISMband+0x82>
        case MHz868:                                                          //868.3MHz
                    freq2=0x21;
 80025ec:	2321      	movs	r3, #33	; 0x21
 80025ee:	73fb      	strb	r3, [r7, #15]
                    freq1=0x65;
 80025f0:	2365      	movs	r3, #101	; 0x65
 80025f2:	73bb      	strb	r3, [r7, #14]
                    freq0=0x6A;
 80025f4:	236a      	movs	r3, #106	; 0x6a
 80025f6:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_868;
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <rf_set_ISMband+0xbc>)
 80025fa:	60bb      	str	r3, [r7, #8]
                    break;
 80025fc:	e011      	b.n	8002622 <rf_set_ISMband+0x82>
        case MHz915:
                    freq2=0x23;
 80025fe:	2323      	movs	r3, #35	; 0x23
 8002600:	73fb      	strb	r3, [r7, #15]
                    freq1=0x31;
 8002602:	2331      	movs	r3, #49	; 0x31
 8002604:	73bb      	strb	r3, [r7, #14]
                    freq0=0x3B;
 8002606:	233b      	movs	r3, #59	; 0x3b
 8002608:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_915;
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <rf_set_ISMband+0xc0>)
 800260c:	60bb      	str	r3, [r7, #8]
                    break;
 800260e:	e008      	b.n	8002622 <rf_set_ISMband+0x82>
        default:                                                          //868.3MHz
					freq2=0x21;
 8002610:	2321      	movs	r3, #33	; 0x21
 8002612:	73fb      	strb	r3, [r7, #15]
					freq1=0x65;
 8002614:	2365      	movs	r3, #101	; 0x65
 8002616:	73bb      	strb	r3, [r7, #14]
					freq0=0x6A;
 8002618:	236a      	movs	r3, #106	; 0x6a
 800261a:	737b      	strb	r3, [r7, #13]
					patable = patable_power_868;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <rf_set_ISMband+0xbc>)
 800261e:	60bb      	str	r3, [r7, #8]
					break;
 8002620:	bf00      	nop
    }
    rf_write_register(FREQ2,freq2);
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	4619      	mov	r1, r3
 8002626:	200d      	movs	r0, #13
 8002628:	f000 fa9b 	bl	8002b62 <rf_write_register>
    rf_write_register(FREQ1,freq1);
 800262c:	7bbb      	ldrb	r3, [r7, #14]
 800262e:	4619      	mov	r1, r3
 8002630:	200e      	movs	r0, #14
 8002632:	f000 fa96 	bl	8002b62 <rf_write_register>
    rf_write_register(FREQ0,freq0);
 8002636:	7b7b      	ldrb	r3, [r7, #13]
 8002638:	4619      	mov	r1, r3
 800263a:	200f      	movs	r0, #15
 800263c:	f000 fa91 	bl	8002b62 <rf_write_register>
    rf_write_data(PATABLE_BURST, patable, 8);
 8002640:	2208      	movs	r2, #8
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	207e      	movs	r0, #126	; 0x7e
 8002646:	f000 faa0 	bl	8002b8a <rf_write_data>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	0800e8d4 	.word	0x0800e8d4
 8002658:	0800e8dc 	.word	0x0800e8dc
 800265c:	0800e8e4 	.word	0x0800e8e4
 8002660:	0800e8ec 	.word	0x0800e8ec

08002664 <rf_set_channel>:

void rf_set_channel(uint8_t channel){
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Set channel number.
	 */
	rf_write_register(CHANNR, channel);
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4619      	mov	r1, r3
 8002672:	200a      	movs	r0, #10
 8002674:	f000 fa75 	bl	8002b62 <rf_write_register>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <rf_set_output_power_level>:

void rf_set_output_power_level(int8_t dBm)
/*
 * @brief Selects the entry of the PATABLES preset selected previously.
 */
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
    uint8_t pa = 0xC0;
 800268a:	23c0      	movs	r3, #192	; 0xc0
 800268c:	73fb      	strb	r3, [r7, #15]

    if      (dBm <= -30) pa = 0x00;
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	f113 0f1d 	cmn.w	r3, #29
 8002696:	da02      	bge.n	800269e <rf_set_output_power_level+0x1e>
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e032      	b.n	8002704 <rf_set_output_power_level+0x84>
    else if (dBm <= -20) pa = 0x01;
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	f113 0f13 	cmn.w	r3, #19
 80026a6:	da02      	bge.n	80026ae <rf_set_output_power_level+0x2e>
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e02a      	b.n	8002704 <rf_set_output_power_level+0x84>
    else if (dBm <= -15) pa = 0x02;
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	f113 0f0e 	cmn.w	r3, #14
 80026b6:	da02      	bge.n	80026be <rf_set_output_power_level+0x3e>
 80026b8:	2302      	movs	r3, #2
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e022      	b.n	8002704 <rf_set_output_power_level+0x84>
    else if (dBm <= -10) pa = 0x03;
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	f113 0f09 	cmn.w	r3, #9
 80026c6:	da02      	bge.n	80026ce <rf_set_output_power_level+0x4e>
 80026c8:	2303      	movs	r3, #3
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e01a      	b.n	8002704 <rf_set_output_power_level+0x84>
    else if (dBm <= 0)   pa = 0x04;
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dc02      	bgt.n	80026dc <rf_set_output_power_level+0x5c>
 80026d6:	2304      	movs	r3, #4
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e013      	b.n	8002704 <rf_set_output_power_level+0x84>
    else if (dBm <= 5)   pa = 0x05;
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	dc02      	bgt.n	80026ea <rf_set_output_power_level+0x6a>
 80026e4:	2305      	movs	r3, #5
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e00c      	b.n	8002704 <rf_set_output_power_level+0x84>
    else if (dBm <= 7)   pa = 0x06;
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	2b07      	cmp	r3, #7
 80026f0:	dc02      	bgt.n	80026f8 <rf_set_output_power_level+0x78>
 80026f2:	2306      	movs	r3, #6
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e005      	b.n	8002704 <rf_set_output_power_level+0x84>
    else if (dBm <= 10)  pa = 0x07;
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b0a      	cmp	r3, #10
 80026fe:	dc01      	bgt.n	8002704 <rf_set_output_power_level+0x84>
 8002700:	2307      	movs	r3, #7
 8002702:	73fb      	strb	r3, [r7, #15]

    rf_write_register(FREND0,pa);
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	4619      	mov	r1, r3
 8002708:	2022      	movs	r0, #34	; 0x22
 800270a:	f000 fa2a 	bl	8002b62 <rf_write_register>
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <rf_set_carrier_offset>:

float rf_set_carrier_offset(float offset){
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	ed87 0a01 	vstr	s0, [r7, #4]
	 * @Brief Configures frequency offset register to achieve the tergeted offset.
	 * @param offset Desired offset. Should be between -200KHz and +200KHz, depends on crystal.
	 * @returns The actual offset
	 */
	//rf_write_register(FSCTRL0, offset);
	int8_t freqoff = offset*(1<<14)/CRYSTAL_FREQUENCY;
 8002722:	edd7 7a01 	vldr	s15, [r7, #4]
 8002726:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002764 <rf_set_carrier_offset+0x4c>
 800272a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800272e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002768 <rf_set_carrier_offset+0x50>
 8002732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800273a:	edc7 7a00 	vstr	s15, [r7]
 800273e:	783b      	ldrb	r3, [r7, #0]
 8002740:	73fb      	strb	r3, [r7, #15]
	rf_write_register(FSCTRL0, freqoff);
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	4619      	mov	r1, r3
 8002746:	200c      	movs	r0, #12
 8002748:	f000 fa0b 	bl	8002b62 <rf_write_register>
	return freqoff*(CRYSTAL_FREQUENCY/(1<<14));
 800274c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002758:	eeb0 0a67 	vmov.f32	s0, s15
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	46800000 	.word	0x46800000
 8002768:	46cb2000 	.word	0x46cb2000
 800276c:	00000000 	.word	0x00000000

08002770 <rf_set_carrier_frequency>:

float rf_set_carrier_frequency(float target_freq){
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	ed87 0a01 	vstr	s0, [r7, #4]
	/* Note that this functions depends on the value of CRYSTAL_FREQUENCY_M.
	 * @param target_freq Frequency targeted, in MHz. Positive number. Note that the actual frequency may vary.
	 * @return Actual configured frequency.
	 */
	target_freq = target_freq*1000000;
 800277a:	edd7 7a01 	vldr	s15, [r7, #4]
 800277e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002850 <rf_set_carrier_frequency+0xe0>
 8002782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002786:	edc7 7a01 	vstr	s15, [r7, #4]
	float freqf = target_freq*65536.0/(float)CRYSTAL_FREQUENCY_M;
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fd feec 	bl	8000568 <__aeabi_f2d>
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <rf_set_carrier_frequency+0xe4>)
 8002796:	f7fd ff3f 	bl	8000618 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	a329      	add	r3, pc, #164	; (adr r3, 8002848 <rf_set_carrier_frequency+0xd8>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f7fe f860 	bl	800086c <__aeabi_ddiv>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <rf_set_carrier_frequency+0xe8>)
 80027ba:	f7fe f857 	bl	800086c <__aeabi_ddiv>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7fe f9ff 	bl	8000bc8 <__aeabi_d2f>
 80027ca:	4603      	mov	r3, r0
 80027cc:	617b      	str	r3, [r7, #20]
	uint32_t freq = (uint32_t)freqf;
 80027ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d6:	ee17 3a90 	vmov	r3, s15
 80027da:	613b      	str	r3, [r7, #16]
	freq = freq&0x00FFFFFF;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027e2:	613b      	str	r3, [r7, #16]
	rf_write_register(FREQ0, freq);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4619      	mov	r1, r3
 80027ea:	200f      	movs	r0, #15
 80027ec:	f000 f9b9 	bl	8002b62 <rf_write_register>
	rf_write_register(FREQ1, (freq>>8));
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	4619      	mov	r1, r3
 80027f8:	200e      	movs	r0, #14
 80027fa:	f000 f9b2 	bl	8002b62 <rf_write_register>
	rf_write_register(FREQ2, (freq>>16));
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	b2db      	uxtb	r3, r3
 8002804:	4619      	mov	r1, r3
 8002806:	200d      	movs	r0, #13
 8002808:	f000 f9ab 	bl	8002b62 <rf_write_register>
	float t = ((float)freq*(float)CRYSTAL_FREQUENCY_M)/65536.0;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002816:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800285c <rf_set_carrier_frequency+0xec>
 800281a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002860 <rf_set_carrier_frequency+0xf0>
 8002822:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002826:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002864 <rf_set_carrier_frequency+0xf4>
 800282a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800282e:	edc7 7a03 	vstr	s15, [r7, #12]

	return t;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	ee07 3a90 	vmov	s15, r3
}
 8002838:	eeb0 0a67 	vmov.f32	s0, s15
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	f3af 8000 	nop.w
 8002848:	00000000 	.word	0x00000000
 800284c:	40d96400 	.word	0x40d96400
 8002850:	49742400 	.word	0x49742400
 8002854:	40f00000 	.word	0x40f00000
 8002858:	408f4000 	.word	0x408f4000
 800285c:	46cb2000 	.word	0x46cb2000
 8002860:	447a0000 	.word	0x447a0000
 8002864:	47800000 	.word	0x47800000

08002868 <rf_sidle>:

}


/*----------------------------[CC1101 States]----------------------------------------------*/
void rf_sidle(){
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
	/**
	 * @brief Set RF chip to idle state
	 */
    uint8_t marcstate;

    rf_write_strobe(SIDLE);              //sets to idle first. must be in
 800286e:	2036      	movs	r0, #54	; 0x36
 8002870:	f000 f950 	bl	8002b14 <rf_write_strobe>

    marcstate = 0xFF;                     //set unknown/dummy state value
 8002874:	23ff      	movs	r3, #255	; 0xff
 8002876:	71fb      	strb	r3, [r7, #7]

    while(marcstate != IDLE)
 8002878:	e006      	b.n	8002888 <rf_sidle+0x20>
    {
        marcstate = (rf_read_register(MARCSTATE) & 0x1F);
 800287a:	20f5      	movs	r0, #245	; 0xf5
 800287c:	f000 f95b 	bl	8002b36 <rf_read_register>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	71fb      	strb	r3, [r7, #7]
    while(marcstate != IDLE)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d1f5      	bne.n	800287a <rf_sidle+0x12>
    }

}
 800288e:	bf00      	nop
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_keep_transmiting_data>:
    HAL_Delay(100); //Really necessary?
}

/*----------------------------[CC1101 Data Flow]----------------------------------------------*/

uint8_t _keep_transmiting_data(uint8_t* data, int len){
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	/**
	 * @brief This function CONTINUES the transmission of data, but DOES NOT start it. Controls the data flow from the MCU to C1101 once
	 * started.
	 */
	int len_transmited = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
	uint32_t start_tick = HAL_GetTick();
 80028a6:	f000 fd71 	bl	800338c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]
	uint8_t last_chunk = len%DATA_CHUNK_SIZE;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	425a      	negs	r2, r3
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	f002 021f 	and.w	r2, r2, #31
 80028b8:	bf58      	it	pl
 80028ba:	4253      	negpl	r3, r2
 80028bc:	73fb      	strb	r3, [r7, #15]
	GDO0_FLAG = 0;
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <_keep_transmiting_data+0xc0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
	while(len_transmited <len-last_chunk){
 80028c4:	e01f      	b.n	8002906 <_keep_transmiting_data+0x6e>
		if(GDO0_FLAG){
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <_keep_transmiting_data+0xc0>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d010      	beq.n	80028f0 <_keep_transmiting_data+0x58>
		//while(rf_read_register(TXBYTES)>DATA_CHUNK_SIZE); //Suing polling because OBC Int. does not work.
			GDO0_FLAG = 0;
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <_keep_transmiting_data+0xc0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
			rf_write_data(TXFIFO, &data[len_transmited], DATA_CHUNK_SIZE);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	2220      	movs	r2, #32
 80028dc:	4619      	mov	r1, r3
 80028de:	203f      	movs	r0, #63	; 0x3f
 80028e0:	f000 f953 	bl	8002b8a <rf_write_data>
			len_transmited +=DATA_CHUNK_SIZE;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3320      	adds	r3, #32
 80028e8:	617b      	str	r3, [r7, #20]
			start_tick = HAL_GetTick();
 80028ea:	f000 fd4f 	bl	800338c <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

		}
		if(HAL_GetTick()-start_tick> TimeOut) return FALSE;
 80028f0:	f000 fd4c 	bl	800338c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad2      	subs	r2, r2, r3
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <_keep_transmiting_data+0xc4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d901      	bls.n	8002906 <_keep_transmiting_data+0x6e>
 8002902:	2300      	movs	r3, #0
 8002904:	e024      	b.n	8002950 <_keep_transmiting_data+0xb8>
	while(len_transmited <len-last_chunk){
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	429a      	cmp	r2, r3
 8002910:	dbd9      	blt.n	80028c6 <_keep_transmiting_data+0x2e>
	}
	if(last_chunk){
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01a      	beq.n	800294e <_keep_transmiting_data+0xb6>
		while(!GDO0_FLAG);
 8002918:	bf00      	nop
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <_keep_transmiting_data+0xc0>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0fb      	beq.n	800291a <_keep_transmiting_data+0x82>
		//while(rf_read_register(TXBYTES)>DATA_CHUNK_SIZE); //Using polling because OBC Int. does not work.
		GDO0_FLAG = 0;
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <_keep_transmiting_data+0xc0>)
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
		rf_write_data(TXFIFO, &data[len_transmited], last_chunk);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	4619      	mov	r1, r3
 8002932:	203f      	movs	r0, #63	; 0x3f
 8002934:	f000 f929 	bl	8002b8a <rf_write_data>
		if(HAL_GetTick()-start_tick> TimeOut) return FALSE;
 8002938:	f000 fd28 	bl	800338c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad2      	subs	r2, r2, r3
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <_keep_transmiting_data+0xc4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d901      	bls.n	800294e <_keep_transmiting_data+0xb6>
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <_keep_transmiting_data+0xb8>
	}

	return TRUE;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000b0e 	.word	0x20000b0e
 800295c:	20000010 	.word	0x20000010

08002960 <send_frame>:


FRAMESTATUS_TypeDef send_frame(uint8_t* frame, int len){
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
	/**
	 * @brief Sends and unlimited length frame
	 * TODO RSSI and LQI values are appended to the packet, what to do with them?
	 */

	rf_sidle(); //Sets RF to idle state
 800296a:	f7ff ff7d 	bl	8002868 <rf_sidle>
	uint8_t pktcrtl0 = rf_read_register(PKTCTRL0);
 800296e:	2008      	movs	r0, #8
 8002970:	f000 f8e1 	bl	8002b36 <rf_read_register>
 8002974:	4603      	mov	r3, r0
 8002976:	77bb      	strb	r3, [r7, #30]
	uint8_t frame_len = len%256;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	425a      	negs	r2, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	bf58      	it	pl
 8002982:	4253      	negpl	r3, r2
 8002984:	777b      	strb	r3, [r7, #29]
	pktcrtl0 = pktcrtl0 & 0b11111100; //reset len mode
 8002986:	7fbb      	ldrb	r3, [r7, #30]
 8002988:	f023 0303 	bic.w	r3, r3, #3
 800298c:	77bb      	strb	r3, [r7, #30]
	int len_sent = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]

	//configure interruption, high to low when below threshold
	uint8_t iocfg0 = 0x2;
 8002992:	2302      	movs	r3, #2
 8002994:	75fb      	strb	r3, [r7, #23]
	rf_write_register(IOCFG0, iocfg0);
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	4619      	mov	r1, r3
 800299a:	2002      	movs	r0, #2
 800299c:	f000 f8e1 	bl	8002b62 <rf_write_register>
	GDO0_FLAG = 0;
 80029a0:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <send_frame+0x1a8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]

	rf_write_strobe(SFTX); //flush TX
 80029a6:	203b      	movs	r0, #59	; 0x3b
 80029a8:	f000 f8b4 	bl	8002b14 <rf_write_strobe>
	//TODO check if flushed

	//set packet length
	rf_write_register(PKTLEN, frame_len);
 80029ac:	7f7b      	ldrb	r3, [r7, #29]
 80029ae:	4619      	mov	r1, r3
 80029b0:	2006      	movs	r0, #6
 80029b2:	f000 f8d6 	bl	8002b62 <rf_write_register>

	if(len>FIXED_LENGTH_LIMIT){ //Use infinite packet length mode
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2bff      	cmp	r3, #255	; 0xff
 80029ba:	dd48      	ble.n	8002a4e <send_frame+0xee>
		//Set len mode to infinit
		pktcrtl0 = pktcrtl0 | 0x2;
 80029bc:	7fbb      	ldrb	r3, [r7, #30]
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	77bb      	strb	r3, [r7, #30]
		rf_write_register(PKTCTRL0, pktcrtl0);
 80029c4:	7fbb      	ldrb	r3, [r7, #30]
 80029c6:	4619      	mov	r1, r3
 80029c8:	2008      	movs	r0, #8
 80029ca:	f000 f8ca 	bl	8002b62 <rf_write_register>

		//we need to fill the buffer before activating TX mode, or the chip will get into tx underflow state.
		rf_write_data(TXFIFO, frame, FIFO_SIZE); //fill the buffer completely
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	203f      	movs	r0, #63	; 0x3f
 80029d4:	f000 f8d9 	bl	8002b8a <rf_write_data>
		rf_write_strobe(STX); //Start transmision
 80029d8:	2035      	movs	r0, #53	; 0x35
 80029da:	f000 f89b 	bl	8002b14 <rf_write_strobe>
		len_sent +=FIFO_SIZE;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	3340      	adds	r3, #64	; 0x40
 80029e2:	61bb      	str	r3, [r7, #24]

		int times = (len-len_sent)/FIFO_SIZE-1; //-1 to assure at bytes left to send them in receive mode
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	da00      	bge.n	80029f0 <send_frame+0x90>
 80029ee:	333f      	adds	r3, #63	; 0x3f
 80029f0:	119b      	asrs	r3, r3, #6
 80029f2:	3b01      	subs	r3, #1
 80029f4:	613b      	str	r3, [r7, #16]
		//transmit (len -d -255) bytes of data, where d are the number of bytes already sent
		if(!_keep_transmiting_data(&frame[len_sent], times*FIFO_SIZE)) return TIMEOUT;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	441a      	add	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	019b      	lsls	r3, r3, #6
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f7ff ff48 	bl	8002898 <_keep_transmiting_data>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <send_frame+0xb4>
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	e074      	b.n	8002afe <send_frame+0x19e>
		len_sent += times*FIFO_SIZE;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	019b      	lsls	r3, r3, #6
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]

		//transmit remaining bytes in fixed length mode.

		//Set len mode to fixed
		pktcrtl0 = pktcrtl0 & 0b11111100;
 8002a1e:	7fbb      	ldrb	r3, [r7, #30]
 8002a20:	f023 0303 	bic.w	r3, r3, #3
 8002a24:	77bb      	strb	r3, [r7, #30]
		rf_write_register(PKTCTRL0, pktcrtl0);
 8002a26:	7fbb      	ldrb	r3, [r7, #30]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	2008      	movs	r0, #8
 8002a2c:	f000 f899 	bl	8002b62 <rf_write_register>

		if(!_keep_transmiting_data(&frame[len_sent], len-len_sent)) return TIMEOUT;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	18d0      	adds	r0, r2, r3
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7ff ff2b 	bl	8002898 <_keep_transmiting_data>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d12e      	bne.n	8002aa6 <send_frame+0x146>
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4c:	e057      	b.n	8002afe <send_frame+0x19e>

	}else{
		//Set len mode to fixed mode (default)
		rf_write_register(PKTCTRL0, pktcrtl0);
 8002a4e:	7fbb      	ldrb	r3, [r7, #30]
 8002a50:	4619      	mov	r1, r3
 8002a52:	2008      	movs	r0, #8
 8002a54:	f000 f885 	bl	8002b62 <rf_write_register>

		if(len>FIFO_SIZE){ //Use variable packet length mode
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b40      	cmp	r3, #64	; 0x40
 8002a5c:	dd19      	ble.n	8002a92 <send_frame+0x132>
			rf_write_data(TXFIFO, frame, FIFO_SIZE);
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	203f      	movs	r0, #63	; 0x3f
 8002a64:	f000 f891 	bl	8002b8a <rf_write_data>
			rf_write_strobe(STX);
 8002a68:	2035      	movs	r0, #53	; 0x35
 8002a6a:	f000 f853 	bl	8002b14 <rf_write_strobe>
			len_sent+=FIFO_SIZE;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3340      	adds	r3, #64	; 0x40
 8002a72:	61bb      	str	r3, [r7, #24]
			if(!_keep_transmiting_data(&frame[len_sent], len-len_sent)) return TIMEOUT;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	18d0      	adds	r0, r2, r3
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7ff ff09 	bl	8002898 <_keep_transmiting_data>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10c      	bne.n	8002aa6 <send_frame+0x146>
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a90:	e035      	b.n	8002afe <send_frame+0x19e>
		}else{ //If len <= FIFO_SIZE, the FIFO needs to be filled once
			rf_write_data(TXFIFO, frame, len);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	203f      	movs	r0, #63	; 0x3f
 8002a9c:	f000 f875 	bl	8002b8a <rf_write_data>
			rf_write_strobe(STX);
 8002aa0:	2035      	movs	r0, #53	; 0x35
 8002aa2:	f000 f837 	bl	8002b14 <rf_write_strobe>
		}
	}

	uint32_t start_tick = HAL_GetTick();
 8002aa6:	f000 fc71 	bl	800338c <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]
	uint8_t state = rf_read_register(MARCSTATE);
 8002aac:	20f5      	movs	r0, #245	; 0xf5
 8002aae:	f000 f842 	bl	8002b36 <rf_read_register>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	77fb      	strb	r3, [r7, #31]

	while(state!=IDLE){
 8002ab6:	e01b      	b.n	8002af0 <send_frame+0x190>
		//printf("%#20x\n\r", state);
		state = rf_read_register(MARCSTATE);
 8002ab8:	20f5      	movs	r0, #245	; 0xf5
 8002aba:	f000 f83c 	bl	8002b36 <rf_read_register>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(100);
 8002ac2:	2064      	movs	r0, #100	; 0x64
 8002ac4:	f000 fc6e 	bl	80033a4 <HAL_Delay>
		if(HAL_GetTick()- start_tick > TimeOut){
 8002ac8:	f000 fc60 	bl	800338c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad2      	subs	r2, r2, r3
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <send_frame+0x1ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d90a      	bls.n	8002af0 <send_frame+0x190>
			if(state==TXFIFO_UNDERFLOW){
 8002ada:	7ffb      	ldrb	r3, [r7, #31]
 8002adc:	2b16      	cmp	r3, #22
 8002ade:	d103      	bne.n	8002ae8 <send_frame+0x188>
				rf_write_strobe(SFTX);
 8002ae0:	203b      	movs	r0, #59	; 0x3b
 8002ae2:	f000 f817 	bl	8002b14 <rf_write_strobe>
 8002ae6:	e001      	b.n	8002aec <send_frame+0x18c>
			}else{
				rf_sidle();
 8002ae8:	f7ff febe 	bl	8002868 <rf_sidle>
			}
			return FRAME_BAD;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e006      	b.n	8002afe <send_frame+0x19e>
	while(state!=IDLE){
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d1e0      	bne.n	8002ab8 <send_frame+0x158>
		}
	}

	printf("FRAME SENDED\n\r");
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <send_frame+0x1b0>)
 8002af8:	f009 fe78 	bl	800c7ec <iprintf>
    return FRAME_OK;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000b0e 	.word	0x20000b0e
 8002b0c:	20000010 	.word	0x20000010
 8002b10:	0800e808 	.word	0x0800e808

08002b14 <rf_write_strobe>:
}


/* SPI Comm ----------------------------------------------------------------*/

void rf_write_strobe(uint8_t strobe){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Writes command to the CC1101 to change its state-machine state.
	 */
	strobe = WRITE(strobe);
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	71fb      	strb	r3, [r7, #7]
	__spi_write(&strobe, NULL, NULL);
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 f84d 	bl	8002bc8 <__spi_write>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <rf_read_register>:

uint8_t rf_read_register(uint8_t reg){
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Reads the content of a single 1-byte register.
	 * @Returns The register value.
	 */
	uint8_t data;
	reg= READ(reg);
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	71fb      	strb	r3, [r7, #7]
	__spi_read(&reg, &data, 1);
 8002b4a:	f107 010f 	add.w	r1, r7, #15
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	2201      	movs	r2, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f874 	bl	8002c40 <__spi_read>
	return data;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <rf_write_register>:

void rf_write_register(uint8_t reg, uint8_t data){
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	460a      	mov	r2, r1
 8002b6c:	71fb      	strb	r3, [r7, #7]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	71bb      	strb	r3, [r7, #6]
	/**
	 * @brief Overwrites a register.
	 */
	reg = WRITE(reg);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	71fb      	strb	r3, [r7, #7]
	__spi_write(&reg, &data, 1);
 8002b76:	1db9      	adds	r1, r7, #6
 8002b78:	1dfb      	adds	r3, r7, #7
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f823 	bl	8002bc8 <__spi_write>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <rf_write_data>:
		addr = READ(addr);
	}
	__spi_read(&addr, data, size);
}

void rf_write_data(uint8_t addr, uint8_t* data, uint8_t size){
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	6039      	str	r1, [r7, #0]
 8002b94:	71fb      	strb	r3, [r7, #7]
 8002b96:	4613      	mov	r3, r2
 8002b98:	71bb      	strb	r3, [r7, #6]
	 * @brief Writes multiple data.
	 * @param addr Base address.
	 * @param data The buffer where the data to be written is located.
	 * @param size Number of bytes to be written.
	 */
	if(size>1){
 8002b9a:	79bb      	ldrb	r3, [r7, #6]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d905      	bls.n	8002bac <rf_write_data+0x22>
		addr = WRITE_BURST(addr);
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	71fb      	strb	r3, [r7, #7]
 8002baa:	e001      	b.n	8002bb0 <rf_write_data+0x26>
	}else{
		addr = WRITE(addr);
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	71fb      	strb	r3, [r7, #7]
	}
	__spi_write(&addr, data, size);
 8002bb0:	79bb      	ldrb	r3, [r7, #6]
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	1dfb      	adds	r3, r7, #7
 8002bb6:	6839      	ldr	r1, [r7, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f805 	bl	8002bc8 <__spi_write>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <__spi_write>:

/* SPI Handling -------------------------------------------------------------*/

HAL_StatusTypeDef __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <__spi_write+0x6c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <__spi_write+0x70>)
 8002bdc:	8811      	ldrh	r1, [r2, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f85d 	bl	8003ca0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <__spi_write+0x74>)
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bee:	2201      	movs	r2, #1
 8002bf0:	68f9      	ldr	r1, [r7, #12]
 8002bf2:	f003 fb24 	bl	800623e <HAL_SPI_Transmit>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	75fb      	strb	r3, [r7, #23]
	if(status==HAL_OK && pData!=NULL)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10c      	bne.n	8002c1a <__spi_write+0x52>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <__spi_write+0x52>
		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <__spi_write+0x74>)
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	f003 fb14 	bl	800623e <HAL_SPI_Transmit>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <__spi_write+0x6c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <__spi_write+0x70>)
 8002c20:	8811      	ldrh	r1, [r2, #0]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 f83b 	bl	8003ca0 <HAL_GPIO_WritePin>
	return status;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]

}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000b08 	.word	0x20000b08
 8002c38:	20000b04 	.word	0x20000b04
 8002c3c:	20000b00 	.word	0x20000b00

08002c40 <__spi_read>:

HAL_StatusTypeDef __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef status;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //set Chip Select to Low
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <__spi_read+0x60>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <__spi_read+0x64>)
 8002c54:	8811      	ldrh	r1, [r2, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 f821 	bl	8003ca0 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(hal_spi, addr, 1, 0xFFFF);
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <__spi_read+0x68>)
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c66:	2201      	movs	r2, #1
 8002c68:	68f9      	ldr	r1, [r7, #12]
 8002c6a:	f003 fae8 	bl	800623e <HAL_SPI_Transmit>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(hal_spi, pData, size, 0xFFFF);
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <__spi_read+0x68>)
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	f003 fc53 	bl	8006528 <HAL_SPI_Receive>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <__spi_read+0x60>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a06      	ldr	r2, [pc, #24]	; (8002ca4 <__spi_read+0x64>)
 8002c8c:	8811      	ldrh	r1, [r2, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 f805 	bl	8003ca0 <HAL_GPIO_WritePin>

	return status;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]

}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000b08 	.word	0x20000b08
 8002ca4:	20000b04 	.word	0x20000b04
 8002ca8:	20000b00 	.word	0x20000b00

08002cac <HAL_GPIO_EXTI_Callback>:

/* Interrupts ---------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
	/*
	if (GPIO_Pin == GPIO_PIN_15)
		TX_RX_BEGAN = 1;
	*/
	if(GPIO_Pin == GDO0_Pin){
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <HAL_GPIO_EXTI_Callback+0x28>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d102      	bne.n	8002cc6 <HAL_GPIO_EXTI_Callback+0x1a>
		GDO0_FLAG = 1;
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
	}
	/*
	if(GPIO_Pin == CS_Pin){ //User B1 Button (the blue one on F446ZE)
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
	}*/
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000b0c 	.word	0x20000b0c
 8002cd8:	20000b0e 	.word	0x20000b0e

08002cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_MspInit+0x4c>)
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <HAL_MspInit+0x4c>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6613      	str	r3, [r2, #96]	; 0x60
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_MspInit+0x4c>)
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_MspInit+0x4c>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_MspInit+0x4c>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_MspInit+0x4c>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	210f      	movs	r1, #15
 8002d16:	f06f 0001 	mvn.w	r0, #1
 8002d1a:	f000 fc1f 	bl	800355c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000

08002d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b0ac      	sub	sp, #176	; 0xb0
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d44:	f107 0310 	add.w	r3, r7, #16
 8002d48:	228c      	movs	r2, #140	; 0x8c
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f009 fda2 	bl	800c896 <memset>
  if(hi2c->Instance==I2C1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a25      	ldr	r2, [pc, #148]	; (8002dec <HAL_I2C_MspInit+0xc0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d143      	bne.n	8002de4 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d5c:	2340      	movs	r3, #64	; 0x40
 8002d5e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d60:	2300      	movs	r3, #0
 8002d62:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fcfb 	bl	8005764 <HAL_RCCEx_PeriphCLKConfig>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002d74:	f7ff fb10 	bl	8002398 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d98:	2312      	movs	r3, #18
 8002d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002daa:	2304      	movs	r3, #4
 8002dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002db4:	4619      	mov	r1, r3
 8002db6:	480f      	ldr	r0, [pc, #60]	; (8002df4 <HAL_I2C_MspInit+0xc8>)
 8002db8:	f000 fde0 	bl	800397c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_I2C_MspInit+0xc4>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2105      	movs	r1, #5
 8002dd8:	201f      	movs	r0, #31
 8002dda:	f000 fbbf 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002dde:	201f      	movs	r0, #31
 8002de0:	f000 fbd8 	bl	8003594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002de4:	bf00      	nop
 8002de6:	37b0      	adds	r7, #176	; 0xb0
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40005400 	.word	0x40005400
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b0ac      	sub	sp, #176	; 0xb0
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	228c      	movs	r2, #140	; 0x8c
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f009 fd3c 	bl	800c896 <memset>
  if(huart->Instance==LPUART1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a3b      	ldr	r2, [pc, #236]	; (8002f10 <HAL_UART_MspInit+0x118>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d16f      	bne.n	8002f08 <HAL_UART_MspInit+0x110>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f002 fc95 	bl	8005764 <HAL_RCCEx_PeriphCLKConfig>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e40:	f7ff faaa 	bl	8002398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_UART_MspInit+0x11c>)
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	4a32      	ldr	r2, [pc, #200]	; (8002f14 <HAL_UART_MspInit+0x11c>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <HAL_UART_MspInit+0x11c>)
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_UART_MspInit+0x11c>)
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <HAL_UART_MspInit+0x11c>)
 8002e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e68:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_UART_MspInit+0x11c>)
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002e74:	f001 fdf6 	bl	8004a64 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002e92:	2308      	movs	r3, #8
 8002e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481e      	ldr	r0, [pc, #120]	; (8002f18 <HAL_UART_MspInit+0x120>)
 8002ea0:	f000 fd6c 	bl	800397c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_UART_MspInit+0x128>)
 8002ea8:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002eac:	2204      	movs	r2, #4
 8002eae:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ebc:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002ed6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002eda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 8002edc:	480f      	ldr	r0, [pc, #60]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002ede:	f000 fb67 	bl	80035b0 <HAL_DMA_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8002ee8:	f7ff fa56 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002ef0:	675a      	str	r2, [r3, #116]	; 0x74
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <HAL_UART_MspInit+0x124>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2105      	movs	r1, #5
 8002efc:	2046      	movs	r0, #70	; 0x46
 8002efe:	f000 fb2d 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002f02:	2046      	movs	r0, #70	; 0x46
 8002f04:	f000 fb46 	bl	8003594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002f08:	bf00      	nop
 8002f0a:	37b0      	adds	r7, #176	; 0xb0
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40008000 	.word	0x40008000
 8002f14:	40021000 	.word	0x40021000
 8002f18:	48001800 	.word	0x48001800
 8002f1c:	200002e4 	.word	0x200002e4
 8002f20:	40020480 	.word	0x40020480

08002f24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <HAL_SPI_MspInit+0x7c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d128      	bne.n	8002f98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_SPI_MspInit+0x80>)
 8002f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4a:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <HAL_SPI_MspInit+0x80>)
 8002f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f50:	6613      	str	r3, [r2, #96]	; 0x60
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_SPI_MspInit+0x80>)
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_SPI_MspInit+0x80>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <HAL_SPI_MspInit+0x80>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_SPI_MspInit+0x80>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f76:	23f0      	movs	r3, #240	; 0xf0
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f82:	2303      	movs	r3, #3
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f86:	2305      	movs	r3, #5
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f94:	f000 fcf2 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40013000 	.word	0x40013000
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002fb6:	4b34      	ldr	r3, [pc, #208]	; (8003088 <HAL_InitTick+0xe0>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	4a33      	ldr	r2, [pc, #204]	; (8003088 <HAL_InitTick+0xe0>)
 8002fbc:	f043 0320 	orr.w	r3, r3, #32
 8002fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <HAL_InitTick+0xe0>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f003 0320 	and.w	r3, r3, #32
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fce:	f107 0210 	add.w	r2, r7, #16
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fb31 	bl	8005640 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f002 fafe 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8002fec:	6378      	str	r0, [r7, #52]	; 0x34
 8002fee:	e004      	b.n	8002ffa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ff0:	f002 fafa 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_InitTick+0xe4>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	3b01      	subs	r3, #1
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_InitTick+0xe8>)
 800300a:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_InitTick+0xec>)
 800300c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_InitTick+0xe8>)
 8003010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003014:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003016:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <HAL_InitTick+0xe8>)
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_InitTick+0xe8>)
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_InitTick+0xe8>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_InitTick+0xe8>)
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800302e:	4818      	ldr	r0, [pc, #96]	; (8003090 <HAL_InitTick+0xe8>)
 8003030:	f003 ff90 	bl	8006f54 <HAL_TIM_Base_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800303a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11b      	bne.n	800307a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003042:	4813      	ldr	r0, [pc, #76]	; (8003090 <HAL_InitTick+0xe8>)
 8003044:	f003 ffe8 	bl	8007018 <HAL_TIM_Base_Start_IT>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800304e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003052:	2b00      	cmp	r3, #0
 8003054:	d111      	bne.n	800307a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003056:	2037      	movs	r0, #55	; 0x37
 8003058:	f000 fa9c 	bl	8003594 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	d808      	bhi.n	8003074 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8003062:	2200      	movs	r2, #0
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	2037      	movs	r0, #55	; 0x37
 8003068:	f000 fa78 	bl	800355c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800306c:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_InitTick+0xf0>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e002      	b.n	800307a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800307a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800307e:	4618      	mov	r0, r3
 8003080:	3738      	adds	r7, #56	; 0x38
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	431bde83 	.word	0x431bde83
 8003090:	20000b10 	.word	0x20000b10
 8003094:	40001400 	.word	0x40001400
 8003098:	20000018 	.word	0x20000018

0800309c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030a0:	e7fe      	b.n	80030a0 <NMI_Handler+0x4>

080030a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <HardFault_Handler+0x4>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <MemManage_Handler+0x4>

080030ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <BusFault_Handler+0x4>

080030b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <UsageFault_Handler+0x4>

080030ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <I2C1_EV_IRQHandler+0x10>)
 80030ce:	f001 f8fb 	bl	80042c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000208 	.word	0x20000208

080030dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80030e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030e4:	f000 fe0e 	bl	8003d04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GDO0_Pin);
 80030e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030ec:	f000 fe0a 	bl	8003d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <TIM7_IRQHandler+0x10>)
 80030fa:	f003 fffd 	bl	80070f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000b10 	.word	0x20000b10

08003108 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <DMA2_Channel7_IRQHandler+0x10>)
 800310e:	f000 fb86 	bl	800381e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200002e4 	.word	0x200002e4

0800311c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <LPUART1_IRQHandler+0x10>)
 8003122:	f004 faa3 	bl	800766c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	2000025c 	.word	0x2000025c

08003130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return 1;
 8003134:	2301      	movs	r3, #1
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_kill>:

int _kill(int pid, int sig)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800314a:	f009 fbf7 	bl	800c93c <__errno>
 800314e:	4603      	mov	r3, r0
 8003150:	2216      	movs	r2, #22
 8003152:	601a      	str	r2, [r3, #0]
  return -1;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_exit>:

void _exit (int status)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ffe7 	bl	8003140 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003172:	e7fe      	b.n	8003172 <_exit+0x12>

08003174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e00a      	b.n	800319c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003186:	f3af 8000 	nop.w
 800318a:	4601      	mov	r1, r0
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	60ba      	str	r2, [r7, #8]
 8003192:	b2ca      	uxtb	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3301      	adds	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	dbf0      	blt.n	8003186 <_read+0x12>
  }

  return len;
 80031a4:	687b      	ldr	r3, [r7, #4]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e009      	b.n	80031d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	60ba      	str	r2, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dbf1      	blt.n	80031c0 <_write+0x12>
  }
  return len;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_close>:

int _close(int file)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800320e:	605a      	str	r2, [r3, #4]
  return 0;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <_isatty>:

int _isatty(int file)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003258:	4a14      	ldr	r2, [pc, #80]	; (80032ac <_sbrk+0x5c>)
 800325a:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <_sbrk+0x60>)
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <_sbrk+0x64>)
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <_sbrk+0x68>)
 8003270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <_sbrk+0x64>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	429a      	cmp	r2, r3
 800327e:	d207      	bcs.n	8003290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003280:	f009 fb5c 	bl	800c93c <__errno>
 8003284:	4603      	mov	r3, r0
 8003286:	220c      	movs	r2, #12
 8003288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	e009      	b.n	80032a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <_sbrk+0x64>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <_sbrk+0x64>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <_sbrk+0x64>)
 80032a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20050000 	.word	0x20050000
 80032b0:	00000400 	.word	0x00000400
 80032b4:	20000b5c 	.word	0x20000b5c
 80032b8:	200025b8 	.word	0x200025b8

080032bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <SystemInit+0x20>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	4a05      	ldr	r2, [pc, #20]	; (80032dc <SystemInit+0x20>)
 80032c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003318 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032e4:	f7ff ffea 	bl	80032bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032e8:	480c      	ldr	r0, [pc, #48]	; (800331c <LoopForever+0x6>)
  ldr r1, =_edata
 80032ea:	490d      	ldr	r1, [pc, #52]	; (8003320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <LoopForever+0xe>)
  movs r3, #0
 80032ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032f0:	e002      	b.n	80032f8 <LoopCopyDataInit>

080032f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032f6:	3304      	adds	r3, #4

080032f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032fc:	d3f9      	bcc.n	80032f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003300:	4c0a      	ldr	r4, [pc, #40]	; (800332c <LoopForever+0x16>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003304:	e001      	b.n	800330a <LoopFillZerobss>

08003306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003308:	3204      	adds	r2, #4

0800330a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800330a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800330c:	d3fb      	bcc.n	8003306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800330e:	f009 fb1b 	bl	800c948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003312:	f7fe fae5 	bl	80018e0 <main>

08003316 <LoopForever>:

LoopForever:
    b LoopForever
 8003316:	e7fe      	b.n	8003316 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003318:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800331c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003320:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003324:	0800eddc 	.word	0x0800eddc
  ldr r2, =_sbss
 8003328:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800332c:	200025b8 	.word	0x200025b8

08003330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003330:	e7fe      	b.n	8003330 <ADC1_2_IRQHandler>

08003332 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800333c:	2003      	movs	r0, #3
 800333e:	f000 f902 	bl	8003546 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003342:	200f      	movs	r0, #15
 8003344:	f7ff fe30 	bl	8002fa8 <HAL_InitTick>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	71fb      	strb	r3, [r7, #7]
 8003352:	e001      	b.n	8003358 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003354:	f7ff fcc2 	bl	8002cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003358:	79fb      	ldrb	r3, [r7, #7]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_IncTick+0x20>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_IncTick+0x24>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4413      	add	r3, r2
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <HAL_IncTick+0x24>)
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000001c 	.word	0x2000001c
 8003388:	20000b60 	.word	0x20000b60

0800338c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return uwTick;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_GetTick+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000b60 	.word	0x20000b60

080033a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff ffee 	bl	800338c <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d005      	beq.n	80033ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_Delay+0x44>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ca:	bf00      	nop
 80033cc:	f7ff ffde 	bl	800338c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d8f7      	bhi.n	80033cc <HAL_Delay+0x28>
  {
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000001c 	.word	0x2000001c

080033ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003408:	4013      	ands	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800341c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	60d3      	str	r3, [r2, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <__NVIC_GetPriorityGrouping+0x18>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 0307 	and.w	r3, r3, #7
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db0b      	blt.n	800347a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4907      	ldr	r1, [pc, #28]	; (8003488 <__NVIC_EnableIRQ+0x38>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2001      	movs	r0, #1
 8003472:	fa00 f202 	lsl.w	r2, r0, r2
 8003476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e100 	.word	0xe000e100

0800348c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	db0a      	blt.n	80034b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	490c      	ldr	r1, [pc, #48]	; (80034d8 <__NVIC_SetPriority+0x4c>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b4:	e00a      	b.n	80034cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4908      	ldr	r1, [pc, #32]	; (80034dc <__NVIC_SetPriority+0x50>)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3b04      	subs	r3, #4
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	761a      	strb	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	; 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf28      	it	cs
 80034fe:	2304      	movcs	r3, #4
 8003500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3304      	adds	r3, #4
 8003506:	2b06      	cmp	r3, #6
 8003508:	d902      	bls.n	8003510 <NVIC_EncodePriority+0x30>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3b03      	subs	r3, #3
 800350e:	e000      	b.n	8003512 <NVIC_EncodePriority+0x32>
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003528:	f04f 31ff 	mov.w	r1, #4294967295
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43d9      	mvns	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	4313      	orrs	r3, r2
         );
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	; 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff4c 	bl	80033ec <__NVIC_SetPriorityGrouping>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800356e:	f7ff ff61 	bl	8003434 <__NVIC_GetPriorityGrouping>
 8003572:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	6978      	ldr	r0, [r7, #20]
 800357a:	f7ff ffb1 	bl	80034e0 <NVIC_EncodePriority>
 800357e:	4602      	mov	r2, r0
 8003580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff80 	bl	800348c <__NVIC_SetPriority>
}
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff54 	bl	8003450 <__NVIC_EnableIRQ>
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e098      	b.n	80036f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <HAL_DMA_Init+0x150>)
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d80f      	bhi.n	80035ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <HAL_DMA_Init+0x154>)
 80035d6:	4413      	add	r3, r2
 80035d8:	4a4b      	ldr	r2, [pc, #300]	; (8003708 <HAL_DMA_Init+0x158>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	009a      	lsls	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_DMA_Init+0x15c>)
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
 80035ec:	e00e      	b.n	800360c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b46      	ldr	r3, [pc, #280]	; (8003710 <HAL_DMA_Init+0x160>)
 80035f6:	4413      	add	r3, r2
 80035f8:	4a43      	ldr	r2, [pc, #268]	; (8003708 <HAL_DMA_Init+0x158>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	009a      	lsls	r2, r3, #2
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a42      	ldr	r2, [pc, #264]	; (8003714 <HAL_DMA_Init+0x164>)
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003666:	d039      	beq.n	80036dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <HAL_DMA_Init+0x15c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d11a      	bne.n	80036a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_DMA_Init+0x168>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f003 031c 	and.w	r3, r3, #28
 800367e:	210f      	movs	r1, #15
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	4924      	ldr	r1, [pc, #144]	; (8003718 <HAL_DMA_Init+0x168>)
 8003688:	4013      	ands	r3, r2
 800368a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800368c:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_DMA_Init+0x168>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f003 031c 	and.w	r3, r3, #28
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	491d      	ldr	r1, [pc, #116]	; (8003718 <HAL_DMA_Init+0x168>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
 80036a6:	e019      	b.n	80036dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036a8:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_DMA_Init+0x16c>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f003 031c 	and.w	r3, r3, #28
 80036b4:	210f      	movs	r1, #15
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	4917      	ldr	r1, [pc, #92]	; (800371c <HAL_DMA_Init+0x16c>)
 80036be:	4013      	ands	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_DMA_Init+0x16c>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f003 031c 	and.w	r3, r3, #28
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	4911      	ldr	r1, [pc, #68]	; (800371c <HAL_DMA_Init+0x16c>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40020407 	.word	0x40020407
 8003704:	bffdfff8 	.word	0xbffdfff8
 8003708:	cccccccd 	.word	0xcccccccd
 800370c:	40020000 	.word	0x40020000
 8003710:	bffdfbf8 	.word	0xbffdfbf8
 8003714:	40020400 	.word	0x40020400
 8003718:	400200a8 	.word	0x400200a8
 800371c:	400204a8 	.word	0x400204a8

08003720 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d008      	beq.n	800374a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2204      	movs	r2, #4
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 020e 	bic.w	r2, r2, #14
 8003758:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f003 021c 	and.w	r2, r3, #28
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2101      	movs	r1, #1
 8003778:	fa01 f202 	lsl.w	r2, r1, r2
 800377c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d005      	beq.n	80037c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2204      	movs	r2, #4
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e029      	b.n	8003814 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 020e 	bic.w	r2, r2, #14
 80037ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f003 021c 	and.w	r2, r3, #28
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
    }
  }
  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f003 031c 	and.w	r3, r3, #28
 800383e:	2204      	movs	r2, #4
 8003840:	409a      	lsls	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d026      	beq.n	8003898 <HAL_DMA_IRQHandler+0x7a>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d021      	beq.n	8003898 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0204 	bic.w	r2, r2, #4
 8003870:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f003 021c 	and.w	r2, r3, #28
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2104      	movs	r1, #4
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	2b00      	cmp	r3, #0
 800388c:	d071      	beq.n	8003972 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003896:	e06c      	b.n	8003972 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	f003 031c 	and.w	r3, r3, #28
 80038a0:	2202      	movs	r2, #2
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d02e      	beq.n	800390a <HAL_DMA_IRQHandler+0xec>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d029      	beq.n	800390a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10b      	bne.n	80038dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 020a 	bic.w	r2, r2, #10
 80038d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f003 021c 	and.w	r2, r3, #28
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	2102      	movs	r1, #2
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d038      	beq.n	8003972 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003908:	e033      	b.n	8003972 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	f003 031c 	and.w	r3, r3, #28
 8003912:	2208      	movs	r2, #8
 8003914:	409a      	lsls	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x156>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d025      	beq.n	8003974 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 020e 	bic.w	r2, r2, #14
 8003936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f003 021c 	and.w	r2, r3, #28
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	2101      	movs	r1, #1
 8003946:	fa01 f202 	lsl.w	r2, r1, r2
 800394a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003972:	bf00      	nop
 8003974:	bf00      	nop
}
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398a:	e166      	b.n	8003c5a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8158 	beq.w	8003c54 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d005      	beq.n	80039bc <HAL_GPIO_Init+0x40>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d130      	bne.n	8003a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f2:	2201      	movs	r2, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0201 	and.w	r2, r3, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d017      	beq.n	8003a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d123      	bne.n	8003aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	08da      	lsrs	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3208      	adds	r2, #8
 8003a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	6939      	ldr	r1, [r7, #16]
 8003aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0203 	and.w	r2, r3, #3
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80b2 	beq.w	8003c54 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af0:	4b61      	ldr	r3, [pc, #388]	; (8003c78 <HAL_GPIO_Init+0x2fc>)
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	4a60      	ldr	r2, [pc, #384]	; (8003c78 <HAL_GPIO_Init+0x2fc>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6613      	str	r3, [r2, #96]	; 0x60
 8003afc:	4b5e      	ldr	r3, [pc, #376]	; (8003c78 <HAL_GPIO_Init+0x2fc>)
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b08:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b32:	d02b      	beq.n	8003b8c <HAL_GPIO_Init+0x210>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d025      	beq.n	8003b88 <HAL_GPIO_Init+0x20c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a51      	ldr	r2, [pc, #324]	; (8003c84 <HAL_GPIO_Init+0x308>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d01f      	beq.n	8003b84 <HAL_GPIO_Init+0x208>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a50      	ldr	r2, [pc, #320]	; (8003c88 <HAL_GPIO_Init+0x30c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d019      	beq.n	8003b80 <HAL_GPIO_Init+0x204>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a4f      	ldr	r2, [pc, #316]	; (8003c8c <HAL_GPIO_Init+0x310>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d013      	beq.n	8003b7c <HAL_GPIO_Init+0x200>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a4e      	ldr	r2, [pc, #312]	; (8003c90 <HAL_GPIO_Init+0x314>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00d      	beq.n	8003b78 <HAL_GPIO_Init+0x1fc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a4d      	ldr	r2, [pc, #308]	; (8003c94 <HAL_GPIO_Init+0x318>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <HAL_GPIO_Init+0x1f8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a4c      	ldr	r2, [pc, #304]	; (8003c98 <HAL_GPIO_Init+0x31c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_GPIO_Init+0x1f4>
 8003b6c:	2307      	movs	r3, #7
 8003b6e:	e00e      	b.n	8003b8e <HAL_GPIO_Init+0x212>
 8003b70:	2308      	movs	r3, #8
 8003b72:	e00c      	b.n	8003b8e <HAL_GPIO_Init+0x212>
 8003b74:	2306      	movs	r3, #6
 8003b76:	e00a      	b.n	8003b8e <HAL_GPIO_Init+0x212>
 8003b78:	2305      	movs	r3, #5
 8003b7a:	e008      	b.n	8003b8e <HAL_GPIO_Init+0x212>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	e006      	b.n	8003b8e <HAL_GPIO_Init+0x212>
 8003b80:	2303      	movs	r3, #3
 8003b82:	e004      	b.n	8003b8e <HAL_GPIO_Init+0x212>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e002      	b.n	8003b8e <HAL_GPIO_Init+0x212>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_GPIO_Init+0x212>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	f002 0203 	and.w	r2, r2, #3
 8003b94:	0092      	lsls	r2, r2, #2
 8003b96:	4093      	lsls	r3, r2
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b9e:	4937      	ldr	r1, [pc, #220]	; (8003c7c <HAL_GPIO_Init+0x300>)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bac:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <HAL_GPIO_Init+0x320>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bd0:	4a32      	ldr	r2, [pc, #200]	; (8003c9c <HAL_GPIO_Init+0x320>)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_GPIO_Init+0x320>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bfa:	4a28      	ldr	r2, [pc, #160]	; (8003c9c <HAL_GPIO_Init+0x320>)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_GPIO_Init+0x320>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c24:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_GPIO_Init+0x320>)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c2a:	4b1c      	ldr	r3, [pc, #112]	; (8003c9c <HAL_GPIO_Init+0x320>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c4e:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <HAL_GPIO_Init+0x320>)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3301      	adds	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f47f ae91 	bne.w	800398c <HAL_GPIO_Init+0x10>
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	48000400 	.word	0x48000400
 8003c84:	48000800 	.word	0x48000800
 8003c88:	48000c00 	.word	0x48000c00
 8003c8c:	48001000 	.word	0x48001000
 8003c90:	48001400 	.word	0x48001400
 8003c94:	48001800 	.word	0x48001800
 8003c98:	48001c00 	.word	0x48001c00
 8003c9c:	40010400 	.word	0x40010400

08003ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
 8003cac:	4613      	mov	r3, r2
 8003cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb0:	787b      	ldrb	r3, [r7, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	041a      	lsls	r2, r3, #16
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	43d9      	mvns	r1, r3
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	400b      	ands	r3, r1
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	619a      	str	r2, [r3, #24]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d1a:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe ffc2 	bl	8002cac <HAL_GPIO_EXTI_Callback>
  }
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40010400 	.word	0x40010400

08003d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e08d      	b.n	8003e62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fe ffe6 	bl	8002d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	e006      	b.n	8003dbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003dba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d108      	bne.n	8003dd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	e007      	b.n	8003de6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69d9      	ldr	r1, [r3, #28]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	4608      	mov	r0, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	817b      	strh	r3, [r7, #10]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	813b      	strh	r3, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	f040 80f9 	bne.w	8004086 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_I2C_Mem_Write+0x34>
 8003e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0ed      	b.n	8004088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_I2C_Mem_Write+0x4e>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e0e6      	b.n	8004088 <HAL_I2C_Mem_Write+0x21c>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ec2:	f7ff fa63 	bl	800338c <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	2319      	movs	r3, #25
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fadd 	bl	8004494 <I2C_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0d1      	b.n	8004088 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2221      	movs	r2, #33	; 0x21
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f0c:	88f8      	ldrh	r0, [r7, #6]
 8003f0e:	893a      	ldrh	r2, [r7, #8]
 8003f10:	8979      	ldrh	r1, [r7, #10]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f9ed 	bl	80042fc <I2C_RequestMemoryWrite>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0a9      	b.n	8004088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2bff      	cmp	r3, #255	; 0xff
 8003f3c:	d90e      	bls.n	8003f5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	22ff      	movs	r2, #255	; 0xff
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	8979      	ldrh	r1, [r7, #10]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fc57 	bl	8004808 <I2C_TransferConfig>
 8003f5a:	e00f      	b.n	8003f7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	8979      	ldrh	r1, [r7, #10]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fc46 	bl	8004808 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fad6 	bl	8004532 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e07b      	b.n	8004088 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d034      	beq.n	8004034 <HAL_I2C_Mem_Write+0x1c8>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d130      	bne.n	8004034 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fa59 	bl	8004494 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e04d      	b.n	8004088 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2bff      	cmp	r3, #255	; 0xff
 8003ff4:	d90e      	bls.n	8004014 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	22ff      	movs	r2, #255	; 0xff
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	b2da      	uxtb	r2, r3
 8004002:	8979      	ldrh	r1, [r7, #10]
 8004004:	2300      	movs	r3, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fbfb 	bl	8004808 <I2C_TransferConfig>
 8004012:	e00f      	b.n	8004034 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	b2da      	uxtb	r2, r3
 8004024:	8979      	ldrh	r1, [r7, #10]
 8004026:	2300      	movs	r3, #0
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fbea 	bl	8004808 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d19e      	bne.n	8003f7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fabc 	bl	80045c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e01a      	b.n	8004088 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2220      	movs	r2, #32
 8004058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <HAL_I2C_Mem_Write+0x224>)
 8004066:	400b      	ands	r3, r1
 8004068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	fe00e800 	.word	0xfe00e800

08004094 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	4608      	mov	r0, r1
 800409e:	4611      	mov	r1, r2
 80040a0:	461a      	mov	r2, r3
 80040a2:	4603      	mov	r3, r0
 80040a4:	817b      	strh	r3, [r7, #10]
 80040a6:	460b      	mov	r3, r1
 80040a8:	813b      	strh	r3, [r7, #8]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	f040 80fd 	bne.w	80042b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x34>
 80040c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0f1      	b.n	80042b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_I2C_Mem_Read+0x4e>
 80040de:	2302      	movs	r3, #2
 80040e0:	e0ea      	b.n	80042b8 <HAL_I2C_Mem_Read+0x224>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ea:	f7ff f94f 	bl	800338c <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2319      	movs	r3, #25
 80040f6:	2201      	movs	r2, #1
 80040f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f9c9 	bl	8004494 <I2C_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0d5      	b.n	80042b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2222      	movs	r2, #34	; 0x22
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004134:	88f8      	ldrh	r0, [r7, #6]
 8004136:	893a      	ldrh	r2, [r7, #8]
 8004138:	8979      	ldrh	r1, [r7, #10]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	4603      	mov	r3, r0
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f92d 	bl	80043a4 <I2C_RequestMemoryRead>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0ad      	b.n	80042b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29b      	uxth	r3, r3
 8004162:	2bff      	cmp	r3, #255	; 0xff
 8004164:	d90e      	bls.n	8004184 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004170:	b2da      	uxtb	r2, r3
 8004172:	8979      	ldrh	r1, [r7, #10]
 8004174:	4b52      	ldr	r3, [pc, #328]	; (80042c0 <HAL_I2C_Mem_Read+0x22c>)
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fb43 	bl	8004808 <I2C_TransferConfig>
 8004182:	e00f      	b.n	80041a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	b2da      	uxtb	r2, r3
 8004194:	8979      	ldrh	r1, [r7, #10]
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_I2C_Mem_Read+0x22c>)
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fb32 	bl	8004808 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	2200      	movs	r2, #0
 80041ac:	2104      	movs	r1, #4
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f970 	bl	8004494 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e07c      	b.n	80042b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d034      	beq.n	8004264 <HAL_I2C_Mem_Read+0x1d0>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d130      	bne.n	8004264 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	; 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f941 	bl	8004494 <I2C_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e04d      	b.n	80042b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2bff      	cmp	r3, #255	; 0xff
 8004224:	d90e      	bls.n	8004244 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	2300      	movs	r3, #0
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fae3 	bl	8004808 <I2C_TransferConfig>
 8004242:	e00f      	b.n	8004264 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	b2da      	uxtb	r2, r3
 8004254:	8979      	ldrh	r1, [r7, #10]
 8004256:	2300      	movs	r3, #0
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fad2 	bl	8004808 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d19a      	bne.n	80041a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f9a4 	bl	80045c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e01a      	b.n	80042b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2220      	movs	r2, #32
 8004288:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_I2C_Mem_Read+0x230>)
 8004296:	400b      	ands	r3, r1
 8004298:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	80002400 	.word	0x80002400
 80042c4:	fe00e800 	.word	0xfe00e800

080042c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
  }
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	4608      	mov	r0, r1
 8004306:	4611      	mov	r1, r2
 8004308:	461a      	mov	r2, r3
 800430a:	4603      	mov	r3, r0
 800430c:	817b      	strh	r3, [r7, #10]
 800430e:	460b      	mov	r3, r1
 8004310:	813b      	strh	r3, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	8979      	ldrh	r1, [r7, #10]
 800431c:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <I2C_RequestMemoryWrite+0xa4>)
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fa6f 	bl	8004808 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f8ff 	bl	8004532 <I2C_WaitOnTXISFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e02c      	b.n	8004398 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004344:	893b      	ldrh	r3, [r7, #8]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	629a      	str	r2, [r3, #40]	; 0x28
 800434e:	e015      	b.n	800437c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004350:	893b      	ldrh	r3, [r7, #8]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	b29b      	uxth	r3, r3
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	69b9      	ldr	r1, [r7, #24]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8e5 	bl	8004532 <I2C_WaitOnTXISFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e012      	b.n	8004398 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004372:	893b      	ldrh	r3, [r7, #8]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2200      	movs	r2, #0
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f884 	bl	8004494 <I2C_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	80002000 	.word	0x80002000

080043a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	461a      	mov	r2, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	817b      	strh	r3, [r7, #10]
 80043b6:	460b      	mov	r3, r1
 80043b8:	813b      	strh	r3, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	8979      	ldrh	r1, [r7, #10]
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <I2C_RequestMemoryRead+0xa4>)
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fa1c 	bl	8004808 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	69b9      	ldr	r1, [r7, #24]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f8ac 	bl	8004532 <I2C_WaitOnTXISFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e02c      	b.n	800443e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043ea:	893b      	ldrh	r3, [r7, #8]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28
 80043f4:	e015      	b.n	8004422 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043f6:	893b      	ldrh	r3, [r7, #8]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	69b9      	ldr	r1, [r7, #24]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f892 	bl	8004532 <I2C_WaitOnTXISFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e012      	b.n	800443e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004418:	893b      	ldrh	r3, [r7, #8]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2200      	movs	r2, #0
 800442a:	2140      	movs	r1, #64	; 0x40
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f831 	bl	8004494 <I2C_WaitOnFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	80002000 	.word	0x80002000

0800444c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d103      	bne.n	800446a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d007      	beq.n	8004488 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	619a      	str	r2, [r3, #24]
  }
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a4:	e031      	b.n	800450a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d02d      	beq.n	800450a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ae:	f7fe ff6d 	bl	800338c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d122      	bne.n	800450a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4013      	ands	r3, r2
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d113      	bne.n	800450a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f043 0220 	orr.w	r2, r3, #32
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e00f      	b.n	800452a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	429a      	cmp	r2, r3
 8004526:	d0be      	beq.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800453e:	e033      	b.n	80045a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f87f 	bl	8004648 <I2C_IsErrorOccurred>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e031      	b.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d025      	beq.n	80045a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455c:	f7fe ff16 	bl	800338c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11a      	bne.n	80045a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b02      	cmp	r3, #2
 800457e:	d013      	beq.n	80045a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e007      	b.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d1c4      	bne.n	8004540 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045cc:	e02f      	b.n	800462e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f838 	bl	8004648 <I2C_IsErrorOccurred>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e02d      	b.n	800463e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e2:	f7fe fed3 	bl	800338c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d11a      	bne.n	800462e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b20      	cmp	r3, #32
 8004604:	d013      	beq.n	800462e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f043 0220 	orr.w	r2, r3, #32
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e007      	b.n	800463e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b20      	cmp	r3, #32
 800463a:	d1c8      	bne.n	80045ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d068      	beq.n	8004746 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2210      	movs	r2, #16
 800467a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800467c:	e049      	b.n	8004712 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d045      	beq.n	8004712 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fe fe81 	bl	800338c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <I2C_IsErrorOccurred+0x54>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d13a      	bne.n	8004712 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046be:	d121      	bne.n	8004704 <I2C_IsErrorOccurred+0xbc>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c6:	d01d      	beq.n	8004704 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d01a      	beq.n	8004704 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046de:	f7fe fe55 	bl	800338c <HAL_GetTick>
 80046e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e4:	e00e      	b.n	8004704 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046e6:	f7fe fe51 	bl	800338c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b19      	cmp	r3, #25
 80046f2:	d907      	bls.n	8004704 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f043 0320 	orr.w	r3, r3, #32
 80046fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004702:	e006      	b.n	8004712 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b20      	cmp	r3, #32
 8004710:	d1e9      	bne.n	80046e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b20      	cmp	r3, #32
 800471e:	d003      	beq.n	8004728 <I2C_IsErrorOccurred+0xe0>
 8004720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0aa      	beq.n	800467e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2220      	movs	r2, #32
 8004736:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	f043 0304 	orr.w	r3, r3, #4
 800473e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004768:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	f043 0308 	orr.w	r3, r3, #8
 8004780:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800478a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00b      	beq.n	80047b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	f043 0302 	orr.w	r3, r3, #2
 80047a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01c      	beq.n	80047f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff fe45 	bl	800444c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <I2C_IsErrorOccurred+0x1bc>)
 80047ce:	400b      	ands	r3, r1
 80047d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3728      	adds	r7, #40	; 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	fe00e800 	.word	0xfe00e800

08004808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	817b      	strh	r3, [r7, #10]
 8004816:	4613      	mov	r3, r2
 8004818:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004820:	7a7b      	ldrb	r3, [r7, #9]
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004828:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	4313      	orrs	r3, r2
 8004832:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004836:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	0d5b      	lsrs	r3, r3, #21
 8004842:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <I2C_TransferConfig+0x60>)
 8004848:	430b      	orrs	r3, r1
 800484a:	43db      	mvns	r3, r3
 800484c:	ea02 0103 	and.w	r1, r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	03ff63ff 	.word	0x03ff63ff

0800486c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b20      	cmp	r3, #32
 8004880:	d138      	bne.n	80048f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800488c:	2302      	movs	r3, #2
 800488e:	e032      	b.n	80048f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2224      	movs	r2, #36	; 0x24
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b20      	cmp	r3, #32
 8004916:	d139      	bne.n	800498c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004922:	2302      	movs	r3, #2
 8004924:	e033      	b.n	800498e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2224      	movs	r2, #36	; 0x24
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004954:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40007000 	.word	0x40007000

080049b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c6:	d130      	bne.n	8004a2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c8:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d4:	d038      	beq.n	8004a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049d6:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049de:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049e6:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2232      	movs	r2, #50	; 0x32
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	0c9b      	lsrs	r3, r3, #18
 80049f8:	3301      	adds	r3, #1
 80049fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049fc:	e002      	b.n	8004a04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a04:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a10:	d102      	bne.n	8004a18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f2      	bne.n	80049fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a24:	d110      	bne.n	8004a48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e00f      	b.n	8004a4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a36:	d007      	beq.n	8004a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a40:	4a05      	ldr	r2, [pc, #20]	; (8004a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	20000014 	.word	0x20000014
 8004a60:	431bde83 	.word	0x431bde83

08004a64 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a72:	6053      	str	r3, [r2, #4]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40007000 	.word	0x40007000

08004a84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f000 bc08 	b.w	80052a8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a98:	4b96      	ldr	r3, [pc, #600]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 030c 	and.w	r3, r3, #12
 8004aa0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa2:	4b94      	ldr	r3, [pc, #592]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80e4 	beq.w	8004c82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x4c>
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	f040 808b 	bne.w	8004bde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	f040 8087 	bne.w	8004bde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ad0:	4b88      	ldr	r3, [pc, #544]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x64>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e3df      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	4b81      	ldr	r3, [pc, #516]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d004      	beq.n	8004b02 <HAL_RCC_OscConfig+0x7e>
 8004af8:	4b7e      	ldr	r3, [pc, #504]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b00:	e005      	b.n	8004b0e <HAL_RCC_OscConfig+0x8a>
 8004b02:	4b7c      	ldr	r3, [pc, #496]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d223      	bcs.n	8004b5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fdc4 	bl	80056a4 <RCC_SetFlashLatencyFromMSIRange>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e3c0      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b26:	4b73      	ldr	r3, [pc, #460]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a72      	ldr	r2, [pc, #456]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	f043 0308 	orr.w	r3, r3, #8
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	4b70      	ldr	r3, [pc, #448]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	496d      	ldr	r1, [pc, #436]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b44:	4b6b      	ldr	r3, [pc, #428]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	4968      	ldr	r1, [pc, #416]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
 8004b58:	e025      	b.n	8004ba6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b5a:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a65      	ldr	r2, [pc, #404]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b60:	f043 0308 	orr.w	r3, r3, #8
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	4960      	ldr	r1, [pc, #384]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b78:	4b5e      	ldr	r3, [pc, #376]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	495b      	ldr	r1, [pc, #364]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fd84 	bl	80056a4 <RCC_SetFlashLatencyFromMSIRange>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e380      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ba6:	f000 fc87 	bl	80054b8 <HAL_RCC_GetSysClockFreq>
 8004baa:	4602      	mov	r2, r0
 8004bac:	4b51      	ldr	r3, [pc, #324]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	4950      	ldr	r1, [pc, #320]	; (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004bb8:	5ccb      	ldrb	r3, [r1, r3]
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc2:	4a4e      	ldr	r2, [pc, #312]	; (8004cfc <HAL_RCC_OscConfig+0x278>)
 8004bc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bc6:	4b4e      	ldr	r3, [pc, #312]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe f9ec 	bl	8002fa8 <HAL_InitTick>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d052      	beq.n	8004c80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	e364      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d032      	beq.n	8004c4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004be6:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a42      	ldr	r2, [pc, #264]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bf2:	f7fe fbcb 	bl	800338c <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bfa:	f7fe fbc7 	bl	800338c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e34d      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c0c:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c18:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a35      	ldr	r2, [pc, #212]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c1e:	f043 0308 	orr.w	r3, r3, #8
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b33      	ldr	r3, [pc, #204]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4930      	ldr	r1, [pc, #192]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c36:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	021b      	lsls	r3, r3, #8
 8004c44:	492b      	ldr	r1, [pc, #172]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	604b      	str	r3, [r1, #4]
 8004c4a:	e01a      	b.n	8004c82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c4c:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c58:	f7fe fb98 	bl	800338c <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c60:	f7fe fb94 	bl	800338c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e31a      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x1dc>
 8004c7e:	e000      	b.n	8004c82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d073      	beq.n	8004d76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x21c>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d10e      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d063      	beq.n	8004d74 <HAL_RCC_OscConfig+0x2f0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d15f      	bne.n	8004d74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e2f7      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d106      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x24c>
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e025      	b.n	8004d1c <HAL_RCC_OscConfig+0x298>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd8:	d114      	bne.n	8004d04 <HAL_RCC_OscConfig+0x280>
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a05      	ldr	r2, [pc, #20]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a02      	ldr	r2, [pc, #8]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e013      	b.n	8004d1c <HAL_RCC_OscConfig+0x298>
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	0800ea14 	.word	0x0800ea14
 8004cfc:	20000014 	.word	0x20000014
 8004d00:	20000018 	.word	0x20000018
 8004d04:	4ba0      	ldr	r3, [pc, #640]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a9f      	ldr	r2, [pc, #636]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b9d      	ldr	r3, [pc, #628]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a9c      	ldr	r2, [pc, #624]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fe fb32 	bl	800338c <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fe fb2e 	bl	800338c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e2b4      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d3e:	4b92      	ldr	r3, [pc, #584]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x2a8>
 8004d4a:	e014      	b.n	8004d76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fe fb1e 	bl	800338c <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fe fb1a 	bl	800338c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e2a0      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d66:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x2d0>
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d060      	beq.n	8004e44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_OscConfig+0x310>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d119      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d116      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d94:	4b7c      	ldr	r3, [pc, #496]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_OscConfig+0x328>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e27d      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	4b76      	ldr	r3, [pc, #472]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	4973      	ldr	r1, [pc, #460]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc0:	e040      	b.n	8004e44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d023      	beq.n	8004e12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dca:	4b6f      	ldr	r3, [pc, #444]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6e      	ldr	r2, [pc, #440]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fe fad9 	bl	800338c <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dde:	f7fe fad5 	bl	800338c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e25b      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df0:	4b65      	ldr	r3, [pc, #404]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	4b62      	ldr	r3, [pc, #392]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	061b      	lsls	r3, r3, #24
 8004e0a:	495f      	ldr	r1, [pc, #380]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
 8004e10:	e018      	b.n	8004e44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e12:	4b5d      	ldr	r3, [pc, #372]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5c      	ldr	r2, [pc, #368]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fe fab5 	bl	800338c <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e26:	f7fe fab1 	bl	800338c <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e237      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e38:	4b53      	ldr	r3, [pc, #332]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d03c      	beq.n	8004eca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01c      	beq.n	8004e92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e58:	4b4b      	ldr	r3, [pc, #300]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5e:	4a4a      	ldr	r2, [pc, #296]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fe fa90 	bl	800338c <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e70:	f7fe fa8c 	bl	800338c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e212      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e82:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ef      	beq.n	8004e70 <HAL_RCC_OscConfig+0x3ec>
 8004e90:	e01b      	b.n	8004eca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e92:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e98:	4a3b      	ldr	r2, [pc, #236]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fe fa73 	bl	800338c <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eaa:	f7fe fa6f 	bl	800338c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e1f5      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ebc:	4b32      	ldr	r3, [pc, #200]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1ef      	bne.n	8004eaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80a6 	beq.w	8005024 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee8:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f00:	2301      	movs	r3, #1
 8004f02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f04:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <HAL_RCC_OscConfig+0x508>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d118      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <HAL_RCC_OscConfig+0x508>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <HAL_RCC_OscConfig+0x508>)
 8004f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1c:	f7fe fa36 	bl	800338c <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f24:	f7fe fa32 	bl	800338c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e1b8      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_RCC_OscConfig+0x508>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d108      	bne.n	8004f5c <HAL_RCC_OscConfig+0x4d8>
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	4a0d      	ldr	r2, [pc, #52]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f5a:	e029      	b.n	8004fb0 <HAL_RCC_OscConfig+0x52c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d115      	bne.n	8004f90 <HAL_RCC_OscConfig+0x50c>
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f6c:	f043 0304 	orr.w	r3, r3, #4
 8004f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	4a03      	ldr	r2, [pc, #12]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f84:	e014      	b.n	8004fb0 <HAL_RCC_OscConfig+0x52c>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40007000 	.word	0x40007000
 8004f90:	4b9d      	ldr	r3, [pc, #628]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	4a9c      	ldr	r2, [pc, #624]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa0:	4b99      	ldr	r3, [pc, #612]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	4a98      	ldr	r2, [pc, #608]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8004fa8:	f023 0304 	bic.w	r3, r3, #4
 8004fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d016      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fe f9e8 	bl	800338c <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fe f9e4 	bl	800338c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e168      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd6:	4b8c      	ldr	r3, [pc, #560]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ed      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x53c>
 8004fe4:	e015      	b.n	8005012 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe6:	f7fe f9d1 	bl	800338c <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fe f9cd 	bl	800338c <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e151      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005004:	4b80      	ldr	r3, [pc, #512]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ed      	bne.n	8004fee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005012:	7ffb      	ldrb	r3, [r7, #31]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d105      	bne.n	8005024 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005018:	4b7b      	ldr	r3, [pc, #492]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	4a7a      	ldr	r2, [pc, #488]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 800501e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d03c      	beq.n	80050aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01c      	beq.n	8005072 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005038:	4b73      	ldr	r3, [pc, #460]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 800503a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800503e:	4a72      	ldr	r2, [pc, #456]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fe f9a0 	bl	800338c <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005050:	f7fe f99c 	bl	800338c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e122      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005062:	4b69      	ldr	r3, [pc, #420]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0ef      	beq.n	8005050 <HAL_RCC_OscConfig+0x5cc>
 8005070:	e01b      	b.n	80050aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005072:	4b65      	ldr	r3, [pc, #404]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005074:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005078:	4a63      	ldr	r2, [pc, #396]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005082:	f7fe f983 	bl	800338c <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800508a:	f7fe f97f 	bl	800338c <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e105      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800509c:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 800509e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ef      	bne.n	800508a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80f9 	beq.w	80052a6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	f040 80cf 	bne.w	800525c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050be:	4b52      	ldr	r3, [pc, #328]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f003 0203 	and.w	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d12c      	bne.n	800512c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	3b01      	subs	r3, #1
 80050de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d123      	bne.n	800512c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d11b      	bne.n	800512c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d113      	bne.n	800512c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	3b01      	subs	r3, #1
 8005112:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d109      	bne.n	800512c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	3b01      	subs	r3, #1
 8005126:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d071      	beq.n	8005210 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d068      	beq.n	8005204 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d105      	bne.n	800514a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800513e:	4b32      	ldr	r3, [pc, #200]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e0ac      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800514e:	4b2e      	ldr	r3, [pc, #184]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2d      	ldr	r2, [pc, #180]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005158:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800515a:	f7fe f917 	bl	800338c <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005162:	f7fe f913 	bl	800338c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e099      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f0      	bne.n	8005162 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005180:	4b21      	ldr	r3, [pc, #132]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_RCC_OscConfig+0x788>)
 8005186:	4013      	ands	r3, r2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005190:	3a01      	subs	r2, #1
 8005192:	0112      	lsls	r2, r2, #4
 8005194:	4311      	orrs	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800519a:	0212      	lsls	r2, r2, #8
 800519c:	4311      	orrs	r1, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051a2:	0852      	lsrs	r2, r2, #1
 80051a4:	3a01      	subs	r2, #1
 80051a6:	0552      	lsls	r2, r2, #21
 80051a8:	4311      	orrs	r1, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051ae:	0852      	lsrs	r2, r2, #1
 80051b0:	3a01      	subs	r2, #1
 80051b2:	0652      	lsls	r2, r2, #25
 80051b4:	4311      	orrs	r1, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051ba:	06d2      	lsls	r2, r2, #27
 80051bc:	430a      	orrs	r2, r1
 80051be:	4912      	ldr	r1, [pc, #72]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051c4:	4b10      	ldr	r3, [pc, #64]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a0f      	ldr	r2, [pc, #60]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 80051ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a0c      	ldr	r2, [pc, #48]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 80051d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051dc:	f7fe f8d6 	bl	800338c <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fe f8d2 	bl	800338c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e058      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f6:	4b04      	ldr	r3, [pc, #16]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005202:	e050      	b.n	80052a6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e04f      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
 8005208:	40021000 	.word	0x40021000
 800520c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d144      	bne.n	80052a6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800521c:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 8005222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005226:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 800522e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005232:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005234:	f7fe f8aa 	bl	800338c <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523c:	f7fe f8a6 	bl	800338c <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e02c      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800524e:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f0      	beq.n	800523c <HAL_RCC_OscConfig+0x7b8>
 800525a:	e024      	b.n	80052a6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d01f      	beq.n	80052a2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005262:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 8005268:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800526c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fe f88d 	bl	800338c <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005276:	f7fe f889 	bl	800338c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e00f      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f0      	bne.n	8005276 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	4905      	ldr	r1, [pc, #20]	; (80052b0 <HAL_RCC_OscConfig+0x82c>)
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_RCC_OscConfig+0x830>)
 800529c:	4013      	ands	r3, r2
 800529e:	60cb      	str	r3, [r1, #12]
 80052a0:	e001      	b.n	80052a6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000
 80052b4:	feeefffc 	.word	0xfeeefffc

080052b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0e7      	b.n	800549c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052cc:	4b75      	ldr	r3, [pc, #468]	; (80054a4 <HAL_RCC_ClockConfig+0x1ec>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d910      	bls.n	80052fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b72      	ldr	r3, [pc, #456]	; (80054a4 <HAL_RCC_ClockConfig+0x1ec>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 0207 	bic.w	r2, r3, #7
 80052e2:	4970      	ldr	r1, [pc, #448]	; (80054a4 <HAL_RCC_ClockConfig+0x1ec>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b6e      	ldr	r3, [pc, #440]	; (80054a4 <HAL_RCC_ClockConfig+0x1ec>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0cf      	b.n	800549c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d010      	beq.n	800532a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	4b66      	ldr	r3, [pc, #408]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005314:	429a      	cmp	r2, r3
 8005316:	d908      	bls.n	800532a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005318:	4b63      	ldr	r3, [pc, #396]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4960      	ldr	r1, [pc, #384]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005326:	4313      	orrs	r3, r2
 8005328:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d04c      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b03      	cmp	r3, #3
 800533c:	d107      	bne.n	800534e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800533e:	4b5a      	ldr	r3, [pc, #360]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d121      	bne.n	800538e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e0a6      	b.n	800549c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d107      	bne.n	8005366 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005356:	4b54      	ldr	r3, [pc, #336]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d115      	bne.n	800538e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e09a      	b.n	800549c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800536e:	4b4e      	ldr	r3, [pc, #312]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e08e      	b.n	800549c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537e:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e086      	b.n	800549c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800538e:	4b46      	ldr	r3, [pc, #280]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f023 0203 	bic.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4943      	ldr	r1, [pc, #268]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a0:	f7fd fff4 	bl	800338c <HAL_GetTick>
 80053a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a6:	e00a      	b.n	80053be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a8:	f7fd fff0 	bl	800338c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e06e      	b.n	800549c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	4b3a      	ldr	r3, [pc, #232]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 020c 	and.w	r2, r3, #12
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d1eb      	bne.n	80053a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d010      	beq.n	80053fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	4b31      	ldr	r3, [pc, #196]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d208      	bcs.n	80053fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ec:	4b2e      	ldr	r3, [pc, #184]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	492b      	ldr	r1, [pc, #172]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053fe:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d210      	bcs.n	800542e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540c:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <HAL_RCC_ClockConfig+0x1ec>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 0207 	bic.w	r2, r3, #7
 8005414:	4923      	ldr	r1, [pc, #140]	; (80054a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800541c:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <HAL_RCC_ClockConfig+0x1ec>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d001      	beq.n	800542e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e036      	b.n	800549c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4918      	ldr	r1, [pc, #96]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005448:	4313      	orrs	r3, r2
 800544a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005458:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4910      	ldr	r1, [pc, #64]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005468:	4313      	orrs	r3, r2
 800546a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800546c:	f000 f824 	bl	80054b8 <HAL_RCC_GetSysClockFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	490b      	ldr	r1, [pc, #44]	; (80054ac <HAL_RCC_ClockConfig+0x1f4>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
 8005488:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <HAL_RCC_ClockConfig+0x1f8>)
 800548a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_RCC_ClockConfig+0x1fc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7fd fd89 	bl	8002fa8 <HAL_InitTick>
 8005496:	4603      	mov	r3, r0
 8005498:	72fb      	strb	r3, [r7, #11]

  return status;
 800549a:	7afb      	ldrb	r3, [r7, #11]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40022000 	.word	0x40022000
 80054a8:	40021000 	.word	0x40021000
 80054ac:	0800ea14 	.word	0x0800ea14
 80054b0:	20000014 	.word	0x20000014
 80054b4:	20000018 	.word	0x20000018

080054b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	2300      	movs	r3, #0
 80054c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c6:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d0:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0x34>
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b0c      	cmp	r3, #12
 80054e4:	d121      	bne.n	800552a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d11e      	bne.n	800552a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054ec:	4b34      	ldr	r3, [pc, #208]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054f8:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	e005      	b.n	8005514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005508:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005514:	4a2b      	ldr	r2, [pc, #172]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10d      	bne.n	8005540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005528:	e00a      	b.n	8005540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b04      	cmp	r3, #4
 800552e:	d102      	bne.n	8005536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	e004      	b.n	8005540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d101      	bne.n	8005540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800553c:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_RCC_GetSysClockFreq+0x114>)
 800553e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d134      	bne.n	80055b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005546:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d003      	beq.n	800555e <HAL_RCC_GetSysClockFreq+0xa6>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d003      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0xac>
 800555c:	e005      	b.n	800556a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800555e:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005560:	617b      	str	r3, [r7, #20]
      break;
 8005562:	e005      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005564:	4b19      	ldr	r3, [pc, #100]	; (80055cc <HAL_RCC_GetSysClockFreq+0x114>)
 8005566:	617b      	str	r3, [r7, #20]
      break;
 8005568:	e002      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	617b      	str	r3, [r7, #20]
      break;
 800556e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005570:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	3301      	adds	r3, #1
 800557c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	fb03 f202 	mul.w	r2, r3, r2
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	0e5b      	lsrs	r3, r3, #25
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	3301      	adds	r3, #1
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055b0:	69bb      	ldr	r3, [r7, #24]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3724      	adds	r7, #36	; 0x24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
 80055c4:	0800ea2c 	.word	0x0800ea2c
 80055c8:	00f42400 	.word	0x00f42400
 80055cc:	007a1200 	.word	0x007a1200

080055d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d4:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000014 	.word	0x20000014

080055e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055ec:	f7ff fff0 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 80055f0:	4602      	mov	r2, r0
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	4904      	ldr	r1, [pc, #16]	; (8005610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055fe:	5ccb      	ldrb	r3, [r1, r3]
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000
 8005610:	0800ea24 	.word	0x0800ea24

08005614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005618:	f7ff ffda 	bl	80055d0 <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0adb      	lsrs	r3, r3, #11
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4904      	ldr	r1, [pc, #16]	; (800563c <HAL_RCC_GetPCLK2Freq+0x28>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	0800ea24 	.word	0x0800ea24

08005640 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	220f      	movs	r2, #15
 800564e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005650:	4b12      	ldr	r3, [pc, #72]	; (800569c <HAL_RCC_GetClockConfig+0x5c>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0203 	and.w	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800565c:	4b0f      	ldr	r3, [pc, #60]	; (800569c <HAL_RCC_GetClockConfig+0x5c>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005668:	4b0c      	ldr	r3, [pc, #48]	; (800569c <HAL_RCC_GetClockConfig+0x5c>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005674:	4b09      	ldr	r3, [pc, #36]	; (800569c <HAL_RCC_GetClockConfig+0x5c>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	08db      	lsrs	r3, r3, #3
 800567a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005682:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <HAL_RCC_GetClockConfig+0x60>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0207 	and.w	r2, r3, #7
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	601a      	str	r2, [r3, #0]
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000
 80056a0:	40022000 	.word	0x40022000

080056a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056b0:	4b2a      	ldr	r3, [pc, #168]	; (800575c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056bc:	f7ff f96e 	bl	800499c <HAL_PWREx_GetVoltageRange>
 80056c0:	6178      	str	r0, [r7, #20]
 80056c2:	e014      	b.n	80056ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056c4:	4b25      	ldr	r3, [pc, #148]	; (800575c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	4a24      	ldr	r2, [pc, #144]	; (800575c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ce:	6593      	str	r3, [r2, #88]	; 0x58
 80056d0:	4b22      	ldr	r3, [pc, #136]	; (800575c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056dc:	f7ff f95e 	bl	800499c <HAL_PWREx_GetVoltageRange>
 80056e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056e2:	4b1e      	ldr	r3, [pc, #120]	; (800575c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	4a1d      	ldr	r2, [pc, #116]	; (800575c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f4:	d10b      	bne.n	800570e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b80      	cmp	r3, #128	; 0x80
 80056fa:	d919      	bls.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2ba0      	cmp	r3, #160	; 0xa0
 8005700:	d902      	bls.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005702:	2302      	movs	r3, #2
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	e013      	b.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005708:	2301      	movs	r3, #1
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	e010      	b.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d902      	bls.n	800571a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005714:	2303      	movs	r3, #3
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	e00a      	b.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d102      	bne.n	8005726 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005720:	2302      	movs	r3, #2
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	e004      	b.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b70      	cmp	r3, #112	; 0x70
 800572a:	d101      	bne.n	8005730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800572c:	2301      	movs	r3, #1
 800572e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f023 0207 	bic.w	r2, r3, #7
 8005738:	4909      	ldr	r1, [pc, #36]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005740:	4b07      	ldr	r3, [pc, #28]	; (8005760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	429a      	cmp	r2, r3
 800574c:	d001      	beq.n	8005752 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40021000 	.word	0x40021000
 8005760:	40022000 	.word	0x40022000

08005764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800576c:	2300      	movs	r3, #0
 800576e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005770:	2300      	movs	r3, #0
 8005772:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577c:	2b00      	cmp	r3, #0
 800577e:	d041      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005784:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005788:	d02a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800578a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800578e:	d824      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005790:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005794:	d008      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005796:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800579a:	d81e      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a4:	d010      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057a6:	e018      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057a8:	4b86      	ldr	r3, [pc, #536]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a85      	ldr	r2, [pc, #532]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057b4:	e015      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 facd 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057c6:	e00c      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3320      	adds	r3, #32
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fbb6 	bl	8005f40 <RCCEx_PLLSAI2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	74fb      	strb	r3, [r7, #19]
      break;
 80057de:	e000      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10b      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057e8:	4b76      	ldr	r3, [pc, #472]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f6:	4973      	ldr	r1, [pc, #460]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057fe:	e001      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005800:	7cfb      	ldrb	r3, [r7, #19]
 8005802:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d041      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005818:	d02a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800581a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800581e:	d824      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005824:	d008      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800582a:	d81e      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005834:	d010      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005836:	e018      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005838:	4b62      	ldr	r3, [pc, #392]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4a61      	ldr	r2, [pc, #388]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005842:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005844:	e015      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fa85 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005856:	e00c      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3320      	adds	r3, #32
 800585c:	2100      	movs	r1, #0
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fb6e 	bl	8005f40 <RCCEx_PLLSAI2_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005868:	e003      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	74fb      	strb	r3, [r7, #19]
      break;
 800586e:	e000      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005872:	7cfb      	ldrb	r3, [r7, #19]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005878:	4b52      	ldr	r3, [pc, #328]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005886:	494f      	ldr	r1, [pc, #316]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800588e:	e001      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005890:	7cfb      	ldrb	r3, [r7, #19]
 8005892:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80a0 	beq.w	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a2:	2300      	movs	r3, #0
 80058a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058a6:	4b47      	ldr	r3, [pc, #284]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80058b6:	2300      	movs	r3, #0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058bc:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	4a40      	ldr	r2, [pc, #256]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c6:	6593      	str	r3, [r2, #88]	; 0x58
 80058c8:	4b3e      	ldr	r3, [pc, #248]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d4:	2301      	movs	r3, #1
 80058d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d8:	4b3b      	ldr	r3, [pc, #236]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3a      	ldr	r2, [pc, #232]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058e4:	f7fd fd52 	bl	800338c <HAL_GetTick>
 80058e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058ea:	e009      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ec:	f7fd fd4e 	bl	800338c <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d902      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	74fb      	strb	r3, [r7, #19]
        break;
 80058fe:	e005      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005900:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0ef      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800590c:	7cfb      	ldrb	r3, [r7, #19]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d15c      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005912:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01f      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	429a      	cmp	r2, r3
 800592e:	d019      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005930:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800593c:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800594c:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596e:	f7fd fd0d 	bl	800338c <HAL_GetTick>
 8005972:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005974:	e00b      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fd fd09 	bl	800338c <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d902      	bls.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	74fb      	strb	r3, [r7, #19]
            break;
 800598c:	e006      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0ec      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800599c:	7cfb      	ldrb	r3, [r7, #19]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10c      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	4904      	ldr	r1, [pc, #16]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059ba:	e009      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059bc:	7cfb      	ldrb	r3, [r7, #19]
 80059be:	74bb      	strb	r3, [r7, #18]
 80059c0:	e006      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80059c2:	bf00      	nop
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d0:	7c7b      	ldrb	r3, [r7, #17]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d105      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d6:	4ba6      	ldr	r3, [pc, #664]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059da:	4aa5      	ldr	r2, [pc, #660]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ee:	4ba0      	ldr	r3, [pc, #640]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f023 0203 	bic.w	r2, r3, #3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	499c      	ldr	r1, [pc, #624]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a10:	4b97      	ldr	r3, [pc, #604]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f023 020c 	bic.w	r2, r3, #12
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	4994      	ldr	r1, [pc, #592]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a32:	4b8f      	ldr	r3, [pc, #572]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	498b      	ldr	r1, [pc, #556]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a54:	4b86      	ldr	r3, [pc, #536]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a62:	4983      	ldr	r1, [pc, #524]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a76:	4b7e      	ldr	r3, [pc, #504]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a84:	497a      	ldr	r1, [pc, #488]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a98:	4b75      	ldr	r3, [pc, #468]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa6:	4972      	ldr	r1, [pc, #456]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aba:	4b6d      	ldr	r3, [pc, #436]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac8:	4969      	ldr	r1, [pc, #420]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005adc:	4b64      	ldr	r3, [pc, #400]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aea:	4961      	ldr	r1, [pc, #388]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005afe:	4b5c      	ldr	r3, [pc, #368]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0c:	4958      	ldr	r1, [pc, #352]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b20:	4b53      	ldr	r3, [pc, #332]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	4950      	ldr	r1, [pc, #320]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b42:	4b4b      	ldr	r3, [pc, #300]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	4947      	ldr	r1, [pc, #284]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b64:	4b42      	ldr	r3, [pc, #264]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b72:	493f      	ldr	r1, [pc, #252]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d028      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b86:	4b3a      	ldr	r3, [pc, #232]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b94:	4936      	ldr	r1, [pc, #216]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba4:	d106      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba6:	4b32      	ldr	r3, [pc, #200]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	4a31      	ldr	r2, [pc, #196]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb0:	60d3      	str	r3, [r2, #12]
 8005bb2:	e011      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f8c9 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005bce:	7cfb      	ldrb	r3, [r7, #19]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005bd4:	7cfb      	ldrb	r3, [r7, #19]
 8005bd6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d028      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005be4:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf2:	491f      	ldr	r1, [pc, #124]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c02:	d106      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c04:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0e:	60d3      	str	r3, [r2, #12]
 8005c10:	e011      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c1a:	d10c      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	2101      	movs	r1, #1
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f89a 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c2c:	7cfb      	ldrb	r3, [r7, #19]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005c32:	7cfb      	ldrb	r3, [r7, #19]
 8005c34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c50:	4907      	ldr	r1, [pc, #28]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c60:	d108      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c62:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	4a02      	ldr	r2, [pc, #8]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6c:	60d3      	str	r3, [r2, #12]
 8005c6e:	e013      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005c70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3304      	adds	r3, #4
 8005c82:	2101      	movs	r1, #1
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f869 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c8e:	7cfb      	ldrb	r3, [r7, #19]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005c94:	7cfb      	ldrb	r3, [r7, #19]
 8005c96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d02f      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ca4:	4b2c      	ldr	r3, [pc, #176]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cb2:	4929      	ldr	r1, [pc, #164]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	2102      	movs	r1, #2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 f846 	bl	8005d5c <RCCEx_PLLSAI1_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cd4:	7cfb      	ldrb	r3, [r7, #19]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d014      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005cda:	7cfb      	ldrb	r3, [r7, #19]
 8005cdc:	74bb      	strb	r3, [r7, #18]
 8005cde:	e011      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3320      	adds	r3, #32
 8005cee:	2102      	movs	r1, #2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f925 	bl	8005f40 <RCCEx_PLLSAI2_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d10:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d20:	490d      	ldr	r1, [pc, #52]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d34:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d44:	4904      	ldr	r1, [pc, #16]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40021000 	.word	0x40021000

08005d5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d6a:	4b74      	ldr	r3, [pc, #464]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d018      	beq.n	8005da8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d76:	4b71      	ldr	r3, [pc, #452]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0203 	and.w	r2, r3, #3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d10d      	bne.n	8005da2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
       ||
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d8e:	4b6b      	ldr	r3, [pc, #428]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
       ||
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d047      	beq.n	8005e32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	e044      	b.n	8005e32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d018      	beq.n	8005de2 <RCCEx_PLLSAI1_Config+0x86>
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d825      	bhi.n	8005e00 <RCCEx_PLLSAI1_Config+0xa4>
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d002      	beq.n	8005dbe <RCCEx_PLLSAI1_Config+0x62>
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d009      	beq.n	8005dd0 <RCCEx_PLLSAI1_Config+0x74>
 8005dbc:	e020      	b.n	8005e00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dbe:	4b5f      	ldr	r3, [pc, #380]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d11d      	bne.n	8005e06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dce:	e01a      	b.n	8005e06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dd0:	4b5a      	ldr	r3, [pc, #360]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d116      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de0:	e013      	b.n	8005e0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005de2:	4b56      	ldr	r3, [pc, #344]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dee:	4b53      	ldr	r3, [pc, #332]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dfe:	e006      	b.n	8005e0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	e004      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e06:	bf00      	nop
 8005e08:	e002      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10d      	bne.n	8005e32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e16:	4b49      	ldr	r3, [pc, #292]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6819      	ldr	r1, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	4943      	ldr	r1, [pc, #268]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d17c      	bne.n	8005f32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e38:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a3f      	ldr	r2, [pc, #252]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e44:	f7fd faa2 	bl	800338c <HAL_GetTick>
 8005e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e4a:	e009      	b.n	8005e60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e4c:	f7fd fa9e 	bl	800338c <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d902      	bls.n	8005e60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e5e:	e005      	b.n	8005e6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ef      	bne.n	8005e4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d15f      	bne.n	8005f32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d110      	bne.n	8005e9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6892      	ldr	r2, [r2, #8]
 8005e88:	0211      	lsls	r1, r2, #8
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68d2      	ldr	r2, [r2, #12]
 8005e8e:	06d2      	lsls	r2, r2, #27
 8005e90:	430a      	orrs	r2, r1
 8005e92:	492a      	ldr	r1, [pc, #168]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	610b      	str	r3, [r1, #16]
 8005e98:	e027      	b.n	8005eea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d112      	bne.n	8005ec6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ea8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6892      	ldr	r2, [r2, #8]
 8005eb0:	0211      	lsls	r1, r2, #8
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6912      	ldr	r2, [r2, #16]
 8005eb6:	0852      	lsrs	r2, r2, #1
 8005eb8:	3a01      	subs	r2, #1
 8005eba:	0552      	lsls	r2, r2, #21
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	491f      	ldr	r1, [pc, #124]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	610b      	str	r3, [r1, #16]
 8005ec4:	e011      	b.n	8005eea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ece:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6892      	ldr	r2, [r2, #8]
 8005ed6:	0211      	lsls	r1, r2, #8
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6952      	ldr	r2, [r2, #20]
 8005edc:	0852      	lsrs	r2, r2, #1
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	0652      	lsls	r2, r2, #25
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	4915      	ldr	r1, [pc, #84]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005eea:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ef4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef6:	f7fd fa49 	bl	800338c <HAL_GetTick>
 8005efa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005efc:	e009      	b.n	8005f12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005efe:	f7fd fa45 	bl	800338c <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d902      	bls.n	8005f12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	73fb      	strb	r3, [r7, #15]
          break;
 8005f10:	e005      	b.n	8005f1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0ef      	beq.n	8005efe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	4903      	ldr	r1, [pc, #12]	; (8005f3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40021000 	.word	0x40021000

08005f40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f4e:	4b69      	ldr	r3, [pc, #420]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f5a:	4b66      	ldr	r3, [pc, #408]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0203 	and.w	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d10d      	bne.n	8005f86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f72:	4b60      	ldr	r3, [pc, #384]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
       ||
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d047      	beq.n	8006016 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e044      	b.n	8006016 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d018      	beq.n	8005fc6 <RCCEx_PLLSAI2_Config+0x86>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d825      	bhi.n	8005fe4 <RCCEx_PLLSAI2_Config+0xa4>
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d002      	beq.n	8005fa2 <RCCEx_PLLSAI2_Config+0x62>
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d009      	beq.n	8005fb4 <RCCEx_PLLSAI2_Config+0x74>
 8005fa0:	e020      	b.n	8005fe4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fa2:	4b54      	ldr	r3, [pc, #336]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11d      	bne.n	8005fea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb2:	e01a      	b.n	8005fea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fb4:	4b4f      	ldr	r3, [pc, #316]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d116      	bne.n	8005fee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc4:	e013      	b.n	8005fee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fc6:	4b4b      	ldr	r3, [pc, #300]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10f      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fd2:	4b48      	ldr	r3, [pc, #288]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fe2:	e006      	b.n	8005ff2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	e004      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fea:	bf00      	nop
 8005fec:	e002      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e000      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ff2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10d      	bne.n	8006016 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ffa:	4b3e      	ldr	r3, [pc, #248]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	3b01      	subs	r3, #1
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	430b      	orrs	r3, r1
 8006010:	4938      	ldr	r1, [pc, #224]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006012:	4313      	orrs	r3, r2
 8006014:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d166      	bne.n	80060ea <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800601c:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a34      	ldr	r2, [pc, #208]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006028:	f7fd f9b0 	bl	800338c <HAL_GetTick>
 800602c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800602e:	e009      	b.n	8006044 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006030:	f7fd f9ac 	bl	800338c <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d902      	bls.n	8006044 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	73fb      	strb	r3, [r7, #15]
        break;
 8006042:	e005      	b.n	8006050 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ef      	bne.n	8006030 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d149      	bne.n	80060ea <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d110      	bne.n	800607e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800605c:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006064:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6892      	ldr	r2, [r2, #8]
 800606c:	0211      	lsls	r1, r2, #8
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	06d2      	lsls	r2, r2, #27
 8006074:	430a      	orrs	r2, r1
 8006076:	491f      	ldr	r1, [pc, #124]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006078:	4313      	orrs	r3, r2
 800607a:	614b      	str	r3, [r1, #20]
 800607c:	e011      	b.n	80060a2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006086:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6892      	ldr	r2, [r2, #8]
 800608e:	0211      	lsls	r1, r2, #8
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6912      	ldr	r2, [r2, #16]
 8006094:	0852      	lsrs	r2, r2, #1
 8006096:	3a01      	subs	r2, #1
 8006098:	0652      	lsls	r2, r2, #25
 800609a:	430a      	orrs	r2, r1
 800609c:	4915      	ldr	r1, [pc, #84]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a13      	ldr	r2, [pc, #76]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ae:	f7fd f96d 	bl	800338c <HAL_GetTick>
 80060b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060b4:	e009      	b.n	80060ca <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060b6:	f7fd f969 	bl	800338c <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d902      	bls.n	80060ca <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	73fb      	strb	r3, [r7, #15]
          break;
 80060c8:	e005      	b.n	80060d6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0ef      	beq.n	80060b6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d106      	bne.n	80060ea <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	4903      	ldr	r1, [pc, #12]	; (80060f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40021000 	.word	0x40021000

080060f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e095      	b.n	8006236 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800611a:	d009      	beq.n	8006130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	61da      	str	r2, [r3, #28]
 8006122:	e005      	b.n	8006130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fc feea 	bl	8002f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006166:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006170:	d902      	bls.n	8006178 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e002      	b.n	800617e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800617c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006186:	d007      	beq.n	8006198 <HAL_SPI_Init+0xa0>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006190:	d002      	beq.n	8006198 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	ea42 0103 	orr.w	r1, r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	0c1b      	lsrs	r3, r3, #16
 80061f4:	f003 0204 	and.w	r2, r3, #4
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006214:	ea42 0103 	orr.w	r1, r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_SPI_Transmit+0x22>
 800625c:	2302      	movs	r3, #2
 800625e:	e15f      	b.n	8006520 <HAL_SPI_Transmit+0x2e2>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006268:	f7fd f890 	bl	800338c <HAL_GetTick>
 800626c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d002      	beq.n	8006284 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006282:	e148      	b.n	8006516 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_Transmit+0x52>
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006294:	e13f      	b.n	8006516 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2203      	movs	r2, #3
 800629a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	88fa      	ldrh	r2, [r7, #6]
 80062b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e0:	d10f      	bne.n	8006302 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006300:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b40      	cmp	r3, #64	; 0x40
 800630e:	d007      	beq.n	8006320 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006328:	d94f      	bls.n	80063ca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_SPI_Transmit+0xfa>
 8006332:	8afb      	ldrh	r3, [r7, #22]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d142      	bne.n	80063be <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	881a      	ldrh	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	1c9a      	adds	r2, r3, #2
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800635c:	e02f      	b.n	80063be <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b02      	cmp	r3, #2
 800636a:	d112      	bne.n	8006392 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	881a      	ldrh	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	1c9a      	adds	r2, r3, #2
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006390:	e015      	b.n	80063be <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006392:	f7fc fffb 	bl	800338c <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d803      	bhi.n	80063aa <HAL_SPI_Transmit+0x16c>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d102      	bne.n	80063b0 <HAL_SPI_Transmit+0x172>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80063bc:	e0ab      	b.n	8006516 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1ca      	bne.n	800635e <HAL_SPI_Transmit+0x120>
 80063c8:	e080      	b.n	80064cc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_SPI_Transmit+0x19a>
 80063d2:	8afb      	ldrh	r3, [r7, #22]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d174      	bne.n	80064c2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d912      	bls.n	8006408 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	881a      	ldrh	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	1c9a      	adds	r2, r3, #2
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b02      	subs	r3, #2
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006406:	e05c      	b.n	80064c2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	7812      	ldrb	r2, [r2, #0]
 8006414:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800642e:	e048      	b.n	80064c2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b02      	cmp	r3, #2
 800643c:	d12b      	bne.n	8006496 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b01      	cmp	r3, #1
 8006446:	d912      	bls.n	800646e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	881a      	ldrh	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	1c9a      	adds	r2, r3, #2
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b02      	subs	r3, #2
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800646c:	e029      	b.n	80064c2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	7812      	ldrb	r2, [r2, #0]
 800647a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006494:	e015      	b.n	80064c2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006496:	f7fc ff79 	bl	800338c <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d803      	bhi.n	80064ae <HAL_SPI_Transmit+0x270>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ac:	d102      	bne.n	80064b4 <HAL_SPI_Transmit+0x276>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80064c0:	e029      	b.n	8006516 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1b1      	bne.n	8006430 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fcf9 	bl	8006ec8 <SPI_EndRxTxTransaction>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	77fb      	strb	r3, [r7, #31]
 800650c:	e003      	b.n	8006516 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800651e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d002      	beq.n	800654e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006548:	2302      	movs	r3, #2
 800654a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800654c:	e11a      	b.n	8006784 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006556:	d112      	bne.n	800657e <HAL_SPI_Receive+0x56>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10e      	bne.n	800657e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2204      	movs	r2, #4
 8006564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006568:	88fa      	ldrh	r2, [r7, #6]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	4613      	mov	r3, r2
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	68b9      	ldr	r1, [r7, #8]
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f90e 	bl	8006796 <HAL_SPI_TransmitReceive>
 800657a:	4603      	mov	r3, r0
 800657c:	e107      	b.n	800678e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_SPI_Receive+0x64>
 8006588:	2302      	movs	r3, #2
 800658a:	e100      	b.n	800678e <HAL_SPI_Receive+0x266>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006594:	f7fc fefa 	bl	800338c <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_Receive+0x7e>
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065aa:	e0eb      	b.n	8006784 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2204      	movs	r2, #4
 80065b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	88fa      	ldrh	r2, [r7, #6]
 80065c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065f6:	d908      	bls.n	800660a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006606:	605a      	str	r2, [r3, #4]
 8006608:	e007      	b.n	800661a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006618:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006622:	d10f      	bne.n	8006644 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006632:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006642:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d007      	beq.n	8006662 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006660:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800666a:	d86f      	bhi.n	800674c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800666c:	e034      	b.n	80066d8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b01      	cmp	r3, #1
 800667a:	d117      	bne.n	80066ac <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f103 020c 	add.w	r2, r3, #12
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	7812      	ldrb	r2, [r2, #0]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066aa:	e015      	b.n	80066d8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066ac:	f7fc fe6e 	bl	800338c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d803      	bhi.n	80066c4 <HAL_SPI_Receive+0x19c>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c2:	d102      	bne.n	80066ca <HAL_SPI_Receive+0x1a2>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80066d6:	e055      	b.n	8006784 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1c4      	bne.n	800666e <HAL_SPI_Receive+0x146>
 80066e4:	e038      	b.n	8006758 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d115      	bne.n	8006720 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	b292      	uxth	r2, r2
 8006700:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	1c9a      	adds	r2, r3, #2
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800671e:	e015      	b.n	800674c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006720:	f7fc fe34 	bl	800338c <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d803      	bhi.n	8006738 <HAL_SPI_Receive+0x210>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d102      	bne.n	800673e <HAL_SPI_Receive+0x216>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800674a:	e01b      	b.n	8006784 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1c6      	bne.n	80066e6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fb5b 	bl	8006e18 <SPI_EndRxTransaction>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	75fb      	strb	r3, [r7, #23]
 800677a:	e003      	b.n	8006784 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b08a      	sub	sp, #40	; 0x28
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067a4:	2301      	movs	r3, #1
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_SPI_TransmitReceive+0x26>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e20a      	b.n	8006bd2 <HAL_SPI_TransmitReceive+0x43c>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067c4:	f7fc fde2 	bl	800338c <HAL_GetTick>
 80067c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067d8:	887b      	ldrh	r3, [r7, #2]
 80067da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067dc:	887b      	ldrh	r3, [r7, #2]
 80067de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067e0:	7efb      	ldrb	r3, [r7, #27]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d00e      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x6e>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ec:	d106      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x66>
 80067f6:	7efb      	ldrb	r3, [r7, #27]
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d003      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
 80067fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006802:	e1e0      	b.n	8006bc6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <HAL_SPI_TransmitReceive+0x80>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_SPI_TransmitReceive+0x80>
 8006810:	887b      	ldrh	r3, [r7, #2]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800681c:	e1d3      	b.n	8006bc6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b04      	cmp	r3, #4
 8006828:	d003      	beq.n	8006832 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2205      	movs	r2, #5
 800682e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	887a      	ldrh	r2, [r7, #2]
 8006842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	887a      	ldrh	r2, [r7, #2]
 800684a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	887a      	ldrh	r2, [r7, #2]
 8006858:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	887a      	ldrh	r2, [r7, #2]
 800685e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006874:	d802      	bhi.n	800687c <HAL_SPI_TransmitReceive+0xe6>
 8006876:	8a3b      	ldrh	r3, [r7, #16]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d908      	bls.n	800688e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	e007      	b.n	800689e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800689c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d007      	beq.n	80068bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068c4:	f240 8081 	bls.w	80069ca <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0x140>
 80068d0:	8a7b      	ldrh	r3, [r7, #18]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d16d      	bne.n	80069b2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	881a      	ldrh	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	1c9a      	adds	r2, r3, #2
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068fa:	e05a      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b02      	cmp	r3, #2
 8006908:	d11b      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x1ac>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d016      	beq.n	8006942 <HAL_SPI_TransmitReceive+0x1ac>
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	2b01      	cmp	r3, #1
 8006918:	d113      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	881a      	ldrh	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	1c9a      	adds	r2, r3, #2
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b01      	cmp	r3, #1
 800694e:	d11c      	bne.n	800698a <HAL_SPI_TransmitReceive+0x1f4>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d016      	beq.n	800698a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	b292      	uxth	r2, r2
 8006968:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	1c9a      	adds	r2, r3, #2
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006986:	2301      	movs	r3, #1
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800698a:	f7fc fcff 	bl	800338c <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006996:	429a      	cmp	r2, r3
 8006998:	d80b      	bhi.n	80069b2 <HAL_SPI_TransmitReceive+0x21c>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d007      	beq.n	80069b2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80069b0:	e109      	b.n	8006bc6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d19f      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x166>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d199      	bne.n	80068fc <HAL_SPI_TransmitReceive+0x166>
 80069c8:	e0e3      	b.n	8006b92 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_SPI_TransmitReceive+0x244>
 80069d2:	8a7b      	ldrh	r3, [r7, #18]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	f040 80cf 	bne.w	8006b78 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d912      	bls.n	8006a0a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	881a      	ldrh	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	1c9a      	adds	r2, r3, #2
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b02      	subs	r3, #2
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a08:	e0b6      	b.n	8006b78 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	330c      	adds	r3, #12
 8006a14:	7812      	ldrb	r2, [r2, #0]
 8006a16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a30:	e0a2      	b.n	8006b78 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d134      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x314>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02f      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0x314>
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d12c      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d912      	bls.n	8006a80 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	881a      	ldrh	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	1c9a      	adds	r2, r3, #2
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b02      	subs	r3, #2
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a7e:	e012      	b.n	8006aa6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	7812      	ldrb	r2, [r2, #0]
 8006a8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d148      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0x3b4>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d042      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d923      	bls.n	8006b18 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	b292      	uxth	r2, r2
 8006adc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	1c9a      	adds	r2, r3, #2
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b02      	subs	r3, #2
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d81f      	bhi.n	8006b46 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b14:	605a      	str	r2, [r3, #4]
 8006b16:	e016      	b.n	8006b46 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f103 020c 	add.w	r2, r3, #12
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	7812      	ldrb	r2, [r2, #0]
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b46:	2301      	movs	r3, #1
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b4a:	f7fc fc1f 	bl	800338c <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d803      	bhi.n	8006b62 <HAL_SPI_TransmitReceive+0x3cc>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b60:	d102      	bne.n	8006b68 <HAL_SPI_TransmitReceive+0x3d2>
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d107      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006b76:	e026      	b.n	8006bc6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f47f af57 	bne.w	8006a32 <HAL_SPI_TransmitReceive+0x29c>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f47f af50 	bne.w	8006a32 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 f996 	bl	8006ec8 <SPI_EndRxTxTransaction>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bbc:	e003      	b.n	8006bc6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3728      	adds	r7, #40	; 0x28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	4613      	mov	r3, r2
 8006bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bec:	f7fc fbce 	bl	800338c <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bfc:	f7fc fbc6 	bl	800338c <HAL_GetTick>
 8006c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c02:	4b39      	ldr	r3, [pc, #228]	; (8006ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	015b      	lsls	r3, r3, #5
 8006c08:	0d1b      	lsrs	r3, r3, #20
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	fb02 f303 	mul.w	r3, r2, r3
 8006c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c12:	e054      	b.n	8006cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1a:	d050      	beq.n	8006cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c1c:	f7fc fbb6 	bl	800338c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d902      	bls.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d13d      	bne.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c4a:	d111      	bne.n	8006c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c54:	d004      	beq.n	8006c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c5e:	d107      	bne.n	8006c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c78:	d10f      	bne.n	8006c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e017      	b.n	8006cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d19b      	bne.n	8006c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3720      	adds	r7, #32
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000014 	.word	0x20000014

08006cec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	; 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cfe:	f7fc fb45 	bl	800338c <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d0e:	f7fc fb3d 	bl	800338c <HAL_GetTick>
 8006d12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d1c:	4b3d      	ldr	r3, [pc, #244]	; (8006e14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	00da      	lsls	r2, r3, #3
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	0d1b      	lsrs	r3, r3, #20
 8006d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d34:	e060      	b.n	8006df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d3c:	d107      	bne.n	8006d4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d050      	beq.n	8006df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d56:	f7fc fb19 	bl	800338c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d902      	bls.n	8006d6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d13d      	bne.n	8006de8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d84:	d111      	bne.n	8006daa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8e:	d004      	beq.n	8006d9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d98:	d107      	bne.n	8006daa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db2:	d10f      	bne.n	8006dd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e010      	b.n	8006e0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	4013      	ands	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d196      	bne.n	8006d36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3728      	adds	r7, #40	; 0x28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000014 	.word	0x20000014

08006e18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e2c:	d111      	bne.n	8006e52 <SPI_EndRxTransaction+0x3a>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e36:	d004      	beq.n	8006e42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e40:	d107      	bne.n	8006e52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e50:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2180      	movs	r1, #128	; 0x80
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff febd 	bl	8006bdc <SPI_WaitFlagStateUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e6c:	f043 0220 	orr.w	r2, r3, #32
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e023      	b.n	8006ec0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e80:	d11d      	bne.n	8006ebe <SPI_EndRxTransaction+0xa6>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8a:	d004      	beq.n	8006e96 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e94:	d113      	bne.n	8006ebe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff ff22 	bl	8006cec <SPI_WaitFifoStateUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb2:	f043 0220 	orr.w	r2, r3, #32
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e000      	b.n	8006ec0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ff03 	bl	8006cec <SPI_WaitFifoStateUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef0:	f043 0220 	orr.w	r2, r3, #32
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e027      	b.n	8006f4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2200      	movs	r2, #0
 8006f04:	2180      	movs	r1, #128	; 0x80
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fe68 	bl	8006bdc <SPI_WaitFlagStateUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f16:	f043 0220 	orr.w	r2, r3, #32
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e014      	b.n	8006f4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f7ff fedc 	bl	8006cec <SPI_WaitFifoStateUntilTimeout>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f3e:	f043 0220 	orr.w	r2, r3, #32
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e000      	b.n	8006f4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e049      	b.n	8006ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f841 	bl	8007002 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4619      	mov	r1, r3
 8006f92:	4610      	mov	r0, r2
 8006f94:	f000 f9da 	bl	800734c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d001      	beq.n	8007030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e04f      	b.n	80070d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a23      	ldr	r2, [pc, #140]	; (80070dc <HAL_TIM_Base_Start_IT+0xc4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705a:	d018      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1e      	ldr	r2, [pc, #120]	; (80070e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00e      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d009      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1b      	ldr	r2, [pc, #108]	; (80070ec <HAL_TIM_Base_Start_IT+0xd4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a19      	ldr	r2, [pc, #100]	; (80070f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d115      	bne.n	80070ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007096:	4013      	ands	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b06      	cmp	r3, #6
 800709e:	d015      	beq.n	80070cc <HAL_TIM_Base_Start_IT+0xb4>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a6:	d011      	beq.n	80070cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	e008      	b.n	80070cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e000      	b.n	80070ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00
 80070ec:	40013400 	.word	0x40013400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	00010007 	.word	0x00010007

080070f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d020      	beq.n	800715c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01b      	beq.n	800715c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f06f 0202 	mvn.w	r2, #2
 800712c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f8e4 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8007148:	e005      	b.n	8007156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f8d6 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f8e7 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	d020      	beq.n	80071a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01b      	beq.n	80071a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0204 	mvn.w	r2, #4
 8007178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2202      	movs	r2, #2
 800717e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f8be 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8007194:	e005      	b.n	80071a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8b0 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8c1 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d020      	beq.n	80071f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01b      	beq.n	80071f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f06f 0208 	mvn.w	r2, #8
 80071c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2204      	movs	r2, #4
 80071ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f898 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 80071e0:	e005      	b.n	80071ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f88a 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f89b 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d020      	beq.n	8007240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01b      	beq.n	8007240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0210 	mvn.w	r2, #16
 8007210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2208      	movs	r2, #8
 8007216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f872 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 800722c:	e005      	b.n	800723a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f864 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f875 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00c      	beq.n	8007264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0201 	mvn.w	r2, #1
 800725c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fb f888 	bl	8002374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f906 	bl	8007494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00c      	beq.n	80072ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007298:	2b00      	cmp	r3, #0
 800729a:	d007      	beq.n	80072ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f8fe 	bl	80074a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00c      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f834 	bl	8007338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00c      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0220 	mvn.w	r2, #32
 80072ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f8c6 	bl	8007480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a40      	ldr	r2, [pc, #256]	; (8007460 <TIM_Base_SetConfig+0x114>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d013      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d00f      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a3d      	ldr	r2, [pc, #244]	; (8007464 <TIM_Base_SetConfig+0x118>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00b      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a3c      	ldr	r2, [pc, #240]	; (8007468 <TIM_Base_SetConfig+0x11c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d007      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a3b      	ldr	r2, [pc, #236]	; (800746c <TIM_Base_SetConfig+0x120>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_Base_SetConfig+0x40>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a3a      	ldr	r2, [pc, #232]	; (8007470 <TIM_Base_SetConfig+0x124>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d108      	bne.n	800739e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a2f      	ldr	r2, [pc, #188]	; (8007460 <TIM_Base_SetConfig+0x114>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d01f      	beq.n	80073e6 <TIM_Base_SetConfig+0x9a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ac:	d01b      	beq.n	80073e6 <TIM_Base_SetConfig+0x9a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a2c      	ldr	r2, [pc, #176]	; (8007464 <TIM_Base_SetConfig+0x118>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d017      	beq.n	80073e6 <TIM_Base_SetConfig+0x9a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a2b      	ldr	r2, [pc, #172]	; (8007468 <TIM_Base_SetConfig+0x11c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <TIM_Base_SetConfig+0x9a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a2a      	ldr	r2, [pc, #168]	; (800746c <TIM_Base_SetConfig+0x120>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00f      	beq.n	80073e6 <TIM_Base_SetConfig+0x9a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a29      	ldr	r2, [pc, #164]	; (8007470 <TIM_Base_SetConfig+0x124>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00b      	beq.n	80073e6 <TIM_Base_SetConfig+0x9a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a28      	ldr	r2, [pc, #160]	; (8007474 <TIM_Base_SetConfig+0x128>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d007      	beq.n	80073e6 <TIM_Base_SetConfig+0x9a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a27      	ldr	r2, [pc, #156]	; (8007478 <TIM_Base_SetConfig+0x12c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d003      	beq.n	80073e6 <TIM_Base_SetConfig+0x9a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a26      	ldr	r2, [pc, #152]	; (800747c <TIM_Base_SetConfig+0x130>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d108      	bne.n	80073f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a10      	ldr	r2, [pc, #64]	; (8007460 <TIM_Base_SetConfig+0x114>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00f      	beq.n	8007444 <TIM_Base_SetConfig+0xf8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a12      	ldr	r2, [pc, #72]	; (8007470 <TIM_Base_SetConfig+0x124>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00b      	beq.n	8007444 <TIM_Base_SetConfig+0xf8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a11      	ldr	r2, [pc, #68]	; (8007474 <TIM_Base_SetConfig+0x128>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d007      	beq.n	8007444 <TIM_Base_SetConfig+0xf8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a10      	ldr	r2, [pc, #64]	; (8007478 <TIM_Base_SetConfig+0x12c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_Base_SetConfig+0xf8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a0f      	ldr	r2, [pc, #60]	; (800747c <TIM_Base_SetConfig+0x130>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d103      	bne.n	800744c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	615a      	str	r2, [r3, #20]
}
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40012c00 	.word	0x40012c00
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40013400 	.word	0x40013400
 8007474:	40014000 	.word	0x40014000
 8007478:	40014400 	.word	0x40014400
 800747c:	40014800 	.word	0x40014800

08007480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e040      	b.n	8007550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d106      	bne.n	80074e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fb fc8a 	bl	8002df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2224      	movs	r2, #36	; 0x24
 80074e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0201 	bic.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fe74 	bl	80081f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fbb9 	bl	8007c80 <UART_SetConfig>
 800750e:	4603      	mov	r3, r0
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e01b      	b.n	8007550 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fef3 	bl	8008334 <UART_CheckIdleState>
 800754e:	4603      	mov	r3, r0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756c:	2b20      	cmp	r3, #32
 800756e:	d178      	bne.n	8007662 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <HAL_UART_Transmit+0x24>
 8007576:	88fb      	ldrh	r3, [r7, #6]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e071      	b.n	8007664 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2221      	movs	r2, #33	; 0x21
 800758c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800758e:	f7fb fefd 	bl	800338c <HAL_GetTick>
 8007592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	88fa      	ldrh	r2, [r7, #6]
 80075a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ac:	d108      	bne.n	80075c0 <HAL_UART_Transmit+0x68>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d104      	bne.n	80075c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e003      	b.n	80075c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075c8:	e030      	b.n	800762c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 ff55 	bl	8008484 <UART_WaitOnFlagUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e03c      	b.n	8007664 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10b      	bne.n	8007608 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	881a      	ldrh	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075fc:	b292      	uxth	r2, r2
 80075fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	3302      	adds	r3, #2
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e008      	b.n	800761a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	b292      	uxth	r2, r2
 8007612:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1c8      	bne.n	80075ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2200      	movs	r2, #0
 8007640:	2140      	movs	r1, #64	; 0x40
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 ff1e 	bl	8008484 <UART_WaitOnFlagUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d004      	beq.n	8007658 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e005      	b.n	8007664 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	e000      	b.n	8007664 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007662:	2302      	movs	r3, #2
  }
}
 8007664:	4618      	mov	r0, r3
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b0ba      	sub	sp, #232	; 0xe8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007692:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007696:	f640 030f 	movw	r3, #2063	; 0x80f
 800769a:	4013      	ands	r3, r2
 800769c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80076a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d115      	bne.n	80076d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00f      	beq.n	80076d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d009      	beq.n	80076d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 82ae 	beq.w	8007c26 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
      }
      return;
 80076d2:	e2a8      	b.n	8007c26 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80076d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 8117 	beq.w	800790c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076ee:	4b85      	ldr	r3, [pc, #532]	; (8007904 <HAL_UART_IRQHandler+0x298>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 810a 	beq.w	800790c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d011      	beq.n	8007728 <HAL_UART_IRQHandler+0xbc>
 8007704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2201      	movs	r2, #1
 8007716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800771e:	f043 0201 	orr.w	r2, r3, #1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d011      	beq.n	8007758 <HAL_UART_IRQHandler+0xec>
 8007734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2202      	movs	r2, #2
 8007746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774e:	f043 0204 	orr.w	r2, r3, #4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d011      	beq.n	8007788 <HAL_UART_IRQHandler+0x11c>
 8007764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2204      	movs	r2, #4
 8007776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800777e:	f043 0202 	orr.w	r2, r3, #2
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	2b00      	cmp	r3, #0
 8007792:	d017      	beq.n	80077c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ba:	f043 0208 	orr.w	r2, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d012      	beq.n	80077f6 <HAL_UART_IRQHandler+0x18a>
 80077d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00c      	beq.n	80077f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8214 	beq.w	8007c2a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00d      	beq.n	800782a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800780e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007830:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d005      	beq.n	800784e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007846:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800784a:	2b00      	cmp	r3, #0
 800784c:	d04f      	beq.n	80078ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fe7f 	bl	8008552 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d141      	bne.n	80078e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800787c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800788e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800789a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1d9      	bne.n	8007862 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d013      	beq.n	80078de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ba:	4a13      	ldr	r2, [pc, #76]	; (8007908 <HAL_UART_IRQHandler+0x29c>)
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fb ff6a 	bl	800379c <HAL_DMA_Abort_IT>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d017      	beq.n	80078fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	e00f      	b.n	80078fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9b8 	bl	8007c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	e00b      	b.n	80078fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9b4 	bl	8007c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	e007      	b.n	80078fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9b0 	bl	8007c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80078fc:	e195      	b.n	8007c2a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fe:	bf00      	nop
    return;
 8007900:	e193      	b.n	8007c2a <HAL_UART_IRQHandler+0x5be>
 8007902:	bf00      	nop
 8007904:	04000120 	.word	0x04000120
 8007908:	0800861b 	.word	0x0800861b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007910:	2b01      	cmp	r3, #1
 8007912:	f040 814e 	bne.w	8007bb2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791a:	f003 0310 	and.w	r3, r3, #16
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8147 	beq.w	8007bb2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8140 	beq.w	8007bb2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2210      	movs	r2, #16
 8007938:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	f040 80b8 	bne.w	8007aba <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007956:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 8167 	beq.w	8007c2e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800796a:	429a      	cmp	r2, r3
 800796c:	f080 815f 	bcs.w	8007c2e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007976:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	f040 8086 	bne.w	8007a98 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	461a      	mov	r2, r3
 80079b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1da      	bne.n	800798c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079e8:	f023 0301 	bic.w	r3, r3, #1
 80079ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e1      	bne.n	80079d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e3      	bne.n	8007a12 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e4      	bne.n	8007a58 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fb fe44 	bl	8003720 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f8d8 	bl	8007c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab8:	e0b9      	b.n	8007c2e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80ab 	beq.w	8007c32 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80a6 	beq.w	8007c32 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b08:	647b      	str	r3, [r7, #68]	; 0x44
 8007b0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e4      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b40:	633a      	str	r2, [r7, #48]	; 0x30
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e3      	bne.n	8007b1c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f023 0310 	bic.w	r3, r3, #16
 8007b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	69b9      	ldr	r1, [r7, #24]
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	617b      	str	r3, [r7, #20]
   return(result);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e4      	bne.n	8007b68 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f85c 	bl	8007c68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bb0:	e03f      	b.n	8007c32 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <HAL_UART_IRQHandler+0x570>
 8007bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d008      	beq.n	8007bdc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fd60 	bl	800869a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bda:	e02d      	b.n	8007c38 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01c      	beq.n	8007c36 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
    }
    return;
 8007c04:	e017      	b.n	8007c36 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d012      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5cc>
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fd11 	bl	8008646 <UART_EndTransmit_IT>
    return;
 8007c24:	e008      	b.n	8007c38 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c26:	bf00      	nop
 8007c28:	e006      	b.n	8007c38 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007c2a:	bf00      	nop
 8007c2c:	e004      	b.n	8007c38 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c2e:	bf00      	nop
 8007c30:	e002      	b.n	8007c38 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007c32:	bf00      	nop
 8007c34:	e000      	b.n	8007c38 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007c36:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007c38:	37e8      	adds	r7, #232	; 0xe8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop

08007c40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c84:	b08a      	sub	sp, #40	; 0x28
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4ba4      	ldr	r3, [pc, #656]	; (8007f40 <UART_SetConfig+0x2c0>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a99      	ldr	r2, [pc, #612]	; (8007f44 <UART_SetConfig+0x2c4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a90      	ldr	r2, [pc, #576]	; (8007f48 <UART_SetConfig+0x2c8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d126      	bne.n	8007d58 <UART_SetConfig+0xd8>
 8007d0a:	4b90      	ldr	r3, [pc, #576]	; (8007f4c <UART_SetConfig+0x2cc>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d81b      	bhi.n	8007d50 <UART_SetConfig+0xd0>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0xa0>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d41 	.word	0x08007d41
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	2301      	movs	r3, #1
 8007d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d36:	e116      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d3e:	e112      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007d40:	2304      	movs	r3, #4
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d46:	e10e      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007d48:	2308      	movs	r3, #8
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d4e:	e10a      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007d50:	2310      	movs	r3, #16
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d56:	e106      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a7c      	ldr	r2, [pc, #496]	; (8007f50 <UART_SetConfig+0x2d0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d138      	bne.n	8007dd4 <UART_SetConfig+0x154>
 8007d62:	4b7a      	ldr	r3, [pc, #488]	; (8007f4c <UART_SetConfig+0x2cc>)
 8007d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d68:	f003 030c 	and.w	r3, r3, #12
 8007d6c:	2b0c      	cmp	r3, #12
 8007d6e:	d82d      	bhi.n	8007dcc <UART_SetConfig+0x14c>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <UART_SetConfig+0xf8>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007dad 	.word	0x08007dad
 8007d7c:	08007dcd 	.word	0x08007dcd
 8007d80:	08007dcd 	.word	0x08007dcd
 8007d84:	08007dcd 	.word	0x08007dcd
 8007d88:	08007dbd 	.word	0x08007dbd
 8007d8c:	08007dcd 	.word	0x08007dcd
 8007d90:	08007dcd 	.word	0x08007dcd
 8007d94:	08007dcd 	.word	0x08007dcd
 8007d98:	08007db5 	.word	0x08007db5
 8007d9c:	08007dcd 	.word	0x08007dcd
 8007da0:	08007dcd 	.word	0x08007dcd
 8007da4:	08007dcd 	.word	0x08007dcd
 8007da8:	08007dc5 	.word	0x08007dc5
 8007dac:	2300      	movs	r3, #0
 8007dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007db2:	e0d8      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007db4:	2302      	movs	r3, #2
 8007db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dba:	e0d4      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007dbc:	2304      	movs	r3, #4
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc2:	e0d0      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dca:	e0cc      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd2:	e0c8      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a5e      	ldr	r2, [pc, #376]	; (8007f54 <UART_SetConfig+0x2d4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d125      	bne.n	8007e2a <UART_SetConfig+0x1aa>
 8007dde:	4b5b      	ldr	r3, [pc, #364]	; (8007f4c <UART_SetConfig+0x2cc>)
 8007de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007de8:	2b30      	cmp	r3, #48	; 0x30
 8007dea:	d016      	beq.n	8007e1a <UART_SetConfig+0x19a>
 8007dec:	2b30      	cmp	r3, #48	; 0x30
 8007dee:	d818      	bhi.n	8007e22 <UART_SetConfig+0x1a2>
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d00a      	beq.n	8007e0a <UART_SetConfig+0x18a>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d814      	bhi.n	8007e22 <UART_SetConfig+0x1a2>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <UART_SetConfig+0x182>
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d008      	beq.n	8007e12 <UART_SetConfig+0x192>
 8007e00:	e00f      	b.n	8007e22 <UART_SetConfig+0x1a2>
 8007e02:	2300      	movs	r3, #0
 8007e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e08:	e0ad      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e10:	e0a9      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e12:	2304      	movs	r3, #4
 8007e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e18:	e0a5      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e20:	e0a1      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e22:	2310      	movs	r3, #16
 8007e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e28:	e09d      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a4a      	ldr	r2, [pc, #296]	; (8007f58 <UART_SetConfig+0x2d8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d125      	bne.n	8007e80 <UART_SetConfig+0x200>
 8007e34:	4b45      	ldr	r3, [pc, #276]	; (8007f4c <UART_SetConfig+0x2cc>)
 8007e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e40:	d016      	beq.n	8007e70 <UART_SetConfig+0x1f0>
 8007e42:	2bc0      	cmp	r3, #192	; 0xc0
 8007e44:	d818      	bhi.n	8007e78 <UART_SetConfig+0x1f8>
 8007e46:	2b80      	cmp	r3, #128	; 0x80
 8007e48:	d00a      	beq.n	8007e60 <UART_SetConfig+0x1e0>
 8007e4a:	2b80      	cmp	r3, #128	; 0x80
 8007e4c:	d814      	bhi.n	8007e78 <UART_SetConfig+0x1f8>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <UART_SetConfig+0x1d8>
 8007e52:	2b40      	cmp	r3, #64	; 0x40
 8007e54:	d008      	beq.n	8007e68 <UART_SetConfig+0x1e8>
 8007e56:	e00f      	b.n	8007e78 <UART_SetConfig+0x1f8>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e5e:	e082      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e60:	2302      	movs	r3, #2
 8007e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e66:	e07e      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e6e:	e07a      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e70:	2308      	movs	r3, #8
 8007e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e76:	e076      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e78:	2310      	movs	r3, #16
 8007e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e7e:	e072      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a35      	ldr	r2, [pc, #212]	; (8007f5c <UART_SetConfig+0x2dc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d12a      	bne.n	8007ee0 <UART_SetConfig+0x260>
 8007e8a:	4b30      	ldr	r3, [pc, #192]	; (8007f4c <UART_SetConfig+0x2cc>)
 8007e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e98:	d01a      	beq.n	8007ed0 <UART_SetConfig+0x250>
 8007e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e9e:	d81b      	bhi.n	8007ed8 <UART_SetConfig+0x258>
 8007ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ea4:	d00c      	beq.n	8007ec0 <UART_SetConfig+0x240>
 8007ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eaa:	d815      	bhi.n	8007ed8 <UART_SetConfig+0x258>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <UART_SetConfig+0x238>
 8007eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eb4:	d008      	beq.n	8007ec8 <UART_SetConfig+0x248>
 8007eb6:	e00f      	b.n	8007ed8 <UART_SetConfig+0x258>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ebe:	e052      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ec6:	e04e      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007ec8:	2304      	movs	r3, #4
 8007eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ece:	e04a      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ed6:	e046      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007ed8:	2310      	movs	r3, #16
 8007eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ede:	e042      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a17      	ldr	r2, [pc, #92]	; (8007f44 <UART_SetConfig+0x2c4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d13a      	bne.n	8007f60 <UART_SetConfig+0x2e0>
 8007eea:	4b18      	ldr	r3, [pc, #96]	; (8007f4c <UART_SetConfig+0x2cc>)
 8007eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ef8:	d01a      	beq.n	8007f30 <UART_SetConfig+0x2b0>
 8007efa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007efe:	d81b      	bhi.n	8007f38 <UART_SetConfig+0x2b8>
 8007f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f04:	d00c      	beq.n	8007f20 <UART_SetConfig+0x2a0>
 8007f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0a:	d815      	bhi.n	8007f38 <UART_SetConfig+0x2b8>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <UART_SetConfig+0x298>
 8007f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f14:	d008      	beq.n	8007f28 <UART_SetConfig+0x2a8>
 8007f16:	e00f      	b.n	8007f38 <UART_SetConfig+0x2b8>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f1e:	e022      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007f20:	2302      	movs	r3, #2
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f26:	e01e      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f2e:	e01a      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007f30:	2308      	movs	r3, #8
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f36:	e016      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f3e:	e012      	b.n	8007f66 <UART_SetConfig+0x2e6>
 8007f40:	efff69f3 	.word	0xefff69f3
 8007f44:	40008000 	.word	0x40008000
 8007f48:	40013800 	.word	0x40013800
 8007f4c:	40021000 	.word	0x40021000
 8007f50:	40004400 	.word	0x40004400
 8007f54:	40004800 	.word	0x40004800
 8007f58:	40004c00 	.word	0x40004c00
 8007f5c:	40005000 	.word	0x40005000
 8007f60:	2310      	movs	r3, #16
 8007f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a9f      	ldr	r2, [pc, #636]	; (80081e8 <UART_SetConfig+0x568>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d17a      	bne.n	8008066 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d824      	bhi.n	8007fc2 <UART_SetConfig+0x342>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <UART_SetConfig+0x300>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007fa5 	.word	0x08007fa5
 8007f84:	08007fc3 	.word	0x08007fc3
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fc3 	.word	0x08007fc3
 8007f90:	08007fb3 	.word	0x08007fb3
 8007f94:	08007fc3 	.word	0x08007fc3
 8007f98:	08007fc3 	.word	0x08007fc3
 8007f9c:	08007fc3 	.word	0x08007fc3
 8007fa0:	08007fbb 	.word	0x08007fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa4:	f7fd fb20 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8007fa8:	61f8      	str	r0, [r7, #28]
        break;
 8007faa:	e010      	b.n	8007fce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fac:	4b8f      	ldr	r3, [pc, #572]	; (80081ec <UART_SetConfig+0x56c>)
 8007fae:	61fb      	str	r3, [r7, #28]
        break;
 8007fb0:	e00d      	b.n	8007fce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb2:	f7fd fa81 	bl	80054b8 <HAL_RCC_GetSysClockFreq>
 8007fb6:	61f8      	str	r0, [r7, #28]
        break;
 8007fb8:	e009      	b.n	8007fce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fbe:	61fb      	str	r3, [r7, #28]
        break;
 8007fc0:	e005      	b.n	8007fce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 80fb 	beq.w	80081cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	4413      	add	r3, r2
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d305      	bcc.n	8007ff2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d903      	bls.n	8007ffa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ff8:	e0e8      	b.n	80081cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	461c      	mov	r4, r3
 8008000:	4615      	mov	r5, r2
 8008002:	f04f 0200 	mov.w	r2, #0
 8008006:	f04f 0300 	mov.w	r3, #0
 800800a:	022b      	lsls	r3, r5, #8
 800800c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008010:	0222      	lsls	r2, r4, #8
 8008012:	68f9      	ldr	r1, [r7, #12]
 8008014:	6849      	ldr	r1, [r1, #4]
 8008016:	0849      	lsrs	r1, r1, #1
 8008018:	2000      	movs	r0, #0
 800801a:	4688      	mov	r8, r1
 800801c:	4681      	mov	r9, r0
 800801e:	eb12 0a08 	adds.w	sl, r2, r8
 8008022:	eb43 0b09 	adc.w	fp, r3, r9
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008034:	4650      	mov	r0, sl
 8008036:	4659      	mov	r1, fp
 8008038:	f7f8 fe16 	bl	8000c68 <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4613      	mov	r3, r2
 8008042:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800804a:	d308      	bcc.n	800805e <UART_SetConfig+0x3de>
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008052:	d204      	bcs.n	800805e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	60da      	str	r2, [r3, #12]
 800805c:	e0b6      	b.n	80081cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008064:	e0b2      	b.n	80081cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800806e:	d15e      	bne.n	800812e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008074:	2b08      	cmp	r3, #8
 8008076:	d828      	bhi.n	80080ca <UART_SetConfig+0x44a>
 8008078:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <UART_SetConfig+0x400>)
 800807a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807e:	bf00      	nop
 8008080:	080080a5 	.word	0x080080a5
 8008084:	080080ad 	.word	0x080080ad
 8008088:	080080b5 	.word	0x080080b5
 800808c:	080080cb 	.word	0x080080cb
 8008090:	080080bb 	.word	0x080080bb
 8008094:	080080cb 	.word	0x080080cb
 8008098:	080080cb 	.word	0x080080cb
 800809c:	080080cb 	.word	0x080080cb
 80080a0:	080080c3 	.word	0x080080c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080a4:	f7fd faa0 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 80080a8:	61f8      	str	r0, [r7, #28]
        break;
 80080aa:	e014      	b.n	80080d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ac:	f7fd fab2 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 80080b0:	61f8      	str	r0, [r7, #28]
        break;
 80080b2:	e010      	b.n	80080d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080b4:	4b4d      	ldr	r3, [pc, #308]	; (80081ec <UART_SetConfig+0x56c>)
 80080b6:	61fb      	str	r3, [r7, #28]
        break;
 80080b8:	e00d      	b.n	80080d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ba:	f7fd f9fd 	bl	80054b8 <HAL_RCC_GetSysClockFreq>
 80080be:	61f8      	str	r0, [r7, #28]
        break;
 80080c0:	e009      	b.n	80080d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080c6:	61fb      	str	r3, [r7, #28]
        break;
 80080c8:	e005      	b.n	80080d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d077      	beq.n	80081cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	005a      	lsls	r2, r3, #1
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	085b      	lsrs	r3, r3, #1
 80080e6:	441a      	add	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	2b0f      	cmp	r3, #15
 80080f6:	d916      	bls.n	8008126 <UART_SetConfig+0x4a6>
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080fe:	d212      	bcs.n	8008126 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f023 030f 	bic.w	r3, r3, #15
 8008108:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	085b      	lsrs	r3, r3, #1
 800810e:	b29b      	uxth	r3, r3
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	b29a      	uxth	r2, r3
 8008116:	8afb      	ldrh	r3, [r7, #22]
 8008118:	4313      	orrs	r3, r2
 800811a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	8afa      	ldrh	r2, [r7, #22]
 8008122:	60da      	str	r2, [r3, #12]
 8008124:	e052      	b.n	80081cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800812c:	e04e      	b.n	80081cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800812e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008132:	2b08      	cmp	r3, #8
 8008134:	d827      	bhi.n	8008186 <UART_SetConfig+0x506>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <UART_SetConfig+0x4bc>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008161 	.word	0x08008161
 8008140:	08008169 	.word	0x08008169
 8008144:	08008171 	.word	0x08008171
 8008148:	08008187 	.word	0x08008187
 800814c:	08008177 	.word	0x08008177
 8008150:	08008187 	.word	0x08008187
 8008154:	08008187 	.word	0x08008187
 8008158:	08008187 	.word	0x08008187
 800815c:	0800817f 	.word	0x0800817f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008160:	f7fd fa42 	bl	80055e8 <HAL_RCC_GetPCLK1Freq>
 8008164:	61f8      	str	r0, [r7, #28]
        break;
 8008166:	e014      	b.n	8008192 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008168:	f7fd fa54 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 800816c:	61f8      	str	r0, [r7, #28]
        break;
 800816e:	e010      	b.n	8008192 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008170:	4b1e      	ldr	r3, [pc, #120]	; (80081ec <UART_SetConfig+0x56c>)
 8008172:	61fb      	str	r3, [r7, #28]
        break;
 8008174:	e00d      	b.n	8008192 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008176:	f7fd f99f 	bl	80054b8 <HAL_RCC_GetSysClockFreq>
 800817a:	61f8      	str	r0, [r7, #28]
        break;
 800817c:	e009      	b.n	8008192 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800817e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008182:	61fb      	str	r3, [r7, #28]
        break;
 8008184:	e005      	b.n	8008192 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008190:	bf00      	nop
    }

    if (pclk != 0U)
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d019      	beq.n	80081cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	085a      	lsrs	r2, r3, #1
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	441a      	add	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	2b0f      	cmp	r3, #15
 80081b0:	d909      	bls.n	80081c6 <UART_SetConfig+0x546>
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b8:	d205      	bcs.n	80081c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60da      	str	r2, [r3, #12]
 80081c4:	e002      	b.n	80081cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80081d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3728      	adds	r7, #40	; 0x28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081e6:	bf00      	nop
 80081e8:	40008000 	.word	0x40008000
 80081ec:	00f42400 	.word	0x00f42400

080081f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00a      	beq.n	800825e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00a      	beq.n	80082a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01a      	beq.n	8008306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ee:	d10a      	bne.n	8008306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	605a      	str	r2, [r3, #4]
  }
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b098      	sub	sp, #96	; 0x60
 8008338:	af02      	add	r7, sp, #8
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008344:	f7fb f822 	bl	800338c <HAL_GetTick>
 8008348:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b08      	cmp	r3, #8
 8008356:	d12e      	bne.n	80083b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008360:	2200      	movs	r2, #0
 8008362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f88c 	bl	8008484 <UART_WaitOnFlagUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d021      	beq.n	80083b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008386:	653b      	str	r3, [r7, #80]	; 0x50
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008390:	647b      	str	r3, [r7, #68]	; 0x44
 8008392:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e6      	bne.n	8008372 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2220      	movs	r2, #32
 80083a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e062      	b.n	800847c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d149      	bne.n	8008458 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083cc:	2200      	movs	r2, #0
 80083ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f856 	bl	8008484 <UART_WaitOnFlagUntilTimeout>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d03c      	beq.n	8008458 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	623b      	str	r3, [r7, #32]
   return(result);
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fc:	633b      	str	r3, [r7, #48]	; 0x30
 80083fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3308      	adds	r3, #8
 8008416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 0301 	bic.w	r3, r3, #1
 8008426:	64bb      	str	r3, [r7, #72]	; 0x48
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3308      	adds	r3, #8
 800842e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008430:	61fa      	str	r2, [r7, #28]
 8008432:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	69b9      	ldr	r1, [r7, #24]
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	617b      	str	r3, [r7, #20]
   return(result);
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e5      	bne.n	8008410 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e011      	b.n	800847c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3758      	adds	r7, #88	; 0x58
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	4613      	mov	r3, r2
 8008492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008494:	e049      	b.n	800852a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849c:	d045      	beq.n	800852a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800849e:	f7fa ff75 	bl	800338c <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d302      	bcc.n	80084b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e048      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0304 	and.w	r3, r3, #4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d031      	beq.n	800852a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	f003 0308 	and.w	r3, r3, #8
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d110      	bne.n	80084f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2208      	movs	r2, #8
 80084da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f838 	bl	8008552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2208      	movs	r2, #8
 80084e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e029      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008504:	d111      	bne.n	800852a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800850e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f81e 	bl	8008552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2220      	movs	r2, #32
 800851a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e00f      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69da      	ldr	r2, [r3, #28]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4013      	ands	r3, r2
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	429a      	cmp	r2, r3
 8008538:	bf0c      	ite	eq
 800853a:	2301      	moveq	r3, #1
 800853c:	2300      	movne	r3, #0
 800853e:	b2db      	uxtb	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	429a      	cmp	r2, r3
 8008546:	d0a6      	beq.n	8008496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008552:	b480      	push	{r7}
 8008554:	b095      	sub	sp, #84	; 0x54
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800856e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	461a      	mov	r2, r3
 8008576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008578:	643b      	str	r3, [r7, #64]	; 0x40
 800857a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800857e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e6      	bne.n	800855a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3308      	adds	r3, #8
 8008592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	61fb      	str	r3, [r7, #28]
   return(result);
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f023 0301 	bic.w	r3, r3, #1
 80085a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3308      	adds	r3, #8
 80085aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e5      	bne.n	800858c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d118      	bne.n	80085fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f023 0310 	bic.w	r3, r3, #16
 80085dc:	647b      	str	r3, [r7, #68]	; 0x44
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e6:	61bb      	str	r3, [r7, #24]
 80085e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	6979      	ldr	r1, [r7, #20]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	613b      	str	r3, [r7, #16]
   return(result);
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e6      	bne.n	80085c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800860e:	bf00      	nop
 8008610:	3754      	adds	r7, #84	; 0x54
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff fb0b 	bl	8007c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b088      	sub	sp, #32
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	60bb      	str	r3, [r7, #8]
   return(result);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6979      	ldr	r1, [r7, #20]
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	613b      	str	r3, [r7, #16]
   return(result);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e6      	bne.n	800864e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff fad7 	bl	8007c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008692:	bf00      	nop
 8008694:	3720      	adds	r7, #32
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <__NVIC_SetPriority>:
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	db0a      	blt.n	80086da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	490c      	ldr	r1, [pc, #48]	; (80086fc <__NVIC_SetPriority+0x4c>)
 80086ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ce:	0112      	lsls	r2, r2, #4
 80086d0:	b2d2      	uxtb	r2, r2
 80086d2:	440b      	add	r3, r1
 80086d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80086d8:	e00a      	b.n	80086f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	4908      	ldr	r1, [pc, #32]	; (8008700 <__NVIC_SetPriority+0x50>)
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	3b04      	subs	r3, #4
 80086e8:	0112      	lsls	r2, r2, #4
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	440b      	add	r3, r1
 80086ee:	761a      	strb	r2, [r3, #24]
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	e000e100 	.word	0xe000e100
 8008700:	e000ed00 	.word	0xe000ed00

08008704 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <SysTick_Handler+0x1c>)
 800870a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800870c:	f002 f9e0 	bl	800aad0 <xTaskGetSchedulerState>
 8008710:	4603      	mov	r3, r0
 8008712:	2b01      	cmp	r3, #1
 8008714:	d001      	beq.n	800871a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008716:	f003 f8c7 	bl	800b8a8 <xPortSysTickHandler>
  }
}
 800871a:	bf00      	nop
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	e000e010 	.word	0xe000e010

08008724 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008728:	2100      	movs	r1, #0
 800872a:	f06f 0004 	mvn.w	r0, #4
 800872e:	f7ff ffbf 	bl	80086b0 <__NVIC_SetPriority>
#endif
}
 8008732:	bf00      	nop
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800873e:	f3ef 8305 	mrs	r3, IPSR
 8008742:	603b      	str	r3, [r7, #0]
  return(result);
 8008744:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800874a:	f06f 0305 	mvn.w	r3, #5
 800874e:	607b      	str	r3, [r7, #4]
 8008750:	e00c      	b.n	800876c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008752:	4b0a      	ldr	r3, [pc, #40]	; (800877c <osKernelInitialize+0x44>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800875a:	4b08      	ldr	r3, [pc, #32]	; (800877c <osKernelInitialize+0x44>)
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008760:	2300      	movs	r3, #0
 8008762:	607b      	str	r3, [r7, #4]
 8008764:	e002      	b.n	800876c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008766:	f04f 33ff 	mov.w	r3, #4294967295
 800876a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800876c:	687b      	ldr	r3, [r7, #4]
}
 800876e:	4618      	mov	r0, r3
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20000b64 	.word	0x20000b64

08008780 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008786:	f3ef 8305 	mrs	r3, IPSR
 800878a:	603b      	str	r3, [r7, #0]
  return(result);
 800878c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008792:	f06f 0305 	mvn.w	r3, #5
 8008796:	607b      	str	r3, [r7, #4]
 8008798:	e010      	b.n	80087bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800879a:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <osKernelStart+0x48>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d109      	bne.n	80087b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087a2:	f7ff ffbf 	bl	8008724 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087a6:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <osKernelStart+0x48>)
 80087a8:	2202      	movs	r2, #2
 80087aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80087ac:	f001 fd38 	bl	800a220 <vTaskStartScheduler>
      stat = osOK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	607b      	str	r3, [r7, #4]
 80087b4:	e002      	b.n	80087bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087bc:	687b      	ldr	r3, [r7, #4]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000b64 	.word	0x20000b64

080087cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08e      	sub	sp, #56	; 0x38
 80087d0:	af04      	add	r7, sp, #16
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80087d8:	2300      	movs	r3, #0
 80087da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087dc:	f3ef 8305 	mrs	r3, IPSR
 80087e0:	617b      	str	r3, [r7, #20]
  return(result);
 80087e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d17e      	bne.n	80088e6 <osThreadNew+0x11a>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d07b      	beq.n	80088e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80087ee:	2380      	movs	r3, #128	; 0x80
 80087f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80087f2:	2318      	movs	r3, #24
 80087f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80087fa:	f04f 33ff 	mov.w	r3, #4294967295
 80087fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d045      	beq.n	8008892 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <osThreadNew+0x48>
        name = attr->name;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <osThreadNew+0x6e>
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	2b38      	cmp	r3, #56	; 0x38
 800882c:	d805      	bhi.n	800883a <osThreadNew+0x6e>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <osThreadNew+0x72>
        return (NULL);
 800883a:	2300      	movs	r3, #0
 800883c:	e054      	b.n	80088e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00e      	beq.n	8008874 <osThreadNew+0xa8>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	2b5b      	cmp	r3, #91	; 0x5b
 800885c:	d90a      	bls.n	8008874 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008862:	2b00      	cmp	r3, #0
 8008864:	d006      	beq.n	8008874 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <osThreadNew+0xa8>
        mem = 1;
 800886e:	2301      	movs	r3, #1
 8008870:	61bb      	str	r3, [r7, #24]
 8008872:	e010      	b.n	8008896 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10c      	bne.n	8008896 <osThreadNew+0xca>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d108      	bne.n	8008896 <osThreadNew+0xca>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d104      	bne.n	8008896 <osThreadNew+0xca>
          mem = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	61bb      	str	r3, [r7, #24]
 8008890:	e001      	b.n	8008896 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d110      	bne.n	80088be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088a4:	9202      	str	r2, [sp, #8]
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	6a3a      	ldr	r2, [r7, #32]
 80088b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f001 fade 	bl	8009e74 <xTaskCreateStatic>
 80088b8:	4603      	mov	r3, r0
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	e013      	b.n	80088e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d110      	bne.n	80088e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	f107 0310 	add.w	r3, r7, #16
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f001 fb29 	bl	8009f2e <xTaskCreate>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d001      	beq.n	80088e6 <osThreadNew+0x11a>
            hTask = NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088e6:	693b      	ldr	r3, [r7, #16]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3728      	adds	r7, #40	; 0x28
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088f8:	f3ef 8305 	mrs	r3, IPSR
 80088fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80088fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <osDelay+0x1c>
    stat = osErrorISR;
 8008904:	f06f 0305 	mvn.w	r3, #5
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	e007      	b.n	800891c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fc4e 	bl	800a1b8 <vTaskDelay>
    }
  }

  return (stat);
 800891c:	68fb      	ldr	r3, [r7, #12]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008926:	b580      	push	{r7, lr}
 8008928:	b088      	sub	sp, #32
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008932:	f3ef 8305 	mrs	r3, IPSR
 8008936:	60bb      	str	r3, [r7, #8]
  return(result);
 8008938:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800893a:	2b00      	cmp	r3, #0
 800893c:	d174      	bne.n	8008a28 <osMutexNew+0x102>
    if (attr != NULL) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <osMutexNew+0x26>
      type = attr->attr_bits;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	61bb      	str	r3, [r7, #24]
 800894a:	e001      	b.n	8008950 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <osMutexNew+0x3a>
      rmtx = 1U;
 800895a:	2301      	movs	r3, #1
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	e001      	b.n	8008964 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d15c      	bne.n	8008a28 <osMutexNew+0x102>
      mem = -1;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d015      	beq.n	80089a6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d006      	beq.n	8008990 <osMutexNew+0x6a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	2b4f      	cmp	r3, #79	; 0x4f
 8008988:	d902      	bls.n	8008990 <osMutexNew+0x6a>
          mem = 1;
 800898a:	2301      	movs	r3, #1
 800898c:	613b      	str	r3, [r7, #16]
 800898e:	e00c      	b.n	80089aa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d108      	bne.n	80089aa <osMutexNew+0x84>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <osMutexNew+0x84>
            mem = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	613b      	str	r3, [r7, #16]
 80089a4:	e001      	b.n	80089aa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d112      	bne.n	80089d6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d007      	beq.n	80089c6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	4619      	mov	r1, r3
 80089bc:	2004      	movs	r0, #4
 80089be:	f000 fc48 	bl	8009252 <xQueueCreateMutexStatic>
 80089c2:	61f8      	str	r0, [r7, #28]
 80089c4:	e016      	b.n	80089f4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	4619      	mov	r1, r3
 80089cc:	2001      	movs	r0, #1
 80089ce:	f000 fc40 	bl	8009252 <xQueueCreateMutexStatic>
 80089d2:	61f8      	str	r0, [r7, #28]
 80089d4:	e00e      	b.n	80089f4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d004      	beq.n	80089ec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80089e2:	2004      	movs	r0, #4
 80089e4:	f000 fc1d 	bl	8009222 <xQueueCreateMutex>
 80089e8:	61f8      	str	r0, [r7, #28]
 80089ea:	e003      	b.n	80089f4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80089ec:	2001      	movs	r0, #1
 80089ee:	f000 fc18 	bl	8009222 <xQueueCreateMutex>
 80089f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00c      	beq.n	8008a14 <osMutexNew+0xee>
        if (attr != NULL) {
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <osMutexNew+0xe2>
          name = attr->name;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e001      	b.n	8008a0c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008a0c:	68f9      	ldr	r1, [r7, #12]
 8008a0e:	69f8      	ldr	r0, [r7, #28]
 8008a10:	f001 f9d2 	bl	8009db8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d006      	beq.n	8008a28 <osMutexNew+0x102>
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008a28:	69fb      	ldr	r3, [r7, #28]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3720      	adds	r7, #32
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b086      	sub	sp, #24
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f023 0301 	bic.w	r3, r3, #1
 8008a42:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f003 0301 	and.w	r3, r3, #1
 8008a4a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a50:	f3ef 8305 	mrs	r3, IPSR
 8008a54:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a56:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008a5c:	f06f 0305 	mvn.w	r3, #5
 8008a60:	617b      	str	r3, [r7, #20]
 8008a62:	e02c      	b.n	8008abe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d103      	bne.n	8008a72 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008a6a:	f06f 0303 	mvn.w	r3, #3
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e025      	b.n	8008abe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d011      	beq.n	8008a9c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6938      	ldr	r0, [r7, #16]
 8008a7c:	f000 fc38 	bl	80092f0 <xQueueTakeMutexRecursive>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d01b      	beq.n	8008abe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008a8c:	f06f 0301 	mvn.w	r3, #1
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	e014      	b.n	8008abe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008a94:	f06f 0302 	mvn.w	r3, #2
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	e010      	b.n	8008abe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6938      	ldr	r0, [r7, #16]
 8008aa0:	f000 fed6 	bl	8009850 <xQueueSemaphoreTake>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d009      	beq.n	8008abe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008ab0:	f06f 0301 	mvn.w	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	e002      	b.n	8008abe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008ab8:	f06f 0302 	mvn.w	r3, #2
 8008abc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008abe:	697b      	ldr	r3, [r7, #20]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ae4:	f3ef 8305 	mrs	r3, IPSR
 8008ae8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008aea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d003      	beq.n	8008af8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008af0:	f06f 0305 	mvn.w	r3, #5
 8008af4:	617b      	str	r3, [r7, #20]
 8008af6:	e01f      	b.n	8008b38 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d103      	bne.n	8008b06 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008afe:	f06f 0303 	mvn.w	r3, #3
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e018      	b.n	8008b38 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008b0c:	6938      	ldr	r0, [r7, #16]
 8008b0e:	f000 fbbb 	bl	8009288 <xQueueGiveMutexRecursive>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d00f      	beq.n	8008b38 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008b18:	f06f 0302 	mvn.w	r3, #2
 8008b1c:	617b      	str	r3, [r7, #20]
 8008b1e:	e00b      	b.n	8008b38 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008b20:	2300      	movs	r3, #0
 8008b22:	2200      	movs	r2, #0
 8008b24:	2100      	movs	r1, #0
 8008b26:	6938      	ldr	r0, [r7, #16]
 8008b28:	f000 fc18 	bl	800935c <xQueueGenericSend>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d002      	beq.n	8008b38 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008b32:	f06f 0302 	mvn.w	r3, #2
 8008b36:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008b38:	697b      	ldr	r3, [r7, #20]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b08a      	sub	sp, #40	; 0x28
 8008b46:	af02      	add	r7, sp, #8
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b52:	f3ef 8305 	mrs	r3, IPSR
 8008b56:	613b      	str	r3, [r7, #16]
  return(result);
 8008b58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d15f      	bne.n	8008c1e <osMessageQueueNew+0xdc>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d05c      	beq.n	8008c1e <osMessageQueueNew+0xdc>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d059      	beq.n	8008c1e <osMessageQueueNew+0xdc>
    mem = -1;
 8008b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d029      	beq.n	8008bca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d012      	beq.n	8008ba4 <osMessageQueueNew+0x62>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	2b4f      	cmp	r3, #79	; 0x4f
 8008b84:	d90e      	bls.n	8008ba4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00a      	beq.n	8008ba4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	68b9      	ldr	r1, [r7, #8]
 8008b96:	fb01 f303 	mul.w	r3, r1, r3
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d302      	bcc.n	8008ba4 <osMessageQueueNew+0x62>
        mem = 1;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	e014      	b.n	8008bce <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d110      	bne.n	8008bce <osMessageQueueNew+0x8c>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10c      	bne.n	8008bce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d108      	bne.n	8008bce <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d104      	bne.n	8008bce <osMessageQueueNew+0x8c>
          mem = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	e001      	b.n	8008bce <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d10b      	bne.n	8008bec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	691a      	ldr	r2, [r3, #16]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	2100      	movs	r1, #0
 8008bde:	9100      	str	r1, [sp, #0]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fa2e 	bl	8009044 <xQueueGenericCreateStatic>
 8008be8:	61f8      	str	r0, [r7, #28]
 8008bea:	e008      	b.n	8008bfe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fa9c 	bl	8009134 <xQueueGenericCreate>
 8008bfc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00c      	beq.n	8008c1e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	e001      	b.n	8008c16 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c16:	6979      	ldr	r1, [r7, #20]
 8008c18:	69f8      	ldr	r0, [r7, #28]
 8008c1a:	f001 f8cd 	bl	8009db8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c1e:	69fb      	ldr	r3, [r7, #28]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3720      	adds	r7, #32
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	603b      	str	r3, [r7, #0]
 8008c34:	4613      	mov	r3, r2
 8008c36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c40:	f3ef 8305 	mrs	r3, IPSR
 8008c44:	617b      	str	r3, [r7, #20]
  return(result);
 8008c46:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d028      	beq.n	8008c9e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <osMessageQueuePut+0x36>
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <osMessageQueuePut+0x36>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008c5e:	f06f 0303 	mvn.w	r3, #3
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	e038      	b.n	8008cd8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008c6a:	f107 0210 	add.w	r2, r7, #16
 8008c6e:	2300      	movs	r3, #0
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	69b8      	ldr	r0, [r7, #24]
 8008c74:	f000 fc70 	bl	8009558 <xQueueGenericSendFromISR>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d003      	beq.n	8008c86 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008c7e:	f06f 0302 	mvn.w	r3, #2
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e028      	b.n	8008cd8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d025      	beq.n	8008cd8 <osMessageQueuePut+0xb0>
 8008c8c:	4b15      	ldr	r3, [pc, #84]	; (8008ce4 <osMessageQueuePut+0xbc>)
 8008c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	e01c      	b.n	8008cd8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <osMessageQueuePut+0x82>
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d103      	bne.n	8008cb2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008caa:	f06f 0303 	mvn.w	r3, #3
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e012      	b.n	8008cd8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	68b9      	ldr	r1, [r7, #8]
 8008cb8:	69b8      	ldr	r0, [r7, #24]
 8008cba:	f000 fb4f 	bl	800935c <xQueueGenericSend>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d009      	beq.n	8008cd8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008cca:	f06f 0301 	mvn.w	r3, #1
 8008cce:	61fb      	str	r3, [r7, #28]
 8008cd0:	e002      	b.n	8008cd8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008cd2:	f06f 0302 	mvn.w	r3, #2
 8008cd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008cd8:	69fb      	ldr	r3, [r7, #28]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3720      	adds	r7, #32
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	e000ed04 	.word	0xe000ed04

08008ce8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cfe:	f3ef 8305 	mrs	r3, IPSR
 8008d02:	617b      	str	r3, [r7, #20]
  return(result);
 8008d04:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d028      	beq.n	8008d5c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <osMessageQueueGet+0x34>
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <osMessageQueueGet+0x34>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008d1c:	f06f 0303 	mvn.w	r3, #3
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	e037      	b.n	8008d94 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d28:	f107 0310 	add.w	r3, r7, #16
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	68b9      	ldr	r1, [r7, #8]
 8008d30:	69b8      	ldr	r0, [r7, #24]
 8008d32:	f000 fe99 	bl	8009a68 <xQueueReceiveFromISR>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d003      	beq.n	8008d44 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008d3c:	f06f 0302 	mvn.w	r3, #2
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	e027      	b.n	8008d94 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d024      	beq.n	8008d94 <osMessageQueueGet+0xac>
 8008d4a:	4b15      	ldr	r3, [pc, #84]	; (8008da0 <osMessageQueueGet+0xb8>)
 8008d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	e01b      	b.n	8008d94 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <osMessageQueueGet+0x80>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d103      	bne.n	8008d70 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008d68:	f06f 0303 	mvn.w	r3, #3
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	e011      	b.n	8008d94 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	69b8      	ldr	r0, [r7, #24]
 8008d76:	f000 fc8b 	bl	8009690 <xQueueReceive>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d009      	beq.n	8008d94 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008d86:	f06f 0301 	mvn.w	r3, #1
 8008d8a:	61fb      	str	r3, [r7, #28]
 8008d8c:	e002      	b.n	8008d94 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008d8e:	f06f 0302 	mvn.w	r3, #2
 8008d92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008d94:	69fb      	ldr	r3, [r7, #28]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	e000ed04 	.word	0xe000ed04

08008da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4a07      	ldr	r2, [pc, #28]	; (8008dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	4a06      	ldr	r2, [pc, #24]	; (8008dd4 <vApplicationGetIdleTaskMemory+0x30>)
 8008dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2280      	movs	r2, #128	; 0x80
 8008dc0:	601a      	str	r2, [r3, #0]
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20000b68 	.word	0x20000b68
 8008dd4:	20000bc4 	.word	0x20000bc4

08008dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4a07      	ldr	r2, [pc, #28]	; (8008e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8008de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	4a06      	ldr	r2, [pc, #24]	; (8008e08 <vApplicationGetTimerTaskMemory+0x30>)
 8008dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008df6:	601a      	str	r2, [r3, #0]
}
 8008df8:	bf00      	nop
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	20000dc4 	.word	0x20000dc4
 8008e08:	20000e20 	.word	0x20000e20

08008e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f103 0208 	add.w	r2, r3, #8
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f103 0208 	add.w	r2, r3, #8
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f103 0208 	add.w	r2, r3, #8
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
}
 8008ea2:	bf00      	nop
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec4:	d103      	bne.n	8008ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e00c      	b.n	8008ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	e002      	b.n	8008edc <vListInsert+0x2e>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d2f6      	bcs.n	8008ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	601a      	str	r2, [r3, #0]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	6892      	ldr	r2, [r2, #8]
 8008f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	6852      	ldr	r2, [r2, #4]
 8008f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d103      	bne.n	8008f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	1e5a      	subs	r2, r3, #1
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f9e:	f002 fbf1 	bl	800b784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	441a      	add	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	68f9      	ldr	r1, [r7, #12]
 8008fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008fd4:	fb01 f303 	mul.w	r3, r1, r3
 8008fd8:	441a      	add	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	22ff      	movs	r2, #255	; 0xff
 8008fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	22ff      	movs	r2, #255	; 0xff
 8008fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d114      	bne.n	800901e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01a      	beq.n	8009032 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	3310      	adds	r3, #16
 8009000:	4618      	mov	r0, r3
 8009002:	f001 fb97 	bl	800a734 <xTaskRemoveFromEventList>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d012      	beq.n	8009032 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <xQueueGenericReset+0xcc>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	e009      	b.n	8009032 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3310      	adds	r3, #16
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fef2 	bl	8008e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff feed 	bl	8008e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009032:	f002 fbd7 	bl	800b7e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009036:	2301      	movs	r3, #1
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08e      	sub	sp, #56	; 0x38
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <xQueueGenericCreateStatic+0x52>
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <xQueueGenericCreateStatic+0x56>
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <xQueueGenericCreateStatic+0x58>
 800909a:	2300      	movs	r3, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	623b      	str	r3, [r7, #32]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <xQueueGenericCreateStatic+0x7e>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <xQueueGenericCreateStatic+0x82>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <xQueueGenericCreateStatic+0x84>
 80090c6:	2300      	movs	r3, #0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10a      	bne.n	80090e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	61fb      	str	r3, [r7, #28]
}
 80090de:	bf00      	nop
 80090e0:	e7fe      	b.n	80090e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80090e2:	2350      	movs	r3, #80	; 0x50
 80090e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2b50      	cmp	r3, #80	; 0x50
 80090ea:	d00a      	beq.n	8009102 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	61bb      	str	r3, [r7, #24]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009102:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00d      	beq.n	800912a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800911a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	4613      	mov	r3, r2
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 f83f 	bl	80091a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800912c:	4618      	mov	r0, r3
 800912e:	3730      	adds	r7, #48	; 0x30
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08a      	sub	sp, #40	; 0x28
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	613b      	str	r3, [r7, #16]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	fb02 f303 	mul.w	r3, r2, r3
 8009166:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	3350      	adds	r3, #80	; 0x50
 800916c:	4618      	mov	r0, r3
 800916e:	f002 fc2b 	bl	800b9c8 <pvPortMalloc>
 8009172:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d011      	beq.n	800919e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	3350      	adds	r3, #80	; 0x50
 8009182:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800918c:	79fa      	ldrb	r2, [r7, #7]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	4613      	mov	r3, r2
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f805 	bl	80091a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800919e:	69bb      	ldr	r3, [r7, #24]
	}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	e002      	b.n	80091ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091d6:	2101      	movs	r1, #1
 80091d8:	69b8      	ldr	r0, [r7, #24]
 80091da:	f7ff fecb 	bl	8008f74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	78fa      	ldrb	r2, [r7, #3]
 80091e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00e      	beq.n	800921a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800920e:	2300      	movs	r3, #0
 8009210:	2200      	movs	r2, #0
 8009212:	2100      	movs	r1, #0
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f8a1 	bl	800935c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	4603      	mov	r3, r0
 800922a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800922c:	2301      	movs	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	2300      	movs	r3, #0
 8009232:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	461a      	mov	r2, r3
 8009238:	6939      	ldr	r1, [r7, #16]
 800923a:	6978      	ldr	r0, [r7, #20]
 800923c:	f7ff ff7a 	bl	8009134 <xQueueGenericCreate>
 8009240:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff ffd3 	bl	80091ee <prvInitialiseMutex>

		return xNewQueue;
 8009248:	68fb      	ldr	r3, [r7, #12]
	}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009252:	b580      	push	{r7, lr}
 8009254:	b088      	sub	sp, #32
 8009256:	af02      	add	r7, sp, #8
 8009258:	4603      	mov	r3, r0
 800925a:	6039      	str	r1, [r7, #0]
 800925c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800925e:	2301      	movs	r3, #1
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	2300      	movs	r3, #0
 8009264:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009266:	79fb      	ldrb	r3, [r7, #7]
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2200      	movs	r2, #0
 800926e:	6939      	ldr	r1, [r7, #16]
 8009270:	6978      	ldr	r0, [r7, #20]
 8009272:	f7ff fee7 	bl	8009044 <xQueueGenericCreateStatic>
 8009276:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff ffb8 	bl	80091ee <prvInitialiseMutex>

		return xNewQueue;
 800927e:	68fb      	ldr	r3, [r7, #12]
	}
 8009280:	4618      	mov	r0, r3
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10a      	bne.n	80092b0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	60fb      	str	r3, [r7, #12]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	689c      	ldr	r4, [r3, #8]
 80092b4:	f001 fbfc 	bl	800aab0 <xTaskGetCurrentTaskHandle>
 80092b8:	4603      	mov	r3, r0
 80092ba:	429c      	cmp	r4, r3
 80092bc:	d111      	bne.n	80092e2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	1e5a      	subs	r2, r3, #1
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d105      	bne.n	80092dc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80092d0:	2300      	movs	r3, #0
 80092d2:	2200      	movs	r2, #0
 80092d4:	2100      	movs	r1, #0
 80092d6:	6938      	ldr	r0, [r7, #16]
 80092d8:	f000 f840 	bl	800935c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80092dc:	2301      	movs	r3, #1
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	e001      	b.n	80092e6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80092e6:	697b      	ldr	r3, [r7, #20]
	}
 80092e8:	4618      	mov	r0, r3
 80092ea:	371c      	adds	r7, #28
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd90      	pop	{r4, r7, pc}

080092f0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80092f0:	b590      	push	{r4, r7, lr}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	60fb      	str	r3, [r7, #12]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	689c      	ldr	r4, [r3, #8]
 800931e:	f001 fbc7 	bl	800aab0 <xTaskGetCurrentTaskHandle>
 8009322:	4603      	mov	r3, r0
 8009324:	429c      	cmp	r4, r3
 8009326:	d107      	bne.n	8009338 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	1c5a      	adds	r2, r3, #1
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009332:	2301      	movs	r3, #1
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e00c      	b.n	8009352 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	6938      	ldr	r0, [r7, #16]
 800933c:	f000 fa88 	bl	8009850 <xQueueSemaphoreTake>
 8009340:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009352:	697b      	ldr	r3, [r7, #20]
	}
 8009354:	4618      	mov	r0, r3
 8009356:	371c      	adds	r7, #28
 8009358:	46bd      	mov	sp, r7
 800935a:	bd90      	pop	{r4, r7, pc}

0800935c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08e      	sub	sp, #56	; 0x38
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800936a:	2300      	movs	r3, #0
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <xQueueGenericSend+0x32>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d103      	bne.n	800939c <xQueueGenericSend+0x40>
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <xQueueGenericSend+0x44>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <xQueueGenericSend+0x46>
 80093a0:	2300      	movs	r3, #0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <xQueueGenericSend+0x60>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d103      	bne.n	80093ca <xQueueGenericSend+0x6e>
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d101      	bne.n	80093ce <xQueueGenericSend+0x72>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <xQueueGenericSend+0x74>
 80093ce:	2300      	movs	r3, #0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10a      	bne.n	80093ea <xQueueGenericSend+0x8e>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	623b      	str	r3, [r7, #32]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093ea:	f001 fb71 	bl	800aad0 <xTaskGetSchedulerState>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <xQueueGenericSend+0x9e>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <xQueueGenericSend+0xa2>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <xQueueGenericSend+0xa4>
 80093fe:	2300      	movs	r3, #0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10a      	bne.n	800941a <xQueueGenericSend+0xbe>
	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	61fb      	str	r3, [r7, #28]
}
 8009416:	bf00      	nop
 8009418:	e7fe      	b.n	8009418 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800941a:	f002 f9b3 	bl	800b784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009426:	429a      	cmp	r2, r3
 8009428:	d302      	bcc.n	8009430 <xQueueGenericSend+0xd4>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d129      	bne.n	8009484 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009436:	f000 fbaf 	bl	8009b98 <prvCopyDataToQueue>
 800943a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	2b00      	cmp	r3, #0
 8009442:	d010      	beq.n	8009466 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	3324      	adds	r3, #36	; 0x24
 8009448:	4618      	mov	r0, r3
 800944a:	f001 f973 	bl	800a734 <xTaskRemoveFromEventList>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d013      	beq.n	800947c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009454:	4b3f      	ldr	r3, [pc, #252]	; (8009554 <xQueueGenericSend+0x1f8>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	e00a      	b.n	800947c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d007      	beq.n	800947c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800946c:	4b39      	ldr	r3, [pc, #228]	; (8009554 <xQueueGenericSend+0x1f8>)
 800946e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800947c:	f002 f9b2 	bl	800b7e4 <vPortExitCritical>
				return pdPASS;
 8009480:	2301      	movs	r3, #1
 8009482:	e063      	b.n	800954c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d103      	bne.n	8009492 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800948a:	f002 f9ab 	bl	800b7e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800948e:	2300      	movs	r3, #0
 8009490:	e05c      	b.n	800954c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009498:	f107 0314 	add.w	r3, r7, #20
 800949c:	4618      	mov	r0, r3
 800949e:	f001 f9ad 	bl	800a7fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094a2:	2301      	movs	r3, #1
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094a6:	f002 f99d 	bl	800b7e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094aa:	f000 ff1f 	bl	800a2ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094ae:	f002 f969 	bl	800b784 <vPortEnterCritical>
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094b8:	b25b      	sxtb	r3, r3
 80094ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094be:	d103      	bne.n	80094c8 <xQueueGenericSend+0x16c>
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094ce:	b25b      	sxtb	r3, r3
 80094d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d4:	d103      	bne.n	80094de <xQueueGenericSend+0x182>
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094de:	f002 f981 	bl	800b7e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094e2:	1d3a      	adds	r2, r7, #4
 80094e4:	f107 0314 	add.w	r3, r7, #20
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f001 f99c 	bl	800a828 <xTaskCheckForTimeOut>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d124      	bne.n	8009540 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f8:	f000 fc46 	bl	8009d88 <prvIsQueueFull>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d018      	beq.n	8009534 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	3310      	adds	r3, #16
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f001 f8c2 	bl	800a694 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009512:	f000 fbd1 	bl	8009cb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009516:	f000 fef7 	bl	800a308 <xTaskResumeAll>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	f47f af7c 	bne.w	800941a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009522:	4b0c      	ldr	r3, [pc, #48]	; (8009554 <xQueueGenericSend+0x1f8>)
 8009524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	e772      	b.n	800941a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009536:	f000 fbbf 	bl	8009cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800953a:	f000 fee5 	bl	800a308 <xTaskResumeAll>
 800953e:	e76c      	b.n	800941a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009542:	f000 fbb9 	bl	8009cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009546:	f000 fedf 	bl	800a308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800954a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800954c:	4618      	mov	r0, r3
 800954e:	3738      	adds	r7, #56	; 0x38
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	e000ed04 	.word	0xe000ed04

08009558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b090      	sub	sp, #64	; 0x40
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <xQueueGenericSendFromISR+0x3c>
 800958c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <xQueueGenericSendFromISR+0x40>
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <xQueueGenericSendFromISR+0x42>
 8009598:	2300      	movs	r3, #0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095b0:	bf00      	nop
 80095b2:	e7fe      	b.n	80095b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d103      	bne.n	80095c2 <xQueueGenericSendFromISR+0x6a>
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d101      	bne.n	80095c6 <xQueueGenericSendFromISR+0x6e>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <xQueueGenericSendFromISR+0x70>
 80095c6:	2300      	movs	r3, #0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10a      	bne.n	80095e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	623b      	str	r3, [r7, #32]
}
 80095de:	bf00      	nop
 80095e0:	e7fe      	b.n	80095e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095e2:	f002 f9b1 	bl	800b948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095e6:	f3ef 8211 	mrs	r2, BASEPRI
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	61fa      	str	r2, [r7, #28]
 80095fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009600:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960a:	429a      	cmp	r2, r3
 800960c:	d302      	bcc.n	8009614 <xQueueGenericSendFromISR+0xbc>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	2b02      	cmp	r3, #2
 8009612:	d12f      	bne.n	8009674 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800961a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009622:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	68b9      	ldr	r1, [r7, #8]
 8009628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800962a:	f000 fab5 	bl	8009b98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800962e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009636:	d112      	bne.n	800965e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	2b00      	cmp	r3, #0
 800963e:	d016      	beq.n	800966e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	3324      	adds	r3, #36	; 0x24
 8009644:	4618      	mov	r0, r3
 8009646:	f001 f875 	bl	800a734 <xTaskRemoveFromEventList>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00e      	beq.n	800966e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	e007      	b.n	800966e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800965e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009662:	3301      	adds	r3, #1
 8009664:	b2db      	uxtb	r3, r3
 8009666:	b25a      	sxtb	r2, r3
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800966e:	2301      	movs	r3, #1
 8009670:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009672:	e001      	b.n	8009678 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009674:	2300      	movs	r3, #0
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009682:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009686:	4618      	mov	r0, r3
 8009688:	3740      	adds	r7, #64	; 0x40
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08c      	sub	sp, #48	; 0x30
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800969c:	2300      	movs	r3, #0
 800969e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <xQueueReceive+0x30>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	623b      	str	r3, [r7, #32]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d103      	bne.n	80096ce <xQueueReceive+0x3e>
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <xQueueReceive+0x42>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e000      	b.n	80096d4 <xQueueReceive+0x44>
 80096d2:	2300      	movs	r3, #0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <xQueueReceive+0x5e>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	61fb      	str	r3, [r7, #28]
}
 80096ea:	bf00      	nop
 80096ec:	e7fe      	b.n	80096ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096ee:	f001 f9ef 	bl	800aad0 <xTaskGetSchedulerState>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d102      	bne.n	80096fe <xQueueReceive+0x6e>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <xQueueReceive+0x72>
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <xQueueReceive+0x74>
 8009702:	2300      	movs	r3, #0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10a      	bne.n	800971e <xQueueReceive+0x8e>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	61bb      	str	r3, [r7, #24]
}
 800971a:	bf00      	nop
 800971c:	e7fe      	b.n	800971c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800971e:	f002 f831 	bl	800b784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	2b00      	cmp	r3, #0
 800972c:	d01f      	beq.n	800976e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800972e:	68b9      	ldr	r1, [r7, #8]
 8009730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009732:	f000 fa9b 	bl	8009c6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	1e5a      	subs	r2, r3, #1
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00f      	beq.n	8009766 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	3310      	adds	r3, #16
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fff2 	bl	800a734 <xTaskRemoveFromEventList>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d007      	beq.n	8009766 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009756:	4b3d      	ldr	r3, [pc, #244]	; (800984c <xQueueReceive+0x1bc>)
 8009758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009766:	f002 f83d 	bl	800b7e4 <vPortExitCritical>
				return pdPASS;
 800976a:	2301      	movs	r3, #1
 800976c:	e069      	b.n	8009842 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d103      	bne.n	800977c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009774:	f002 f836 	bl	800b7e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009778:	2300      	movs	r3, #0
 800977a:	e062      	b.n	8009842 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800977c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d106      	bne.n	8009790 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009782:	f107 0310 	add.w	r3, r7, #16
 8009786:	4618      	mov	r0, r3
 8009788:	f001 f838 	bl	800a7fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800978c:	2301      	movs	r3, #1
 800978e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009790:	f002 f828 	bl	800b7e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009794:	f000 fdaa 	bl	800a2ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009798:	f001 fff4 	bl	800b784 <vPortEnterCritical>
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097a2:	b25b      	sxtb	r3, r3
 80097a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a8:	d103      	bne.n	80097b2 <xQueueReceive+0x122>
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097b8:	b25b      	sxtb	r3, r3
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d103      	bne.n	80097c8 <xQueueReceive+0x138>
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097c8:	f002 f80c 	bl	800b7e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097cc:	1d3a      	adds	r2, r7, #4
 80097ce:	f107 0310 	add.w	r3, r7, #16
 80097d2:	4611      	mov	r1, r2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 f827 	bl	800a828 <xTaskCheckForTimeOut>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d123      	bne.n	8009828 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e2:	f000 fabb 	bl	8009d5c <prvIsQueueEmpty>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d017      	beq.n	800981c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	3324      	adds	r3, #36	; 0x24
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	4611      	mov	r1, r2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 ff4d 	bl	800a694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097fc:	f000 fa5c 	bl	8009cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009800:	f000 fd82 	bl	800a308 <xTaskResumeAll>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d189      	bne.n	800971e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800980a:	4b10      	ldr	r3, [pc, #64]	; (800984c <xQueueReceive+0x1bc>)
 800980c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	e780      	b.n	800971e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800981c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800981e:	f000 fa4b 	bl	8009cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009822:	f000 fd71 	bl	800a308 <xTaskResumeAll>
 8009826:	e77a      	b.n	800971e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800982a:	f000 fa45 	bl	8009cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800982e:	f000 fd6b 	bl	800a308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009834:	f000 fa92 	bl	8009d5c <prvIsQueueEmpty>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	f43f af6f 	beq.w	800971e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009842:	4618      	mov	r0, r3
 8009844:	3730      	adds	r7, #48	; 0x30
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08e      	sub	sp, #56	; 0x38
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800985a:	2300      	movs	r3, #0
 800985c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009862:	2300      	movs	r3, #0
 8009864:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	623b      	str	r3, [r7, #32]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	61fb      	str	r3, [r7, #28]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098a0:	f001 f916 	bl	800aad0 <xTaskGetSchedulerState>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <xQueueSemaphoreTake+0x60>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <xQueueSemaphoreTake+0x64>
 80098b0:	2301      	movs	r3, #1
 80098b2:	e000      	b.n	80098b6 <xQueueSemaphoreTake+0x66>
 80098b4:	2300      	movs	r3, #0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	61bb      	str	r3, [r7, #24]
}
 80098cc:	bf00      	nop
 80098ce:	e7fe      	b.n	80098ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098d0:	f001 ff58 	bl	800b784 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80098d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d024      	beq.n	800992a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	1e5a      	subs	r2, r3, #1
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d104      	bne.n	80098fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80098f0:	f001 fa64 	bl	800adbc <pvTaskIncrementMutexHeldCount>
 80098f4:	4602      	mov	r2, r0
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00f      	beq.n	8009922 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009904:	3310      	adds	r3, #16
 8009906:	4618      	mov	r0, r3
 8009908:	f000 ff14 	bl	800a734 <xTaskRemoveFromEventList>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d007      	beq.n	8009922 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009912:	4b54      	ldr	r3, [pc, #336]	; (8009a64 <xQueueSemaphoreTake+0x214>)
 8009914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009922:	f001 ff5f 	bl	800b7e4 <vPortExitCritical>
				return pdPASS;
 8009926:	2301      	movs	r3, #1
 8009928:	e097      	b.n	8009a5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d111      	bne.n	8009954 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00a      	beq.n	800994c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	617b      	str	r3, [r7, #20]
}
 8009948:	bf00      	nop
 800994a:	e7fe      	b.n	800994a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800994c:	f001 ff4a 	bl	800b7e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009950:	2300      	movs	r3, #0
 8009952:	e082      	b.n	8009a5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800995a:	f107 030c 	add.w	r3, r7, #12
 800995e:	4618      	mov	r0, r3
 8009960:	f000 ff4c 	bl	800a7fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009964:	2301      	movs	r3, #1
 8009966:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009968:	f001 ff3c 	bl	800b7e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800996c:	f000 fcbe 	bl	800a2ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009970:	f001 ff08 	bl	800b784 <vPortEnterCritical>
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800997a:	b25b      	sxtb	r3, r3
 800997c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009980:	d103      	bne.n	800998a <xQueueSemaphoreTake+0x13a>
 8009982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009990:	b25b      	sxtb	r3, r3
 8009992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009996:	d103      	bne.n	80099a0 <xQueueSemaphoreTake+0x150>
 8009998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099a0:	f001 ff20 	bl	800b7e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099a4:	463a      	mov	r2, r7
 80099a6:	f107 030c 	add.w	r3, r7, #12
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 ff3b 	bl	800a828 <xTaskCheckForTimeOut>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d132      	bne.n	8009a1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099ba:	f000 f9cf 	bl	8009d5c <prvIsQueueEmpty>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d026      	beq.n	8009a12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d109      	bne.n	80099e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80099cc:	f001 feda 	bl	800b784 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 f899 	bl	800ab0c <xTaskPriorityInherit>
 80099da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80099dc:	f001 ff02 	bl	800b7e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e2:	3324      	adds	r3, #36	; 0x24
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 fe53 	bl	800a694 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099f0:	f000 f962 	bl	8009cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099f4:	f000 fc88 	bl	800a308 <xTaskResumeAll>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f47f af68 	bne.w	80098d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009a00:	4b18      	ldr	r3, [pc, #96]	; (8009a64 <xQueueSemaphoreTake+0x214>)
 8009a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	e75e      	b.n	80098d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a14:	f000 f950 	bl	8009cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a18:	f000 fc76 	bl	800a308 <xTaskResumeAll>
 8009a1c:	e758      	b.n	80098d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a20:	f000 f94a 	bl	8009cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a24:	f000 fc70 	bl	800a308 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a2a:	f000 f997 	bl	8009d5c <prvIsQueueEmpty>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f43f af4d 	beq.w	80098d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00d      	beq.n	8009a58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009a3c:	f001 fea2 	bl	800b784 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a42:	f000 f891 	bl	8009b68 <prvGetDisinheritPriorityAfterTimeout>
 8009a46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 f932 	bl	800acb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a54:	f001 fec6 	bl	800b7e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3738      	adds	r7, #56	; 0x38
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08e      	sub	sp, #56	; 0x38
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	623b      	str	r3, [r7, #32]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d103      	bne.n	8009aa2 <xQueueReceiveFromISR+0x3a>
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <xQueueReceiveFromISR+0x3e>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <xQueueReceiveFromISR+0x40>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	61fb      	str	r3, [r7, #28]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ac2:	f001 ff41 	bl	800b948 <vPortValidateInterruptPriority>
	__asm volatile
 8009ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	61ba      	str	r2, [r7, #24]
 8009adc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009ade:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d02f      	beq.n	8009b4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009af8:	68b9      	ldr	r1, [r7, #8]
 8009afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009afc:	f000 f8b6 	bl	8009c6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	1e5a      	subs	r2, r3, #1
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b10:	d112      	bne.n	8009b38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d016      	beq.n	8009b48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	3310      	adds	r3, #16
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fe08 	bl	800a734 <xTaskRemoveFromEventList>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00e      	beq.n	8009b48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00b      	beq.n	8009b48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	e007      	b.n	8009b48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	b25a      	sxtb	r2, r3
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b4c:	e001      	b.n	8009b52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f383 8811 	msr	BASEPRI, r3
}
 8009b5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3738      	adds	r7, #56	; 0x38
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d006      	beq.n	8009b86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	e001      	b.n	8009b8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
	}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10d      	bne.n	8009bd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d14d      	bne.n	8009c5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 f80a 	bl	800abdc <xTaskPriorityDisinherit>
 8009bc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	609a      	str	r2, [r3, #8]
 8009bd0:	e043      	b.n	8009c5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d119      	bne.n	8009c0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6858      	ldr	r0, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be0:	461a      	mov	r2, r3
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	f002 fed7 	bl	800c996 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	441a      	add	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d32b      	bcc.n	8009c5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	605a      	str	r2, [r3, #4]
 8009c0a:	e026      	b.n	8009c5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	68d8      	ldr	r0, [r3, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	461a      	mov	r2, r3
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	f002 febd 	bl	800c996 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c24:	425b      	negs	r3, r3
 8009c26:	441a      	add	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	68da      	ldr	r2, [r3, #12]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d207      	bcs.n	8009c48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	425b      	negs	r3, r3
 8009c42:	441a      	add	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d105      	bne.n	8009c5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c62:	697b      	ldr	r3, [r7, #20]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d018      	beq.n	8009cb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	441a      	add	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d303      	bcc.n	8009ca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68d9      	ldr	r1, [r3, #12]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6838      	ldr	r0, [r7, #0]
 8009cac:	f002 fe73 	bl	800c996 <memcpy>
	}
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009cc0:	f001 fd60 	bl	800b784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ccc:	e011      	b.n	8009cf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d012      	beq.n	8009cfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3324      	adds	r3, #36	; 0x24
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fd2a 	bl	800a734 <xTaskRemoveFromEventList>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ce6:	f000 fe01 	bl	800a8ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	dce9      	bgt.n	8009cce <prvUnlockQueue+0x16>
 8009cfa:	e000      	b.n	8009cfe <prvUnlockQueue+0x46>
					break;
 8009cfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	22ff      	movs	r2, #255	; 0xff
 8009d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d06:	f001 fd6d 	bl	800b7e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d0a:	f001 fd3b 	bl	800b784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d16:	e011      	b.n	8009d3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d012      	beq.n	8009d46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3310      	adds	r3, #16
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fd05 	bl	800a734 <xTaskRemoveFromEventList>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d30:	f000 fddc 	bl	800a8ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	dce9      	bgt.n	8009d18 <prvUnlockQueue+0x60>
 8009d44:	e000      	b.n	8009d48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	22ff      	movs	r2, #255	; 0xff
 8009d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d50:	f001 fd48 	bl	800b7e4 <vPortExitCritical>
}
 8009d54:	bf00      	nop
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d64:	f001 fd0e 	bl	800b784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d102      	bne.n	8009d76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d70:	2301      	movs	r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	e001      	b.n	8009d7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d7a:	f001 fd33 	bl	800b7e4 <vPortExitCritical>

	return xReturn;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d90:	f001 fcf8 	bl	800b784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d102      	bne.n	8009da6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009da0:	2301      	movs	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e001      	b.n	8009daa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009daa:	f001 fd1b 	bl	800b7e4 <vPortExitCritical>

	return xReturn;
 8009dae:	68fb      	ldr	r3, [r7, #12]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e014      	b.n	8009df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009dc8:	4a0f      	ldr	r2, [pc, #60]	; (8009e08 <vQueueAddToRegistry+0x50>)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10b      	bne.n	8009dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009dd4:	490c      	ldr	r1, [pc, #48]	; (8009e08 <vQueueAddToRegistry+0x50>)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009dde:	4a0a      	ldr	r2, [pc, #40]	; (8009e08 <vQueueAddToRegistry+0x50>)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	4413      	add	r3, r2
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009dea:	e006      	b.n	8009dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b07      	cmp	r3, #7
 8009df6:	d9e7      	bls.n	8009dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20001220 	.word	0x20001220

08009e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e1c:	f001 fcb2 	bl	800b784 <vPortEnterCritical>
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e26:	b25b      	sxtb	r3, r3
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2c:	d103      	bne.n	8009e36 <vQueueWaitForMessageRestricted+0x2a>
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e3c:	b25b      	sxtb	r3, r3
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d103      	bne.n	8009e4c <vQueueWaitForMessageRestricted+0x40>
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e4c:	f001 fcca 	bl	800b7e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	3324      	adds	r3, #36	; 0x24
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	68b9      	ldr	r1, [r7, #8]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fc3b 	bl	800a6dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e66:	6978      	ldr	r0, [r7, #20]
 8009e68:	f7ff ff26 	bl	8009cb8 <prvUnlockQueue>
	}
 8009e6c:	bf00      	nop
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08e      	sub	sp, #56	; 0x38
 8009e78:	af04      	add	r7, sp, #16
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	623b      	str	r3, [r7, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	e7fe      	b.n	8009e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10a      	bne.n	8009eba <xTaskCreateStatic+0x46>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	61fb      	str	r3, [r7, #28]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009eba:	235c      	movs	r3, #92	; 0x5c
 8009ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8009ec2:	d00a      	beq.n	8009eda <xTaskCreateStatic+0x66>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	61bb      	str	r3, [r7, #24]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009eda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d01e      	beq.n	8009f20 <xTaskCreateStatic+0xac>
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01b      	beq.n	8009f20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009efa:	2300      	movs	r3, #0
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	9302      	str	r3, [sp, #8]
 8009f02:	f107 0314 	add.w	r3, r7, #20
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	68b9      	ldr	r1, [r7, #8]
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 f850 	bl	8009fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f1a:	f000 f8dd 	bl	800a0d8 <prvAddNewTaskToReadyList>
 8009f1e:	e001      	b.n	8009f24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f24:	697b      	ldr	r3, [r7, #20]
	}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3728      	adds	r7, #40	; 0x28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b08c      	sub	sp, #48	; 0x30
 8009f32:	af04      	add	r7, sp, #16
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	603b      	str	r3, [r7, #0]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f001 fd40 	bl	800b9c8 <pvPortMalloc>
 8009f48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00e      	beq.n	8009f6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f50:	205c      	movs	r0, #92	; 0x5c
 8009f52:	f001 fd39 	bl	800b9c8 <pvPortMalloc>
 8009f56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	631a      	str	r2, [r3, #48]	; 0x30
 8009f64:	e005      	b.n	8009f72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f66:	6978      	ldr	r0, [r7, #20]
 8009f68:	f001 fdfa 	bl	800bb60 <vPortFree>
 8009f6c:	e001      	b.n	8009f72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d017      	beq.n	8009fa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f80:	88fa      	ldrh	r2, [r7, #6]
 8009f82:	2300      	movs	r3, #0
 8009f84:	9303      	str	r3, [sp, #12]
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	9302      	str	r3, [sp, #8]
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68b9      	ldr	r1, [r7, #8]
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 f80e 	bl	8009fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f9c:	69f8      	ldr	r0, [r7, #28]
 8009f9e:	f000 f89b 	bl	800a0d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	61bb      	str	r3, [r7, #24]
 8009fa6:	e002      	b.n	8009fae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fae:	69bb      	ldr	r3, [r7, #24]
	}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	461a      	mov	r2, r3
 8009fd0:	21a5      	movs	r1, #165	; 0xa5
 8009fd2:	f002 fc60 	bl	800c896 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	617b      	str	r3, [r7, #20]
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01f      	beq.n	800a056 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a016:	2300      	movs	r3, #0
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	e012      	b.n	800a042 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	4413      	add	r3, r2
 800a022:	7819      	ldrb	r1, [r3, #0]
 800a024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	4413      	add	r3, r2
 800a02a:	3334      	adds	r3, #52	; 0x34
 800a02c:	460a      	mov	r2, r1
 800a02e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	4413      	add	r3, r2
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d006      	beq.n	800a04a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	3301      	adds	r3, #1
 800a040:	61fb      	str	r3, [r7, #28]
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	2b0f      	cmp	r3, #15
 800a046:	d9e9      	bls.n	800a01c <prvInitialiseNewTask+0x64>
 800a048:	e000      	b.n	800a04c <prvInitialiseNewTask+0x94>
			{
				break;
 800a04a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a054:	e003      	b.n	800a05e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	2b37      	cmp	r3, #55	; 0x37
 800a062:	d901      	bls.n	800a068 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a064:	2337      	movs	r3, #55	; 0x37
 800a066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a06c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	2200      	movs	r2, #0
 800a078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	3304      	adds	r3, #4
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe fee4 	bl	8008e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	3318      	adds	r3, #24
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe fedf 	bl	8008e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	68f9      	ldr	r1, [r7, #12]
 800a0b6:	69b8      	ldr	r0, [r7, #24]
 800a0b8:	f001 fa36 	bl	800b528 <pxPortInitialiseStack>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ce:	bf00      	nop
 800a0d0:	3720      	adds	r7, #32
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0e0:	f001 fb50 	bl	800b784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0e4:	4b2d      	ldr	r3, [pc, #180]	; (800a19c <prvAddNewTaskToReadyList+0xc4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	4a2c      	ldr	r2, [pc, #176]	; (800a19c <prvAddNewTaskToReadyList+0xc4>)
 800a0ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0ee:	4b2c      	ldr	r3, [pc, #176]	; (800a1a0 <prvAddNewTaskToReadyList+0xc8>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d109      	bne.n	800a10a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0f6:	4a2a      	ldr	r2, [pc, #168]	; (800a1a0 <prvAddNewTaskToReadyList+0xc8>)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0fc:	4b27      	ldr	r3, [pc, #156]	; (800a19c <prvAddNewTaskToReadyList+0xc4>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d110      	bne.n	800a126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a104:	f000 fc16 	bl	800a934 <prvInitialiseTaskLists>
 800a108:	e00d      	b.n	800a126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a10a:	4b26      	ldr	r3, [pc, #152]	; (800a1a4 <prvAddNewTaskToReadyList+0xcc>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a112:	4b23      	ldr	r3, [pc, #140]	; (800a1a0 <prvAddNewTaskToReadyList+0xc8>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d802      	bhi.n	800a126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a120:	4a1f      	ldr	r2, [pc, #124]	; (800a1a0 <prvAddNewTaskToReadyList+0xc8>)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a126:	4b20      	ldr	r3, [pc, #128]	; (800a1a8 <prvAddNewTaskToReadyList+0xd0>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3301      	adds	r3, #1
 800a12c:	4a1e      	ldr	r2, [pc, #120]	; (800a1a8 <prvAddNewTaskToReadyList+0xd0>)
 800a12e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a130:	4b1d      	ldr	r3, [pc, #116]	; (800a1a8 <prvAddNewTaskToReadyList+0xd0>)
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ac <prvAddNewTaskToReadyList+0xd4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d903      	bls.n	800a14c <prvAddNewTaskToReadyList+0x74>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	4a18      	ldr	r2, [pc, #96]	; (800a1ac <prvAddNewTaskToReadyList+0xd4>)
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4a15      	ldr	r2, [pc, #84]	; (800a1b0 <prvAddNewTaskToReadyList+0xd8>)
 800a15a:	441a      	add	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7fe fe7f 	bl	8008e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a168:	f001 fb3c 	bl	800b7e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <prvAddNewTaskToReadyList+0xcc>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00e      	beq.n	800a192 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a174:	4b0a      	ldr	r3, [pc, #40]	; (800a1a0 <prvAddNewTaskToReadyList+0xc8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	429a      	cmp	r2, r3
 800a180:	d207      	bcs.n	800a192 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a182:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <prvAddNewTaskToReadyList+0xdc>)
 800a184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20001734 	.word	0x20001734
 800a1a0:	20001260 	.word	0x20001260
 800a1a4:	20001740 	.word	0x20001740
 800a1a8:	20001750 	.word	0x20001750
 800a1ac:	2000173c 	.word	0x2000173c
 800a1b0:	20001264 	.word	0x20001264
 800a1b4:	e000ed04 	.word	0xe000ed04

0800a1b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d017      	beq.n	800a1fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ca:	4b13      	ldr	r3, [pc, #76]	; (800a218 <vTaskDelay+0x60>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <vTaskDelay+0x30>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	60bb      	str	r3, [r7, #8]
}
 800a1e4:	bf00      	nop
 800a1e6:	e7fe      	b.n	800a1e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1e8:	f000 f880 	bl	800a2ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fdf8 	bl	800ade4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1f4:	f000 f888 	bl	800a308 <xTaskResumeAll>
 800a1f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d107      	bne.n	800a210 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a200:	4b06      	ldr	r3, [pc, #24]	; (800a21c <vTaskDelay+0x64>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a210:	bf00      	nop
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	2000175c 	.word	0x2000175c
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08a      	sub	sp, #40	; 0x28
 800a224:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a22e:	463a      	mov	r2, r7
 800a230:	1d39      	adds	r1, r7, #4
 800a232:	f107 0308 	add.w	r3, r7, #8
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fdb4 	bl	8008da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	9202      	str	r2, [sp, #8]
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	2300      	movs	r3, #0
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	2300      	movs	r3, #0
 800a24c:	460a      	mov	r2, r1
 800a24e:	4921      	ldr	r1, [pc, #132]	; (800a2d4 <vTaskStartScheduler+0xb4>)
 800a250:	4821      	ldr	r0, [pc, #132]	; (800a2d8 <vTaskStartScheduler+0xb8>)
 800a252:	f7ff fe0f 	bl	8009e74 <xTaskCreateStatic>
 800a256:	4603      	mov	r3, r0
 800a258:	4a20      	ldr	r2, [pc, #128]	; (800a2dc <vTaskStartScheduler+0xbc>)
 800a25a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a25c:	4b1f      	ldr	r3, [pc, #124]	; (800a2dc <vTaskStartScheduler+0xbc>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a264:	2301      	movs	r3, #1
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	e001      	b.n	800a26e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d102      	bne.n	800a27a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a274:	f000 fe0a 	bl	800ae8c <xTimerCreateTimerTask>
 800a278:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d116      	bne.n	800a2ae <vTaskStartScheduler+0x8e>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	613b      	str	r3, [r7, #16]
}
 800a292:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a294:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <vTaskStartScheduler+0xc0>)
 800a296:	f04f 32ff 	mov.w	r2, #4294967295
 800a29a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a29c:	4b11      	ldr	r3, [pc, #68]	; (800a2e4 <vTaskStartScheduler+0xc4>)
 800a29e:	2201      	movs	r2, #1
 800a2a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2a2:	4b11      	ldr	r3, [pc, #68]	; (800a2e8 <vTaskStartScheduler+0xc8>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2a8:	f001 f9ca 	bl	800b640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2ac:	e00e      	b.n	800a2cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b4:	d10a      	bne.n	800a2cc <vTaskStartScheduler+0xac>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	60fb      	str	r3, [r7, #12]
}
 800a2c8:	bf00      	nop
 800a2ca:	e7fe      	b.n	800a2ca <vTaskStartScheduler+0xaa>
}
 800a2cc:	bf00      	nop
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	0800e828 	.word	0x0800e828
 800a2d8:	0800a905 	.word	0x0800a905
 800a2dc:	20001758 	.word	0x20001758
 800a2e0:	20001754 	.word	0x20001754
 800a2e4:	20001740 	.word	0x20001740
 800a2e8:	20001738 	.word	0x20001738

0800a2ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2f0:	4b04      	ldr	r3, [pc, #16]	; (800a304 <vTaskSuspendAll+0x18>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	4a03      	ldr	r2, [pc, #12]	; (800a304 <vTaskSuspendAll+0x18>)
 800a2f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2fa:	bf00      	nop
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	2000175c 	.word	0x2000175c

0800a308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a312:	2300      	movs	r3, #0
 800a314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a316:	4b42      	ldr	r3, [pc, #264]	; (800a420 <xTaskResumeAll+0x118>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10a      	bne.n	800a334 <xTaskResumeAll+0x2c>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	603b      	str	r3, [r7, #0]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a334:	f001 fa26 	bl	800b784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a338:	4b39      	ldr	r3, [pc, #228]	; (800a420 <xTaskResumeAll+0x118>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	4a38      	ldr	r2, [pc, #224]	; (800a420 <xTaskResumeAll+0x118>)
 800a340:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a342:	4b37      	ldr	r3, [pc, #220]	; (800a420 <xTaskResumeAll+0x118>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d162      	bne.n	800a410 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a34a:	4b36      	ldr	r3, [pc, #216]	; (800a424 <xTaskResumeAll+0x11c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d05e      	beq.n	800a410 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a352:	e02f      	b.n	800a3b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a354:	4b34      	ldr	r3, [pc, #208]	; (800a428 <xTaskResumeAll+0x120>)
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3318      	adds	r3, #24
 800a360:	4618      	mov	r0, r3
 800a362:	f7fe fddd 	bl	8008f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3304      	adds	r3, #4
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe fdd8 	bl	8008f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	4b2d      	ldr	r3, [pc, #180]	; (800a42c <xTaskResumeAll+0x124>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d903      	bls.n	800a384 <xTaskResumeAll+0x7c>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a380:	4a2a      	ldr	r2, [pc, #168]	; (800a42c <xTaskResumeAll+0x124>)
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a388:	4613      	mov	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4a27      	ldr	r2, [pc, #156]	; (800a430 <xTaskResumeAll+0x128>)
 800a392:	441a      	add	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3304      	adds	r3, #4
 800a398:	4619      	mov	r1, r3
 800a39a:	4610      	mov	r0, r2
 800a39c:	f7fe fd63 	bl	8008e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a4:	4b23      	ldr	r3, [pc, #140]	; (800a434 <xTaskResumeAll+0x12c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d302      	bcc.n	800a3b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a3ae:	4b22      	ldr	r3, [pc, #136]	; (800a438 <xTaskResumeAll+0x130>)
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3b4:	4b1c      	ldr	r3, [pc, #112]	; (800a428 <xTaskResumeAll+0x120>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1cb      	bne.n	800a354 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3c2:	f000 fb55 	bl	800aa70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a3c6:	4b1d      	ldr	r3, [pc, #116]	; (800a43c <xTaskResumeAll+0x134>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d010      	beq.n	800a3f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3d2:	f000 f847 	bl	800a464 <xTaskIncrementTick>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3dc:	4b16      	ldr	r3, [pc, #88]	; (800a438 <xTaskResumeAll+0x130>)
 800a3de:	2201      	movs	r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1f1      	bne.n	800a3d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3ee:	4b13      	ldr	r3, [pc, #76]	; (800a43c <xTaskResumeAll+0x134>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3f4:	4b10      	ldr	r3, [pc, #64]	; (800a438 <xTaskResumeAll+0x130>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a400:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <xTaskResumeAll+0x138>)
 800a402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a410:	f001 f9e8 	bl	800b7e4 <vPortExitCritical>

	return xAlreadyYielded;
 800a414:	68bb      	ldr	r3, [r7, #8]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	2000175c 	.word	0x2000175c
 800a424:	20001734 	.word	0x20001734
 800a428:	200016f4 	.word	0x200016f4
 800a42c:	2000173c 	.word	0x2000173c
 800a430:	20001264 	.word	0x20001264
 800a434:	20001260 	.word	0x20001260
 800a438:	20001748 	.word	0x20001748
 800a43c:	20001744 	.word	0x20001744
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a44a:	4b05      	ldr	r3, [pc, #20]	; (800a460 <xTaskGetTickCount+0x1c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a450:	687b      	ldr	r3, [r7, #4]
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	20001738 	.word	0x20001738

0800a464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a46e:	4b4f      	ldr	r3, [pc, #316]	; (800a5ac <xTaskIncrementTick+0x148>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f040 808f 	bne.w	800a596 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a478:	4b4d      	ldr	r3, [pc, #308]	; (800a5b0 <xTaskIncrementTick+0x14c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3301      	adds	r3, #1
 800a47e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a480:	4a4b      	ldr	r2, [pc, #300]	; (800a5b0 <xTaskIncrementTick+0x14c>)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d120      	bne.n	800a4ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a48c:	4b49      	ldr	r3, [pc, #292]	; (800a5b4 <xTaskIncrementTick+0x150>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00a      	beq.n	800a4ac <xTaskIncrementTick+0x48>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	603b      	str	r3, [r7, #0]
}
 800a4a8:	bf00      	nop
 800a4aa:	e7fe      	b.n	800a4aa <xTaskIncrementTick+0x46>
 800a4ac:	4b41      	ldr	r3, [pc, #260]	; (800a5b4 <xTaskIncrementTick+0x150>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]
 800a4b2:	4b41      	ldr	r3, [pc, #260]	; (800a5b8 <xTaskIncrementTick+0x154>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a3f      	ldr	r2, [pc, #252]	; (800a5b4 <xTaskIncrementTick+0x150>)
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	4a3f      	ldr	r2, [pc, #252]	; (800a5b8 <xTaskIncrementTick+0x154>)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	4b3e      	ldr	r3, [pc, #248]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	4a3d      	ldr	r2, [pc, #244]	; (800a5bc <xTaskIncrementTick+0x158>)
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	f000 fad1 	bl	800aa70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4ce:	4b3c      	ldr	r3, [pc, #240]	; (800a5c0 <xTaskIncrementTick+0x15c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d349      	bcc.n	800a56c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d8:	4b36      	ldr	r3, [pc, #216]	; (800a5b4 <xTaskIncrementTick+0x150>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d104      	bne.n	800a4ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4e2:	4b37      	ldr	r3, [pc, #220]	; (800a5c0 <xTaskIncrementTick+0x15c>)
 800a4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e8:	601a      	str	r2, [r3, #0]
					break;
 800a4ea:	e03f      	b.n	800a56c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ec:	4b31      	ldr	r3, [pc, #196]	; (800a5b4 <xTaskIncrementTick+0x150>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	d203      	bcs.n	800a50c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a504:	4a2e      	ldr	r2, [pc, #184]	; (800a5c0 <xTaskIncrementTick+0x15c>)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a50a:	e02f      	b.n	800a56c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	3304      	adds	r3, #4
 800a510:	4618      	mov	r0, r3
 800a512:	f7fe fd05 	bl	8008f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d004      	beq.n	800a528 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	3318      	adds	r3, #24
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fcfc 	bl	8008f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4b25      	ldr	r3, [pc, #148]	; (800a5c4 <xTaskIncrementTick+0x160>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <xTaskIncrementTick+0xd8>
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	4a22      	ldr	r2, [pc, #136]	; (800a5c4 <xTaskIncrementTick+0x160>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4a1f      	ldr	r2, [pc, #124]	; (800a5c8 <xTaskIncrementTick+0x164>)
 800a54a:	441a      	add	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fe fc87 	bl	8008e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55c:	4b1b      	ldr	r3, [pc, #108]	; (800a5cc <xTaskIncrementTick+0x168>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a562:	429a      	cmp	r2, r3
 800a564:	d3b8      	bcc.n	800a4d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a566:	2301      	movs	r3, #1
 800a568:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a56a:	e7b5      	b.n	800a4d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a56c:	4b17      	ldr	r3, [pc, #92]	; (800a5cc <xTaskIncrementTick+0x168>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a572:	4915      	ldr	r1, [pc, #84]	; (800a5c8 <xTaskIncrementTick+0x164>)
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	440b      	add	r3, r1
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d901      	bls.n	800a588 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a584:	2301      	movs	r3, #1
 800a586:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a588:	4b11      	ldr	r3, [pc, #68]	; (800a5d0 <xTaskIncrementTick+0x16c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d007      	beq.n	800a5a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a590:	2301      	movs	r3, #1
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	e004      	b.n	800a5a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a596:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <xTaskIncrementTick+0x170>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	4a0d      	ldr	r2, [pc, #52]	; (800a5d4 <xTaskIncrementTick+0x170>)
 800a59e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a5a0:	697b      	ldr	r3, [r7, #20]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	2000175c 	.word	0x2000175c
 800a5b0:	20001738 	.word	0x20001738
 800a5b4:	200016ec 	.word	0x200016ec
 800a5b8:	200016f0 	.word	0x200016f0
 800a5bc:	2000174c 	.word	0x2000174c
 800a5c0:	20001754 	.word	0x20001754
 800a5c4:	2000173c 	.word	0x2000173c
 800a5c8:	20001264 	.word	0x20001264
 800a5cc:	20001260 	.word	0x20001260
 800a5d0:	20001748 	.word	0x20001748
 800a5d4:	20001744 	.word	0x20001744

0800a5d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5de:	4b28      	ldr	r3, [pc, #160]	; (800a680 <vTaskSwitchContext+0xa8>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5e6:	4b27      	ldr	r3, [pc, #156]	; (800a684 <vTaskSwitchContext+0xac>)
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5ec:	e041      	b.n	800a672 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a5ee:	4b25      	ldr	r3, [pc, #148]	; (800a684 <vTaskSwitchContext+0xac>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5f4:	4b24      	ldr	r3, [pc, #144]	; (800a688 <vTaskSwitchContext+0xb0>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	e010      	b.n	800a61e <vTaskSwitchContext+0x46>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <vTaskSwitchContext+0x40>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	607b      	str	r3, [r7, #4]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <vTaskSwitchContext+0x3e>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	491b      	ldr	r1, [pc, #108]	; (800a68c <vTaskSwitchContext+0xb4>)
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	440b      	add	r3, r1
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0e4      	beq.n	800a5fc <vTaskSwitchContext+0x24>
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4a13      	ldr	r2, [pc, #76]	; (800a68c <vTaskSwitchContext+0xb4>)
 800a63e:	4413      	add	r3, r2
 800a640:	60bb      	str	r3, [r7, #8]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	605a      	str	r2, [r3, #4]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	3308      	adds	r3, #8
 800a654:	429a      	cmp	r2, r3
 800a656:	d104      	bne.n	800a662 <vTaskSwitchContext+0x8a>
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	605a      	str	r2, [r3, #4]
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	4a09      	ldr	r2, [pc, #36]	; (800a690 <vTaskSwitchContext+0xb8>)
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	4a06      	ldr	r2, [pc, #24]	; (800a688 <vTaskSwitchContext+0xb0>)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6013      	str	r3, [r2, #0]
}
 800a672:	bf00      	nop
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	2000175c 	.word	0x2000175c
 800a684:	20001748 	.word	0x20001748
 800a688:	2000173c 	.word	0x2000173c
 800a68c:	20001264 	.word	0x20001264
 800a690:	20001260 	.word	0x20001260

0800a694 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	60fb      	str	r3, [r7, #12]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ba:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <vTaskPlaceOnEventList+0x44>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3318      	adds	r3, #24
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7fe fbf3 	bl	8008eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	6838      	ldr	r0, [r7, #0]
 800a6cc:	f000 fb8a 	bl	800ade4 <prvAddCurrentTaskToDelayedList>
}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	20001260 	.word	0x20001260

0800a6dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10a      	bne.n	800a704 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	617b      	str	r3, [r7, #20]
}
 800a700:	bf00      	nop
 800a702:	e7fe      	b.n	800a702 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a704:	4b0a      	ldr	r3, [pc, #40]	; (800a730 <vTaskPlaceOnEventListRestricted+0x54>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3318      	adds	r3, #24
 800a70a:	4619      	mov	r1, r3
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f7fe fbaa 	bl	8008e66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a718:	f04f 33ff 	mov.w	r3, #4294967295
 800a71c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	68b8      	ldr	r0, [r7, #8]
 800a722:	f000 fb5f 	bl	800ade4 <prvAddCurrentTaskToDelayedList>
	}
 800a726:	bf00      	nop
 800a728:	3718      	adds	r7, #24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20001260 	.word	0x20001260

0800a734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	60fb      	str	r3, [r7, #12]
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	3318      	adds	r3, #24
 800a764:	4618      	mov	r0, r3
 800a766:	f7fe fbdb 	bl	8008f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a76a:	4b1e      	ldr	r3, [pc, #120]	; (800a7e4 <xTaskRemoveFromEventList+0xb0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d11d      	bne.n	800a7ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	3304      	adds	r3, #4
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fbd2 	bl	8008f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a780:	4b19      	ldr	r3, [pc, #100]	; (800a7e8 <xTaskRemoveFromEventList+0xb4>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d903      	bls.n	800a790 <xTaskRemoveFromEventList+0x5c>
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78c:	4a16      	ldr	r2, [pc, #88]	; (800a7e8 <xTaskRemoveFromEventList+0xb4>)
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a794:	4613      	mov	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4a13      	ldr	r2, [pc, #76]	; (800a7ec <xTaskRemoveFromEventList+0xb8>)
 800a79e:	441a      	add	r2, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fe fb5d 	bl	8008e66 <vListInsertEnd>
 800a7ac:	e005      	b.n	800a7ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	480e      	ldr	r0, [pc, #56]	; (800a7f0 <xTaskRemoveFromEventList+0xbc>)
 800a7b6:	f7fe fb56 	bl	8008e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7be:	4b0d      	ldr	r3, [pc, #52]	; (800a7f4 <xTaskRemoveFromEventList+0xc0>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d905      	bls.n	800a7d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7cc:	4b0a      	ldr	r3, [pc, #40]	; (800a7f8 <xTaskRemoveFromEventList+0xc4>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	e001      	b.n	800a7d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7d8:	697b      	ldr	r3, [r7, #20]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	2000175c 	.word	0x2000175c
 800a7e8:	2000173c 	.word	0x2000173c
 800a7ec:	20001264 	.word	0x20001264
 800a7f0:	200016f4 	.word	0x200016f4
 800a7f4:	20001260 	.word	0x20001260
 800a7f8:	20001748 	.word	0x20001748

0800a7fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a804:	4b06      	ldr	r3, [pc, #24]	; (800a820 <vTaskInternalSetTimeOutState+0x24>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a80c:	4b05      	ldr	r3, [pc, #20]	; (800a824 <vTaskInternalSetTimeOutState+0x28>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	605a      	str	r2, [r3, #4]
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	2000174c 	.word	0x2000174c
 800a824:	20001738 	.word	0x20001738

0800a828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	613b      	str	r3, [r7, #16]
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10a      	bne.n	800a86a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	60fb      	str	r3, [r7, #12]
}
 800a866:	bf00      	nop
 800a868:	e7fe      	b.n	800a868 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a86a:	f000 ff8b 	bl	800b784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a86e:	4b1d      	ldr	r3, [pc, #116]	; (800a8e4 <xTaskCheckForTimeOut+0xbc>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	69ba      	ldr	r2, [r7, #24]
 800a87a:	1ad3      	subs	r3, r2, r3
 800a87c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a886:	d102      	bne.n	800a88e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a888:	2300      	movs	r3, #0
 800a88a:	61fb      	str	r3, [r7, #28]
 800a88c:	e023      	b.n	800a8d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4b15      	ldr	r3, [pc, #84]	; (800a8e8 <xTaskCheckForTimeOut+0xc0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d007      	beq.n	800a8aa <xTaskCheckForTimeOut+0x82>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d302      	bcc.n	800a8aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	e015      	b.n	800a8d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d20b      	bcs.n	800a8cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff ff9b 	bl	800a7fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	61fb      	str	r3, [r7, #28]
 800a8ca:	e004      	b.n	800a8d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8d6:	f000 ff85 	bl	800b7e4 <vPortExitCritical>

	return xReturn;
 800a8da:	69fb      	ldr	r3, [r7, #28]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3720      	adds	r7, #32
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20001738 	.word	0x20001738
 800a8e8:	2000174c 	.word	0x2000174c

0800a8ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8f0:	4b03      	ldr	r3, [pc, #12]	; (800a900 <vTaskMissedYield+0x14>)
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]
}
 800a8f6:	bf00      	nop
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20001748 	.word	0x20001748

0800a904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a90c:	f000 f852 	bl	800a9b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <prvIdleTask+0x28>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b01      	cmp	r3, #1
 800a916:	d9f9      	bls.n	800a90c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a918:	4b05      	ldr	r3, [pc, #20]	; (800a930 <prvIdleTask+0x2c>)
 800a91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a928:	e7f0      	b.n	800a90c <prvIdleTask+0x8>
 800a92a:	bf00      	nop
 800a92c:	20001264 	.word	0x20001264
 800a930:	e000ed04 	.word	0xe000ed04

0800a934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a93a:	2300      	movs	r3, #0
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	e00c      	b.n	800a95a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4a12      	ldr	r2, [pc, #72]	; (800a994 <prvInitialiseTaskLists+0x60>)
 800a94c:	4413      	add	r3, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fa5c 	bl	8008e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3301      	adds	r3, #1
 800a958:	607b      	str	r3, [r7, #4]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b37      	cmp	r3, #55	; 0x37
 800a95e:	d9ef      	bls.n	800a940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a960:	480d      	ldr	r0, [pc, #52]	; (800a998 <prvInitialiseTaskLists+0x64>)
 800a962:	f7fe fa53 	bl	8008e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a966:	480d      	ldr	r0, [pc, #52]	; (800a99c <prvInitialiseTaskLists+0x68>)
 800a968:	f7fe fa50 	bl	8008e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a96c:	480c      	ldr	r0, [pc, #48]	; (800a9a0 <prvInitialiseTaskLists+0x6c>)
 800a96e:	f7fe fa4d 	bl	8008e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a972:	480c      	ldr	r0, [pc, #48]	; (800a9a4 <prvInitialiseTaskLists+0x70>)
 800a974:	f7fe fa4a 	bl	8008e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a978:	480b      	ldr	r0, [pc, #44]	; (800a9a8 <prvInitialiseTaskLists+0x74>)
 800a97a:	f7fe fa47 	bl	8008e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a97e:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <prvInitialiseTaskLists+0x78>)
 800a980:	4a05      	ldr	r2, [pc, #20]	; (800a998 <prvInitialiseTaskLists+0x64>)
 800a982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a984:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <prvInitialiseTaskLists+0x7c>)
 800a986:	4a05      	ldr	r2, [pc, #20]	; (800a99c <prvInitialiseTaskLists+0x68>)
 800a988:	601a      	str	r2, [r3, #0]
}
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20001264 	.word	0x20001264
 800a998:	200016c4 	.word	0x200016c4
 800a99c:	200016d8 	.word	0x200016d8
 800a9a0:	200016f4 	.word	0x200016f4
 800a9a4:	20001708 	.word	0x20001708
 800a9a8:	20001720 	.word	0x20001720
 800a9ac:	200016ec 	.word	0x200016ec
 800a9b0:	200016f0 	.word	0x200016f0

0800a9b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9ba:	e019      	b.n	800a9f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9bc:	f000 fee2 	bl	800b784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9c0:	4b10      	ldr	r3, [pc, #64]	; (800aa04 <prvCheckTasksWaitingTermination+0x50>)
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fe faa7 	bl	8008f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <prvCheckTasksWaitingTermination+0x54>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	4a0b      	ldr	r2, [pc, #44]	; (800aa08 <prvCheckTasksWaitingTermination+0x54>)
 800a9da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9dc:	4b0b      	ldr	r3, [pc, #44]	; (800aa0c <prvCheckTasksWaitingTermination+0x58>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	4a0a      	ldr	r2, [pc, #40]	; (800aa0c <prvCheckTasksWaitingTermination+0x58>)
 800a9e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9e6:	f000 fefd 	bl	800b7e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f810 	bl	800aa10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9f0:	4b06      	ldr	r3, [pc, #24]	; (800aa0c <prvCheckTasksWaitingTermination+0x58>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1e1      	bne.n	800a9bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20001708 	.word	0x20001708
 800aa08:	20001734 	.word	0x20001734
 800aa0c:	2000171c 	.word	0x2000171c

0800aa10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d108      	bne.n	800aa34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa26:	4618      	mov	r0, r3
 800aa28:	f001 f89a 	bl	800bb60 <vPortFree>
				vPortFree( pxTCB );
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 f897 	bl	800bb60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa32:	e018      	b.n	800aa66 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d103      	bne.n	800aa46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 f88e 	bl	800bb60 <vPortFree>
	}
 800aa44:	e00f      	b.n	800aa66 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d00a      	beq.n	800aa66 <prvDeleteTCB+0x56>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	60fb      	str	r3, [r7, #12]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <prvDeleteTCB+0x54>
	}
 800aa66:	bf00      	nop
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa76:	4b0c      	ldr	r3, [pc, #48]	; (800aaa8 <prvResetNextTaskUnblockTime+0x38>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d104      	bne.n	800aa8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa80:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <prvResetNextTaskUnblockTime+0x3c>)
 800aa82:	f04f 32ff 	mov.w	r2, #4294967295
 800aa86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa88:	e008      	b.n	800aa9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8a:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <prvResetNextTaskUnblockTime+0x38>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	4a04      	ldr	r2, [pc, #16]	; (800aaac <prvResetNextTaskUnblockTime+0x3c>)
 800aa9a:	6013      	str	r3, [r2, #0]
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	200016ec 	.word	0x200016ec
 800aaac:	20001754 	.word	0x20001754

0800aab0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aab6:	4b05      	ldr	r3, [pc, #20]	; (800aacc <xTaskGetCurrentTaskHandle+0x1c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aabc:	687b      	ldr	r3, [r7, #4]
	}
 800aabe:	4618      	mov	r0, r3
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20001260 	.word	0x20001260

0800aad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aad6:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <xTaskGetSchedulerState+0x34>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aade:	2301      	movs	r3, #1
 800aae0:	607b      	str	r3, [r7, #4]
 800aae2:	e008      	b.n	800aaf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aae4:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <xTaskGetSchedulerState+0x38>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d102      	bne.n	800aaf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aaec:	2302      	movs	r3, #2
 800aaee:	607b      	str	r3, [r7, #4]
 800aaf0:	e001      	b.n	800aaf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaf6:	687b      	ldr	r3, [r7, #4]
	}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	20001740 	.word	0x20001740
 800ab08:	2000175c 	.word	0x2000175c

0800ab0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d051      	beq.n	800abc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab26:	4b2a      	ldr	r3, [pc, #168]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d241      	bcs.n	800abb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	db06      	blt.n	800ab46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab38:	4b25      	ldr	r3, [pc, #148]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	6959      	ldr	r1, [r3, #20]
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4e:	4613      	mov	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4a1f      	ldr	r2, [pc, #124]	; (800abd4 <xTaskPriorityInherit+0xc8>)
 800ab58:	4413      	add	r3, r2
 800ab5a:	4299      	cmp	r1, r3
 800ab5c:	d122      	bne.n	800aba4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe f9dc 	bl	8008f20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab68:	4b19      	ldr	r3, [pc, #100]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab76:	4b18      	ldr	r3, [pc, #96]	; (800abd8 <xTaskPriorityInherit+0xcc>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d903      	bls.n	800ab86 <xTaskPriorityInherit+0x7a>
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	4a15      	ldr	r2, [pc, #84]	; (800abd8 <xTaskPriorityInherit+0xcc>)
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4a10      	ldr	r2, [pc, #64]	; (800abd4 <xTaskPriorityInherit+0xc8>)
 800ab94:	441a      	add	r2, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	f7fe f962 	bl	8008e66 <vListInsertEnd>
 800aba2:	e004      	b.n	800abae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aba4:	4b0a      	ldr	r3, [pc, #40]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abae:	2301      	movs	r3, #1
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	e008      	b.n	800abc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abb8:	4b05      	ldr	r3, [pc, #20]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d201      	bcs.n	800abc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abc2:	2301      	movs	r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abc6:	68fb      	ldr	r3, [r7, #12]
	}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20001260 	.word	0x20001260
 800abd4:	20001264 	.word	0x20001264
 800abd8:	2000173c 	.word	0x2000173c

0800abdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abe8:	2300      	movs	r3, #0
 800abea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d056      	beq.n	800aca0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abf2:	4b2e      	ldr	r3, [pc, #184]	; (800acac <xTaskPriorityDisinherit+0xd0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d00a      	beq.n	800ac12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	60fb      	str	r3, [r7, #12]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10a      	bne.n	800ac30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	60bb      	str	r3, [r7, #8]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac34:	1e5a      	subs	r2, r3, #1
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d02c      	beq.n	800aca0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d128      	bne.n	800aca0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	3304      	adds	r3, #4
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe f964 	bl	8008f20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac70:	4b0f      	ldr	r3, [pc, #60]	; (800acb0 <xTaskPriorityDisinherit+0xd4>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d903      	bls.n	800ac80 <xTaskPriorityDisinherit+0xa4>
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	4a0c      	ldr	r2, [pc, #48]	; (800acb0 <xTaskPriorityDisinherit+0xd4>)
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4a09      	ldr	r2, [pc, #36]	; (800acb4 <xTaskPriorityDisinherit+0xd8>)
 800ac8e:	441a      	add	r2, r3
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	3304      	adds	r3, #4
 800ac94:	4619      	mov	r1, r3
 800ac96:	4610      	mov	r0, r2
 800ac98:	f7fe f8e5 	bl	8008e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aca0:	697b      	ldr	r3, [r7, #20]
	}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20001260 	.word	0x20001260
 800acb0:	2000173c 	.word	0x2000173c
 800acb4:	20001264 	.word	0x20001264

0800acb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800acc6:	2301      	movs	r3, #1
 800acc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d06a      	beq.n	800ada6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	60fb      	str	r3, [r7, #12]
}
 800acea:	bf00      	nop
 800acec:	e7fe      	b.n	800acec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d902      	bls.n	800acfe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	61fb      	str	r3, [r7, #28]
 800acfc:	e002      	b.n	800ad04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	69fa      	ldr	r2, [r7, #28]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d04b      	beq.n	800ada6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d146      	bne.n	800ada6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad18:	4b25      	ldr	r3, [pc, #148]	; (800adb0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d10a      	bne.n	800ad38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	60bb      	str	r3, [r7, #8]
}
 800ad34:	bf00      	nop
 800ad36:	e7fe      	b.n	800ad36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	69fa      	ldr	r2, [r7, #28]
 800ad42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	db04      	blt.n	800ad56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	6959      	ldr	r1, [r3, #20]
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4a13      	ldr	r2, [pc, #76]	; (800adb4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad66:	4413      	add	r3, r2
 800ad68:	4299      	cmp	r1, r3
 800ad6a:	d11c      	bne.n	800ada6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe f8d5 	bl	8008f20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d903      	bls.n	800ad8a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad86:	4a0c      	ldr	r2, [pc, #48]	; (800adb8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad88:	6013      	str	r3, [r2, #0]
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4a07      	ldr	r2, [pc, #28]	; (800adb4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad98:	441a      	add	r2, r3
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4610      	mov	r0, r2
 800ada2:	f7fe f860 	bl	8008e66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ada6:	bf00      	nop
 800ada8:	3720      	adds	r7, #32
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20001260 	.word	0x20001260
 800adb4:	20001264 	.word	0x20001264
 800adb8:	2000173c 	.word	0x2000173c

0800adbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800adc0:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <pvTaskIncrementMutexHeldCount+0x24>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d004      	beq.n	800add2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800adc8:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <pvTaskIncrementMutexHeldCount+0x24>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adce:	3201      	adds	r2, #1
 800add0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800add2:	4b03      	ldr	r3, [pc, #12]	; (800ade0 <pvTaskIncrementMutexHeldCount+0x24>)
 800add4:	681b      	ldr	r3, [r3, #0]
	}
 800add6:	4618      	mov	r0, r3
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	20001260 	.word	0x20001260

0800ade4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adee:	4b21      	ldr	r3, [pc, #132]	; (800ae74 <prvAddCurrentTaskToDelayedList+0x90>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adf4:	4b20      	ldr	r3, [pc, #128]	; (800ae78 <prvAddCurrentTaskToDelayedList+0x94>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe f890 	bl	8008f20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae06:	d10a      	bne.n	800ae1e <prvAddCurrentTaskToDelayedList+0x3a>
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d007      	beq.n	800ae1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae0e:	4b1a      	ldr	r3, [pc, #104]	; (800ae78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3304      	adds	r3, #4
 800ae14:	4619      	mov	r1, r3
 800ae16:	4819      	ldr	r0, [pc, #100]	; (800ae7c <prvAddCurrentTaskToDelayedList+0x98>)
 800ae18:	f7fe f825 	bl	8008e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae1c:	e026      	b.n	800ae6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	4413      	add	r3, r2
 800ae24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae26:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d209      	bcs.n	800ae4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae36:	4b12      	ldr	r3, [pc, #72]	; (800ae80 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	4619      	mov	r1, r3
 800ae42:	4610      	mov	r0, r2
 800ae44:	f7fe f833 	bl	8008eae <vListInsert>
}
 800ae48:	e010      	b.n	800ae6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae4a:	4b0e      	ldr	r3, [pc, #56]	; (800ae84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3304      	adds	r3, #4
 800ae54:	4619      	mov	r1, r3
 800ae56:	4610      	mov	r0, r2
 800ae58:	f7fe f829 	bl	8008eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae5c:	4b0a      	ldr	r3, [pc, #40]	; (800ae88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d202      	bcs.n	800ae6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ae66:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	6013      	str	r3, [r2, #0]
}
 800ae6c:	bf00      	nop
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20001738 	.word	0x20001738
 800ae78:	20001260 	.word	0x20001260
 800ae7c:	20001720 	.word	0x20001720
 800ae80:	200016f0 	.word	0x200016f0
 800ae84:	200016ec 	.word	0x200016ec
 800ae88:	20001754 	.word	0x20001754

0800ae8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	; 0x28
 800ae90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae96:	f000 fb07 	bl	800b4a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae9a:	4b1c      	ldr	r3, [pc, #112]	; (800af0c <xTimerCreateTimerTask+0x80>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d021      	beq.n	800aee6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aeaa:	1d3a      	adds	r2, r7, #4
 800aeac:	f107 0108 	add.w	r1, r7, #8
 800aeb0:	f107 030c 	add.w	r3, r7, #12
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fd ff8f 	bl	8008dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aeba:	6879      	ldr	r1, [r7, #4]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	9202      	str	r2, [sp, #8]
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	2302      	movs	r3, #2
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	2300      	movs	r3, #0
 800aeca:	460a      	mov	r2, r1
 800aecc:	4910      	ldr	r1, [pc, #64]	; (800af10 <xTimerCreateTimerTask+0x84>)
 800aece:	4811      	ldr	r0, [pc, #68]	; (800af14 <xTimerCreateTimerTask+0x88>)
 800aed0:	f7fe ffd0 	bl	8009e74 <xTaskCreateStatic>
 800aed4:	4603      	mov	r3, r0
 800aed6:	4a10      	ldr	r2, [pc, #64]	; (800af18 <xTimerCreateTimerTask+0x8c>)
 800aed8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aeda:	4b0f      	ldr	r3, [pc, #60]	; (800af18 <xTimerCreateTimerTask+0x8c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aee2:	2301      	movs	r3, #1
 800aee4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10a      	bne.n	800af02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	613b      	str	r3, [r7, #16]
}
 800aefe:	bf00      	nop
 800af00:	e7fe      	b.n	800af00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af02:	697b      	ldr	r3, [r7, #20]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20001790 	.word	0x20001790
 800af10:	0800e830 	.word	0x0800e830
 800af14:	0800b051 	.word	0x0800b051
 800af18:	20001794 	.word	0x20001794

0800af1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08a      	sub	sp, #40	; 0x28
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10a      	bne.n	800af4a <xTimerGenericCommand+0x2e>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	623b      	str	r3, [r7, #32]
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800af4a:	4b1a      	ldr	r3, [pc, #104]	; (800afb4 <xTimerGenericCommand+0x98>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d02a      	beq.n	800afa8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b05      	cmp	r3, #5
 800af62:	dc18      	bgt.n	800af96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af64:	f7ff fdb4 	bl	800aad0 <xTaskGetSchedulerState>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d109      	bne.n	800af82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af6e:	4b11      	ldr	r3, [pc, #68]	; (800afb4 <xTimerGenericCommand+0x98>)
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	f107 0110 	add.w	r1, r7, #16
 800af76:	2300      	movs	r3, #0
 800af78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af7a:	f7fe f9ef 	bl	800935c <xQueueGenericSend>
 800af7e:	6278      	str	r0, [r7, #36]	; 0x24
 800af80:	e012      	b.n	800afa8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af82:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <xTimerGenericCommand+0x98>)
 800af84:	6818      	ldr	r0, [r3, #0]
 800af86:	f107 0110 	add.w	r1, r7, #16
 800af8a:	2300      	movs	r3, #0
 800af8c:	2200      	movs	r2, #0
 800af8e:	f7fe f9e5 	bl	800935c <xQueueGenericSend>
 800af92:	6278      	str	r0, [r7, #36]	; 0x24
 800af94:	e008      	b.n	800afa8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af96:	4b07      	ldr	r3, [pc, #28]	; (800afb4 <xTimerGenericCommand+0x98>)
 800af98:	6818      	ldr	r0, [r3, #0]
 800af9a:	f107 0110 	add.w	r1, r7, #16
 800af9e:	2300      	movs	r3, #0
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	f7fe fad9 	bl	8009558 <xQueueGenericSendFromISR>
 800afa6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3728      	adds	r7, #40	; 0x28
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20001790 	.word	0x20001790

0800afb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b088      	sub	sp, #32
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc2:	4b22      	ldr	r3, [pc, #136]	; (800b04c <prvProcessExpiredTimer+0x94>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	3304      	adds	r3, #4
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fd ffa5 	bl	8008f20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afdc:	f003 0304 	and.w	r3, r3, #4
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d022      	beq.n	800b02a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	699a      	ldr	r2, [r3, #24]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	18d1      	adds	r1, r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	6978      	ldr	r0, [r7, #20]
 800aff2:	f000 f8d1 	bl	800b198 <prvInsertTimerInActiveList>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d01f      	beq.n	800b03c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800affc:	2300      	movs	r3, #0
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	2300      	movs	r3, #0
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	2100      	movs	r1, #0
 800b006:	6978      	ldr	r0, [r7, #20]
 800b008:	f7ff ff88 	bl	800af1c <xTimerGenericCommand>
 800b00c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d113      	bne.n	800b03c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	60fb      	str	r3, [r7, #12]
}
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b030:	f023 0301 	bic.w	r3, r3, #1
 800b034:	b2da      	uxtb	r2, r3
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	6a1b      	ldr	r3, [r3, #32]
 800b040:	6978      	ldr	r0, [r7, #20]
 800b042:	4798      	blx	r3
}
 800b044:	bf00      	nop
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20001788 	.word	0x20001788

0800b050 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b058:	f107 0308 	add.w	r3, r7, #8
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 f857 	bl	800b110 <prvGetNextExpireTime>
 800b062:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	4619      	mov	r1, r3
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f000 f803 	bl	800b074 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b06e:	f000 f8d5 	bl	800b21c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b072:	e7f1      	b.n	800b058 <prvTimerTask+0x8>

0800b074 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b07e:	f7ff f935 	bl	800a2ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b082:	f107 0308 	add.w	r3, r7, #8
 800b086:	4618      	mov	r0, r3
 800b088:	f000 f866 	bl	800b158 <prvSampleTimeNow>
 800b08c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d130      	bne.n	800b0f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10a      	bne.n	800b0b0 <prvProcessTimerOrBlockTask+0x3c>
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d806      	bhi.n	800b0b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b0a2:	f7ff f931 	bl	800a308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b0a6:	68f9      	ldr	r1, [r7, #12]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff ff85 	bl	800afb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b0ae:	e024      	b.n	800b0fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b0b6:	4b13      	ldr	r3, [pc, #76]	; (800b104 <prvProcessTimerOrBlockTask+0x90>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <prvProcessTimerOrBlockTask+0x50>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e000      	b.n	800b0c6 <prvProcessTimerOrBlockTask+0x52>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <prvProcessTimerOrBlockTask+0x94>)
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	f7fe fe99 	bl	8009e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b0da:	f7ff f915 	bl	800a308 <xTaskResumeAll>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b0e4:	4b09      	ldr	r3, [pc, #36]	; (800b10c <prvProcessTimerOrBlockTask+0x98>)
 800b0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	f3bf 8f6f 	isb	sy
}
 800b0f4:	e001      	b.n	800b0fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0f6:	f7ff f907 	bl	800a308 <xTaskResumeAll>
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	2000178c 	.word	0x2000178c
 800b108:	20001790 	.word	0x20001790
 800b10c:	e000ed04 	.word	0xe000ed04

0800b110 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b118:	4b0e      	ldr	r3, [pc, #56]	; (800b154 <prvGetNextExpireTime+0x44>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <prvGetNextExpireTime+0x16>
 800b122:	2201      	movs	r2, #1
 800b124:	e000      	b.n	800b128 <prvGetNextExpireTime+0x18>
 800b126:	2200      	movs	r2, #0
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d105      	bne.n	800b140 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b134:	4b07      	ldr	r3, [pc, #28]	; (800b154 <prvGetNextExpireTime+0x44>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	e001      	b.n	800b144 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b140:	2300      	movs	r3, #0
 800b142:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b144:	68fb      	ldr	r3, [r7, #12]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	20001788 	.word	0x20001788

0800b158 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b160:	f7ff f970 	bl	800a444 <xTaskGetTickCount>
 800b164:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b166:	4b0b      	ldr	r3, [pc, #44]	; (800b194 <prvSampleTimeNow+0x3c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d205      	bcs.n	800b17c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b170:	f000 f936 	bl	800b3e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	e002      	b.n	800b182 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b182:	4a04      	ldr	r2, [pc, #16]	; (800b194 <prvSampleTimeNow+0x3c>)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b188:	68fb      	ldr	r3, [r7, #12]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20001798 	.word	0x20001798

0800b198 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d812      	bhi.n	800b1e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	1ad2      	subs	r2, r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d302      	bcc.n	800b1d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	e01b      	b.n	800b20a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b1d2:	4b10      	ldr	r3, [pc, #64]	; (800b214 <prvInsertTimerInActiveList+0x7c>)
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4610      	mov	r0, r2
 800b1de:	f7fd fe66 	bl	8008eae <vListInsert>
 800b1e2:	e012      	b.n	800b20a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d206      	bcs.n	800b1fa <prvInsertTimerInActiveList+0x62>
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d302      	bcc.n	800b1fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	e007      	b.n	800b20a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1fa:	4b07      	ldr	r3, [pc, #28]	; (800b218 <prvInsertTimerInActiveList+0x80>)
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3304      	adds	r3, #4
 800b202:	4619      	mov	r1, r3
 800b204:	4610      	mov	r0, r2
 800b206:	f7fd fe52 	bl	8008eae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b20a:	697b      	ldr	r3, [r7, #20]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	2000178c 	.word	0x2000178c
 800b218:	20001788 	.word	0x20001788

0800b21c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08e      	sub	sp, #56	; 0x38
 800b220:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b222:	e0ca      	b.n	800b3ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	da18      	bge.n	800b25c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b22a:	1d3b      	adds	r3, r7, #4
 800b22c:	3304      	adds	r3, #4
 800b22e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10a      	bne.n	800b24c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	61fb      	str	r3, [r7, #28]
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b252:	6850      	ldr	r0, [r2, #4]
 800b254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b256:	6892      	ldr	r2, [r2, #8]
 800b258:	4611      	mov	r1, r2
 800b25a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f2c0 80ab 	blt.w	800b3ba <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d004      	beq.n	800b27a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	3304      	adds	r3, #4
 800b274:	4618      	mov	r0, r3
 800b276:	f7fd fe53 	bl	8008f20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b27a:	463b      	mov	r3, r7
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7ff ff6b 	bl	800b158 <prvSampleTimeNow>
 800b282:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b09      	cmp	r3, #9
 800b288:	f200 8096 	bhi.w	800b3b8 <prvProcessReceivedCommands+0x19c>
 800b28c:	a201      	add	r2, pc, #4	; (adr r2, 800b294 <prvProcessReceivedCommands+0x78>)
 800b28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b292:	bf00      	nop
 800b294:	0800b2bd 	.word	0x0800b2bd
 800b298:	0800b2bd 	.word	0x0800b2bd
 800b29c:	0800b2bd 	.word	0x0800b2bd
 800b2a0:	0800b331 	.word	0x0800b331
 800b2a4:	0800b345 	.word	0x0800b345
 800b2a8:	0800b38f 	.word	0x0800b38f
 800b2ac:	0800b2bd 	.word	0x0800b2bd
 800b2b0:	0800b2bd 	.word	0x0800b2bd
 800b2b4:	0800b331 	.word	0x0800b331
 800b2b8:	0800b345 	.word	0x0800b345
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2c2:	f043 0301 	orr.w	r3, r3, #1
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	18d1      	adds	r1, r2, r3
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2dc:	f7ff ff5c 	bl	800b198 <prvInsertTimerInActiveList>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d069      	beq.n	800b3ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e8:	6a1b      	ldr	r3, [r3, #32]
 800b2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2f4:	f003 0304 	and.w	r3, r3, #4
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d05e      	beq.n	800b3ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	441a      	add	r2, r3
 800b304:	2300      	movs	r3, #0
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	2300      	movs	r3, #0
 800b30a:	2100      	movs	r1, #0
 800b30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b30e:	f7ff fe05 	bl	800af1c <xTimerGenericCommand>
 800b312:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d14f      	bne.n	800b3ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	61bb      	str	r3, [r7, #24]
}
 800b32c:	bf00      	nop
 800b32e:	e7fe      	b.n	800b32e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b336:	f023 0301 	bic.w	r3, r3, #1
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b342:	e03a      	b.n	800b3ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b34a:	f043 0301 	orr.w	r3, r3, #1
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10a      	bne.n	800b37a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	617b      	str	r3, [r7, #20]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37c:	699a      	ldr	r2, [r3, #24]
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	18d1      	adds	r1, r2, r3
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b388:	f7ff ff06 	bl	800b198 <prvInsertTimerInActiveList>
					break;
 800b38c:	e015      	b.n	800b3ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b394:	f003 0302 	and.w	r3, r3, #2
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d103      	bne.n	800b3a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b39e:	f000 fbdf 	bl	800bb60 <vPortFree>
 800b3a2:	e00a      	b.n	800b3ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3aa:	f023 0301 	bic.w	r3, r3, #1
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b3b6:	e000      	b.n	800b3ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b3b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3ba:	4b08      	ldr	r3, [pc, #32]	; (800b3dc <prvProcessReceivedCommands+0x1c0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	1d39      	adds	r1, r7, #4
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fe f964 	bl	8009690 <xQueueReceive>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f47f af2a 	bne.w	800b224 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b3d0:	bf00      	nop
 800b3d2:	bf00      	nop
 800b3d4:	3730      	adds	r7, #48	; 0x30
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	20001790 	.word	0x20001790

0800b3e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b088      	sub	sp, #32
 800b3e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3e6:	e048      	b.n	800b47a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3e8:	4b2d      	ldr	r3, [pc, #180]	; (800b4a0 <prvSwitchTimerLists+0xc0>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f2:	4b2b      	ldr	r3, [pc, #172]	; (800b4a0 <prvSwitchTimerLists+0xc0>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4618      	mov	r0, r3
 800b402:	f7fd fd8d 	bl	8008f20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a1b      	ldr	r3, [r3, #32]
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b414:	f003 0304 	and.w	r3, r3, #4
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d02e      	beq.n	800b47a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	4413      	add	r3, r2
 800b424:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d90e      	bls.n	800b44c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b43a:	4b19      	ldr	r3, [pc, #100]	; (800b4a0 <prvSwitchTimerLists+0xc0>)
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3304      	adds	r3, #4
 800b442:	4619      	mov	r1, r3
 800b444:	4610      	mov	r0, r2
 800b446:	f7fd fd32 	bl	8008eae <vListInsert>
 800b44a:	e016      	b.n	800b47a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b44c:	2300      	movs	r3, #0
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	2300      	movs	r3, #0
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	2100      	movs	r1, #0
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f7ff fd60 	bl	800af1c <xTimerGenericCommand>
 800b45c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10a      	bne.n	800b47a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	603b      	str	r3, [r7, #0]
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <prvSwitchTimerLists+0xc0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1b1      	bne.n	800b3e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b484:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <prvSwitchTimerLists+0xc0>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b48a:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <prvSwitchTimerLists+0xc4>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a04      	ldr	r2, [pc, #16]	; (800b4a0 <prvSwitchTimerLists+0xc0>)
 800b490:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b492:	4a04      	ldr	r2, [pc, #16]	; (800b4a4 <prvSwitchTimerLists+0xc4>)
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	6013      	str	r3, [r2, #0]
}
 800b498:	bf00      	nop
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	20001788 	.word	0x20001788
 800b4a4:	2000178c 	.word	0x2000178c

0800b4a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b4ae:	f000 f969 	bl	800b784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <prvCheckForValidListAndQueue+0x60>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d120      	bne.n	800b4fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b4ba:	4814      	ldr	r0, [pc, #80]	; (800b50c <prvCheckForValidListAndQueue+0x64>)
 800b4bc:	f7fd fca6 	bl	8008e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b4c0:	4813      	ldr	r0, [pc, #76]	; (800b510 <prvCheckForValidListAndQueue+0x68>)
 800b4c2:	f7fd fca3 	bl	8008e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b4c6:	4b13      	ldr	r3, [pc, #76]	; (800b514 <prvCheckForValidListAndQueue+0x6c>)
 800b4c8:	4a10      	ldr	r2, [pc, #64]	; (800b50c <prvCheckForValidListAndQueue+0x64>)
 800b4ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b4cc:	4b12      	ldr	r3, [pc, #72]	; (800b518 <prvCheckForValidListAndQueue+0x70>)
 800b4ce:	4a10      	ldr	r2, [pc, #64]	; (800b510 <prvCheckForValidListAndQueue+0x68>)
 800b4d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	4b11      	ldr	r3, [pc, #68]	; (800b51c <prvCheckForValidListAndQueue+0x74>)
 800b4d8:	4a11      	ldr	r2, [pc, #68]	; (800b520 <prvCheckForValidListAndQueue+0x78>)
 800b4da:	2110      	movs	r1, #16
 800b4dc:	200a      	movs	r0, #10
 800b4de:	f7fd fdb1 	bl	8009044 <xQueueGenericCreateStatic>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	4a08      	ldr	r2, [pc, #32]	; (800b508 <prvCheckForValidListAndQueue+0x60>)
 800b4e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b4e8:	4b07      	ldr	r3, [pc, #28]	; (800b508 <prvCheckForValidListAndQueue+0x60>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d005      	beq.n	800b4fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b4f0:	4b05      	ldr	r3, [pc, #20]	; (800b508 <prvCheckForValidListAndQueue+0x60>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	490b      	ldr	r1, [pc, #44]	; (800b524 <prvCheckForValidListAndQueue+0x7c>)
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fe fc5e 	bl	8009db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4fc:	f000 f972 	bl	800b7e4 <vPortExitCritical>
}
 800b500:	bf00      	nop
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20001790 	.word	0x20001790
 800b50c:	20001760 	.word	0x20001760
 800b510:	20001774 	.word	0x20001774
 800b514:	20001788 	.word	0x20001788
 800b518:	2000178c 	.word	0x2000178c
 800b51c:	2000183c 	.word	0x2000183c
 800b520:	2000179c 	.word	0x2000179c
 800b524:	0800e838 	.word	0x0800e838

0800b528 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3b04      	subs	r3, #4
 800b538:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3b04      	subs	r3, #4
 800b546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	f023 0201 	bic.w	r2, r3, #1
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3b04      	subs	r3, #4
 800b556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b558:	4a0c      	ldr	r2, [pc, #48]	; (800b58c <pxPortInitialiseStack+0x64>)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3b14      	subs	r3, #20
 800b562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3b04      	subs	r3, #4
 800b56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f06f 0202 	mvn.w	r2, #2
 800b576:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3b20      	subs	r3, #32
 800b57c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b57e:	68fb      	ldr	r3, [r7, #12]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	0800b591 	.word	0x0800b591

0800b590 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b59a:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <prvTaskExitError+0x54>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a2:	d00a      	beq.n	800b5ba <prvTaskExitError+0x2a>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	60fb      	str	r3, [r7, #12]
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <prvTaskExitError+0x28>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	60bb      	str	r3, [r7, #8]
}
 800b5cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b5ce:	bf00      	nop
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0fc      	beq.n	800b5d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	20000020 	.word	0x20000020
	...

0800b5f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5f0:	4b07      	ldr	r3, [pc, #28]	; (800b610 <pxCurrentTCBConst2>)
 800b5f2:	6819      	ldr	r1, [r3, #0]
 800b5f4:	6808      	ldr	r0, [r1, #0]
 800b5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fa:	f380 8809 	msr	PSP, r0
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f04f 0000 	mov.w	r0, #0
 800b606:	f380 8811 	msr	BASEPRI, r0
 800b60a:	4770      	bx	lr
 800b60c:	f3af 8000 	nop.w

0800b610 <pxCurrentTCBConst2>:
 800b610:	20001260 	.word	0x20001260
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop

0800b618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b618:	4808      	ldr	r0, [pc, #32]	; (800b63c <prvPortStartFirstTask+0x24>)
 800b61a:	6800      	ldr	r0, [r0, #0]
 800b61c:	6800      	ldr	r0, [r0, #0]
 800b61e:	f380 8808 	msr	MSP, r0
 800b622:	f04f 0000 	mov.w	r0, #0
 800b626:	f380 8814 	msr	CONTROL, r0
 800b62a:	b662      	cpsie	i
 800b62c:	b661      	cpsie	f
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	df00      	svc	0
 800b638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b63a:	bf00      	nop
 800b63c:	e000ed08 	.word	0xe000ed08

0800b640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b646:	4b46      	ldr	r3, [pc, #280]	; (800b760 <xPortStartScheduler+0x120>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a46      	ldr	r2, [pc, #280]	; (800b764 <xPortStartScheduler+0x124>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d10a      	bne.n	800b666 <xPortStartScheduler+0x26>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	613b      	str	r3, [r7, #16]
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b666:	4b3e      	ldr	r3, [pc, #248]	; (800b760 <xPortStartScheduler+0x120>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a3f      	ldr	r2, [pc, #252]	; (800b768 <xPortStartScheduler+0x128>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d10a      	bne.n	800b686 <xPortStartScheduler+0x46>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	60fb      	str	r3, [r7, #12]
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b686:	4b39      	ldr	r3, [pc, #228]	; (800b76c <xPortStartScheduler+0x12c>)
 800b688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	22ff      	movs	r2, #255	; 0xff
 800b696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	4b31      	ldr	r3, [pc, #196]	; (800b770 <xPortStartScheduler+0x130>)
 800b6ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b6ae:	4b31      	ldr	r3, [pc, #196]	; (800b774 <xPortStartScheduler+0x134>)
 800b6b0:	2207      	movs	r2, #7
 800b6b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6b4:	e009      	b.n	800b6ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b6b6:	4b2f      	ldr	r3, [pc, #188]	; (800b774 <xPortStartScheduler+0x134>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	4a2d      	ldr	r2, [pc, #180]	; (800b774 <xPortStartScheduler+0x134>)
 800b6be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b6c0:	78fb      	ldrb	r3, [r7, #3]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d2:	2b80      	cmp	r3, #128	; 0x80
 800b6d4:	d0ef      	beq.n	800b6b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b6d6:	4b27      	ldr	r3, [pc, #156]	; (800b774 <xPortStartScheduler+0x134>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f1c3 0307 	rsb	r3, r3, #7
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	d00a      	beq.n	800b6f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	60bb      	str	r3, [r7, #8]
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6f8:	4b1e      	ldr	r3, [pc, #120]	; (800b774 <xPortStartScheduler+0x134>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	021b      	lsls	r3, r3, #8
 800b6fe:	4a1d      	ldr	r2, [pc, #116]	; (800b774 <xPortStartScheduler+0x134>)
 800b700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b702:	4b1c      	ldr	r3, [pc, #112]	; (800b774 <xPortStartScheduler+0x134>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b70a:	4a1a      	ldr	r2, [pc, #104]	; (800b774 <xPortStartScheduler+0x134>)
 800b70c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	b2da      	uxtb	r2, r3
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b716:	4b18      	ldr	r3, [pc, #96]	; (800b778 <xPortStartScheduler+0x138>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a17      	ldr	r2, [pc, #92]	; (800b778 <xPortStartScheduler+0x138>)
 800b71c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b722:	4b15      	ldr	r3, [pc, #84]	; (800b778 <xPortStartScheduler+0x138>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a14      	ldr	r2, [pc, #80]	; (800b778 <xPortStartScheduler+0x138>)
 800b728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b72c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b72e:	f000 f8dd 	bl	800b8ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b732:	4b12      	ldr	r3, [pc, #72]	; (800b77c <xPortStartScheduler+0x13c>)
 800b734:	2200      	movs	r2, #0
 800b736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b738:	f000 f8fc 	bl	800b934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b73c:	4b10      	ldr	r3, [pc, #64]	; (800b780 <xPortStartScheduler+0x140>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a0f      	ldr	r2, [pc, #60]	; (800b780 <xPortStartScheduler+0x140>)
 800b742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b748:	f7ff ff66 	bl	800b618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b74c:	f7fe ff44 	bl	800a5d8 <vTaskSwitchContext>
	prvTaskExitError();
 800b750:	f7ff ff1e 	bl	800b590 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	e000ed00 	.word	0xe000ed00
 800b764:	410fc271 	.word	0x410fc271
 800b768:	410fc270 	.word	0x410fc270
 800b76c:	e000e400 	.word	0xe000e400
 800b770:	2000188c 	.word	0x2000188c
 800b774:	20001890 	.word	0x20001890
 800b778:	e000ed20 	.word	0xe000ed20
 800b77c:	20000020 	.word	0x20000020
 800b780:	e000ef34 	.word	0xe000ef34

0800b784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	607b      	str	r3, [r7, #4]
}
 800b79c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b79e:	4b0f      	ldr	r3, [pc, #60]	; (800b7dc <vPortEnterCritical+0x58>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	4a0d      	ldr	r2, [pc, #52]	; (800b7dc <vPortEnterCritical+0x58>)
 800b7a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b7a8:	4b0c      	ldr	r3, [pc, #48]	; (800b7dc <vPortEnterCritical+0x58>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d10f      	bne.n	800b7d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <vPortEnterCritical+0x5c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	603b      	str	r3, [r7, #0]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <vPortEnterCritical+0x4a>
	}
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	20000020 	.word	0x20000020
 800b7e0:	e000ed04 	.word	0xe000ed04

0800b7e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7ea:	4b12      	ldr	r3, [pc, #72]	; (800b834 <vPortExitCritical+0x50>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10a      	bne.n	800b808 <vPortExitCritical+0x24>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	607b      	str	r3, [r7, #4]
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b808:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <vPortExitCritical+0x50>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	4a09      	ldr	r2, [pc, #36]	; (800b834 <vPortExitCritical+0x50>)
 800b810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b812:	4b08      	ldr	r3, [pc, #32]	; (800b834 <vPortExitCritical+0x50>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d105      	bne.n	800b826 <vPortExitCritical+0x42>
 800b81a:	2300      	movs	r3, #0
 800b81c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	f383 8811 	msr	BASEPRI, r3
}
 800b824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20000020 	.word	0x20000020
	...

0800b840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b840:	f3ef 8009 	mrs	r0, PSP
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	4b15      	ldr	r3, [pc, #84]	; (800b8a0 <pxCurrentTCBConst>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	f01e 0f10 	tst.w	lr, #16
 800b850:	bf08      	it	eq
 800b852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85a:	6010      	str	r0, [r2, #0]
 800b85c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b860:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b864:	f380 8811 	msr	BASEPRI, r0
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f7fe feb2 	bl	800a5d8 <vTaskSwitchContext>
 800b874:	f04f 0000 	mov.w	r0, #0
 800b878:	f380 8811 	msr	BASEPRI, r0
 800b87c:	bc09      	pop	{r0, r3}
 800b87e:	6819      	ldr	r1, [r3, #0]
 800b880:	6808      	ldr	r0, [r1, #0]
 800b882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b886:	f01e 0f10 	tst.w	lr, #16
 800b88a:	bf08      	it	eq
 800b88c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b890:	f380 8809 	msr	PSP, r0
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	f3af 8000 	nop.w

0800b8a0 <pxCurrentTCBConst>:
 800b8a0:	20001260 	.word	0x20001260
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop

0800b8a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	607b      	str	r3, [r7, #4]
}
 800b8c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b8c2:	f7fe fdcf 	bl	800a464 <xTaskIncrementTick>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d003      	beq.n	800b8d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <xPortSysTickHandler+0x40>)
 800b8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f383 8811 	msr	BASEPRI, r3
}
 800b8de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	e000ed04 	.word	0xe000ed04

0800b8ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8f0:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <vPortSetupTimerInterrupt+0x34>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <vPortSetupTimerInterrupt+0x38>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8fc:	4b0a      	ldr	r3, [pc, #40]	; (800b928 <vPortSetupTimerInterrupt+0x3c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a0a      	ldr	r2, [pc, #40]	; (800b92c <vPortSetupTimerInterrupt+0x40>)
 800b902:	fba2 2303 	umull	r2, r3, r2, r3
 800b906:	099b      	lsrs	r3, r3, #6
 800b908:	4a09      	ldr	r2, [pc, #36]	; (800b930 <vPortSetupTimerInterrupt+0x44>)
 800b90a:	3b01      	subs	r3, #1
 800b90c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b90e:	4b04      	ldr	r3, [pc, #16]	; (800b920 <vPortSetupTimerInterrupt+0x34>)
 800b910:	2207      	movs	r2, #7
 800b912:	601a      	str	r2, [r3, #0]
}
 800b914:	bf00      	nop
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	e000e010 	.word	0xe000e010
 800b924:	e000e018 	.word	0xe000e018
 800b928:	20000014 	.word	0x20000014
 800b92c:	10624dd3 	.word	0x10624dd3
 800b930:	e000e014 	.word	0xe000e014

0800b934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b944 <vPortEnableVFP+0x10>
 800b938:	6801      	ldr	r1, [r0, #0]
 800b93a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b93e:	6001      	str	r1, [r0, #0]
 800b940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b942:	bf00      	nop
 800b944:	e000ed88 	.word	0xe000ed88

0800b948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b94e:	f3ef 8305 	mrs	r3, IPSR
 800b952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b0f      	cmp	r3, #15
 800b958:	d914      	bls.n	800b984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b95a:	4a17      	ldr	r2, [pc, #92]	; (800b9b8 <vPortValidateInterruptPriority+0x70>)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	4413      	add	r3, r2
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b964:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <vPortValidateInterruptPriority+0x74>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	7afa      	ldrb	r2, [r7, #11]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d20a      	bcs.n	800b984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	607b      	str	r3, [r7, #4]
}
 800b980:	bf00      	nop
 800b982:	e7fe      	b.n	800b982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b984:	4b0e      	ldr	r3, [pc, #56]	; (800b9c0 <vPortValidateInterruptPriority+0x78>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b98c:	4b0d      	ldr	r3, [pc, #52]	; (800b9c4 <vPortValidateInterruptPriority+0x7c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d90a      	bls.n	800b9aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	603b      	str	r3, [r7, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <vPortValidateInterruptPriority+0x60>
	}
 800b9aa:	bf00      	nop
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	e000e3f0 	.word	0xe000e3f0
 800b9bc:	2000188c 	.word	0x2000188c
 800b9c0:	e000ed0c 	.word	0xe000ed0c
 800b9c4:	20001890 	.word	0x20001890

0800b9c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b08a      	sub	sp, #40	; 0x28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9d4:	f7fe fc8a 	bl	800a2ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9d8:	4b5b      	ldr	r3, [pc, #364]	; (800bb48 <pvPortMalloc+0x180>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d101      	bne.n	800b9e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9e0:	f000 f920 	bl	800bc24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9e4:	4b59      	ldr	r3, [pc, #356]	; (800bb4c <pvPortMalloc+0x184>)
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f040 8093 	bne.w	800bb18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d01d      	beq.n	800ba34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b9f8:	2208      	movs	r2, #8
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d014      	beq.n	800ba34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f023 0307 	bic.w	r3, r3, #7
 800ba10:	3308      	adds	r3, #8
 800ba12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00a      	beq.n	800ba34 <pvPortMalloc+0x6c>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	617b      	str	r3, [r7, #20]
}
 800ba30:	bf00      	nop
 800ba32:	e7fe      	b.n	800ba32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d06e      	beq.n	800bb18 <pvPortMalloc+0x150>
 800ba3a:	4b45      	ldr	r3, [pc, #276]	; (800bb50 <pvPortMalloc+0x188>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d869      	bhi.n	800bb18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba44:	4b43      	ldr	r3, [pc, #268]	; (800bb54 <pvPortMalloc+0x18c>)
 800ba46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba48:	4b42      	ldr	r3, [pc, #264]	; (800bb54 <pvPortMalloc+0x18c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba4e:	e004      	b.n	800ba5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d903      	bls.n	800ba6c <pvPortMalloc+0xa4>
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1f1      	bne.n	800ba50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba6c:	4b36      	ldr	r3, [pc, #216]	; (800bb48 <pvPortMalloc+0x180>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d050      	beq.n	800bb18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2208      	movs	r2, #8
 800ba7c:	4413      	add	r3, r2
 800ba7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	1ad2      	subs	r2, r2, r3
 800ba90:	2308      	movs	r3, #8
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d91f      	bls.n	800bad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	f003 0307 	and.w	r3, r3, #7
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <pvPortMalloc+0xf8>
	__asm volatile
 800baaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	613b      	str	r3, [r7, #16]
}
 800babc:	bf00      	nop
 800babe:	e7fe      	b.n	800babe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	1ad2      	subs	r2, r2, r3
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bad2:	69b8      	ldr	r0, [r7, #24]
 800bad4:	f000 f908 	bl	800bce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bad8:	4b1d      	ldr	r3, [pc, #116]	; (800bb50 <pvPortMalloc+0x188>)
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	4a1b      	ldr	r2, [pc, #108]	; (800bb50 <pvPortMalloc+0x188>)
 800bae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bae6:	4b1a      	ldr	r3, [pc, #104]	; (800bb50 <pvPortMalloc+0x188>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <pvPortMalloc+0x190>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d203      	bcs.n	800bafa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800baf2:	4b17      	ldr	r3, [pc, #92]	; (800bb50 <pvPortMalloc+0x188>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a18      	ldr	r2, [pc, #96]	; (800bb58 <pvPortMalloc+0x190>)
 800baf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	4b13      	ldr	r3, [pc, #76]	; (800bb4c <pvPortMalloc+0x184>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	431a      	orrs	r2, r3
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <pvPortMalloc+0x194>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	3301      	adds	r3, #1
 800bb14:	4a11      	ldr	r2, [pc, #68]	; (800bb5c <pvPortMalloc+0x194>)
 800bb16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb18:	f7fe fbf6 	bl	800a308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00a      	beq.n	800bb3c <pvPortMalloc+0x174>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	60fb      	str	r3, [r7, #12]
}
 800bb38:	bf00      	nop
 800bb3a:	e7fe      	b.n	800bb3a <pvPortMalloc+0x172>
	return pvReturn;
 800bb3c:	69fb      	ldr	r3, [r7, #28]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3728      	adds	r7, #40	; 0x28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20002454 	.word	0x20002454
 800bb4c:	20002468 	.word	0x20002468
 800bb50:	20002458 	.word	0x20002458
 800bb54:	2000244c 	.word	0x2000244c
 800bb58:	2000245c 	.word	0x2000245c
 800bb5c:	20002460 	.word	0x20002460

0800bb60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d04d      	beq.n	800bc0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb72:	2308      	movs	r3, #8
 800bb74:	425b      	negs	r3, r3
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	4413      	add	r3, r2
 800bb7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	685a      	ldr	r2, [r3, #4]
 800bb84:	4b24      	ldr	r3, [pc, #144]	; (800bc18 <vPortFree+0xb8>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4013      	ands	r3, r2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10a      	bne.n	800bba4 <vPortFree+0x44>
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	f383 8811 	msr	BASEPRI, r3
 800bb96:	f3bf 8f6f 	isb	sy
 800bb9a:	f3bf 8f4f 	dsb	sy
 800bb9e:	60fb      	str	r3, [r7, #12]
}
 800bba0:	bf00      	nop
 800bba2:	e7fe      	b.n	800bba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00a      	beq.n	800bbc2 <vPortFree+0x62>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	60bb      	str	r3, [r7, #8]
}
 800bbbe:	bf00      	nop
 800bbc0:	e7fe      	b.n	800bbc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	685a      	ldr	r2, [r3, #4]
 800bbc6:	4b14      	ldr	r3, [pc, #80]	; (800bc18 <vPortFree+0xb8>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4013      	ands	r3, r2
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d01e      	beq.n	800bc0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d11a      	bne.n	800bc0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	4b0e      	ldr	r3, [pc, #56]	; (800bc18 <vPortFree+0xb8>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	43db      	mvns	r3, r3
 800bbe2:	401a      	ands	r2, r3
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bbe8:	f7fe fb80 	bl	800a2ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	4b0a      	ldr	r3, [pc, #40]	; (800bc1c <vPortFree+0xbc>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	4a09      	ldr	r2, [pc, #36]	; (800bc1c <vPortFree+0xbc>)
 800bbf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbfa:	6938      	ldr	r0, [r7, #16]
 800bbfc:	f000 f874 	bl	800bce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bc00:	4b07      	ldr	r3, [pc, #28]	; (800bc20 <vPortFree+0xc0>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3301      	adds	r3, #1
 800bc06:	4a06      	ldr	r2, [pc, #24]	; (800bc20 <vPortFree+0xc0>)
 800bc08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc0a:	f7fe fb7d 	bl	800a308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc0e:	bf00      	nop
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20002468 	.word	0x20002468
 800bc1c:	20002458 	.word	0x20002458
 800bc20:	20002464 	.word	0x20002464

0800bc24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bc2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc30:	4b27      	ldr	r3, [pc, #156]	; (800bcd0 <prvHeapInit+0xac>)
 800bc32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f003 0307 	and.w	r3, r3, #7
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00c      	beq.n	800bc58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	3307      	adds	r3, #7
 800bc42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f023 0307 	bic.w	r3, r3, #7
 800bc4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	4a1f      	ldr	r2, [pc, #124]	; (800bcd0 <prvHeapInit+0xac>)
 800bc54:	4413      	add	r3, r2
 800bc56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc5c:	4a1d      	ldr	r2, [pc, #116]	; (800bcd4 <prvHeapInit+0xb0>)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc62:	4b1c      	ldr	r3, [pc, #112]	; (800bcd4 <prvHeapInit+0xb0>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc70:	2208      	movs	r2, #8
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	1a9b      	subs	r3, r3, r2
 800bc76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f023 0307 	bic.w	r3, r3, #7
 800bc7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	4a15      	ldr	r2, [pc, #84]	; (800bcd8 <prvHeapInit+0xb4>)
 800bc84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc86:	4b14      	ldr	r3, [pc, #80]	; (800bcd8 <prvHeapInit+0xb4>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc8e:	4b12      	ldr	r3, [pc, #72]	; (800bcd8 <prvHeapInit+0xb4>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2200      	movs	r2, #0
 800bc94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	1ad2      	subs	r2, r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bca4:	4b0c      	ldr	r3, [pc, #48]	; (800bcd8 <prvHeapInit+0xb4>)
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	4a0a      	ldr	r2, [pc, #40]	; (800bcdc <prvHeapInit+0xb8>)
 800bcb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	4a09      	ldr	r2, [pc, #36]	; (800bce0 <prvHeapInit+0xbc>)
 800bcba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bcbc:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <prvHeapInit+0xc0>)
 800bcbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bcc2:	601a      	str	r2, [r3, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	20001894 	.word	0x20001894
 800bcd4:	2000244c 	.word	0x2000244c
 800bcd8:	20002454 	.word	0x20002454
 800bcdc:	2000245c 	.word	0x2000245c
 800bce0:	20002458 	.word	0x20002458
 800bce4:	20002468 	.word	0x20002468

0800bce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcf0:	4b28      	ldr	r3, [pc, #160]	; (800bd94 <prvInsertBlockIntoFreeList+0xac>)
 800bcf2:	60fb      	str	r3, [r7, #12]
 800bcf4:	e002      	b.n	800bcfc <prvInsertBlockIntoFreeList+0x14>
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	60fb      	str	r3, [r7, #12]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d8f7      	bhi.n	800bcf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	4413      	add	r3, r2
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d108      	bne.n	800bd2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	441a      	add	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	441a      	add	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d118      	bne.n	800bd70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	4b15      	ldr	r3, [pc, #84]	; (800bd98 <prvInsertBlockIntoFreeList+0xb0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d00d      	beq.n	800bd66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685a      	ldr	r2, [r3, #4]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	441a      	add	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	e008      	b.n	800bd78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd66:	4b0c      	ldr	r3, [pc, #48]	; (800bd98 <prvInsertBlockIntoFreeList+0xb0>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	e003      	b.n	800bd78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d002      	beq.n	800bd86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd86:	bf00      	nop
 800bd88:	3714      	adds	r7, #20
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	2000244c 	.word	0x2000244c
 800bd98:	20002454 	.word	0x20002454

0800bd9c <__cvt>:
 800bd9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bda0:	ec55 4b10 	vmov	r4, r5, d0
 800bda4:	2d00      	cmp	r5, #0
 800bda6:	460e      	mov	r6, r1
 800bda8:	4619      	mov	r1, r3
 800bdaa:	462b      	mov	r3, r5
 800bdac:	bfbb      	ittet	lt
 800bdae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bdb2:	461d      	movlt	r5, r3
 800bdb4:	2300      	movge	r3, #0
 800bdb6:	232d      	movlt	r3, #45	; 0x2d
 800bdb8:	700b      	strb	r3, [r1, #0]
 800bdba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bdc0:	4691      	mov	r9, r2
 800bdc2:	f023 0820 	bic.w	r8, r3, #32
 800bdc6:	bfbc      	itt	lt
 800bdc8:	4622      	movlt	r2, r4
 800bdca:	4614      	movlt	r4, r2
 800bdcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdd0:	d005      	beq.n	800bdde <__cvt+0x42>
 800bdd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bdd6:	d100      	bne.n	800bdda <__cvt+0x3e>
 800bdd8:	3601      	adds	r6, #1
 800bdda:	2102      	movs	r1, #2
 800bddc:	e000      	b.n	800bde0 <__cvt+0x44>
 800bdde:	2103      	movs	r1, #3
 800bde0:	ab03      	add	r3, sp, #12
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	ab02      	add	r3, sp, #8
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	ec45 4b10 	vmov	d0, r4, r5
 800bdec:	4653      	mov	r3, sl
 800bdee:	4632      	mov	r2, r6
 800bdf0:	f000 fe6a 	bl	800cac8 <_dtoa_r>
 800bdf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bdf8:	4607      	mov	r7, r0
 800bdfa:	d102      	bne.n	800be02 <__cvt+0x66>
 800bdfc:	f019 0f01 	tst.w	r9, #1
 800be00:	d022      	beq.n	800be48 <__cvt+0xac>
 800be02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be06:	eb07 0906 	add.w	r9, r7, r6
 800be0a:	d110      	bne.n	800be2e <__cvt+0x92>
 800be0c:	783b      	ldrb	r3, [r7, #0]
 800be0e:	2b30      	cmp	r3, #48	; 0x30
 800be10:	d10a      	bne.n	800be28 <__cvt+0x8c>
 800be12:	2200      	movs	r2, #0
 800be14:	2300      	movs	r3, #0
 800be16:	4620      	mov	r0, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	f7f4 fe65 	bl	8000ae8 <__aeabi_dcmpeq>
 800be1e:	b918      	cbnz	r0, 800be28 <__cvt+0x8c>
 800be20:	f1c6 0601 	rsb	r6, r6, #1
 800be24:	f8ca 6000 	str.w	r6, [sl]
 800be28:	f8da 3000 	ldr.w	r3, [sl]
 800be2c:	4499      	add	r9, r3
 800be2e:	2200      	movs	r2, #0
 800be30:	2300      	movs	r3, #0
 800be32:	4620      	mov	r0, r4
 800be34:	4629      	mov	r1, r5
 800be36:	f7f4 fe57 	bl	8000ae8 <__aeabi_dcmpeq>
 800be3a:	b108      	cbz	r0, 800be40 <__cvt+0xa4>
 800be3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800be40:	2230      	movs	r2, #48	; 0x30
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	454b      	cmp	r3, r9
 800be46:	d307      	bcc.n	800be58 <__cvt+0xbc>
 800be48:	9b03      	ldr	r3, [sp, #12]
 800be4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be4c:	1bdb      	subs	r3, r3, r7
 800be4e:	4638      	mov	r0, r7
 800be50:	6013      	str	r3, [r2, #0]
 800be52:	b004      	add	sp, #16
 800be54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be58:	1c59      	adds	r1, r3, #1
 800be5a:	9103      	str	r1, [sp, #12]
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	e7f0      	b.n	800be42 <__cvt+0xa6>

0800be60 <__exponent>:
 800be60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be62:	4603      	mov	r3, r0
 800be64:	2900      	cmp	r1, #0
 800be66:	bfb8      	it	lt
 800be68:	4249      	neglt	r1, r1
 800be6a:	f803 2b02 	strb.w	r2, [r3], #2
 800be6e:	bfb4      	ite	lt
 800be70:	222d      	movlt	r2, #45	; 0x2d
 800be72:	222b      	movge	r2, #43	; 0x2b
 800be74:	2909      	cmp	r1, #9
 800be76:	7042      	strb	r2, [r0, #1]
 800be78:	dd2a      	ble.n	800bed0 <__exponent+0x70>
 800be7a:	f10d 0207 	add.w	r2, sp, #7
 800be7e:	4617      	mov	r7, r2
 800be80:	260a      	movs	r6, #10
 800be82:	4694      	mov	ip, r2
 800be84:	fb91 f5f6 	sdiv	r5, r1, r6
 800be88:	fb06 1415 	mls	r4, r6, r5, r1
 800be8c:	3430      	adds	r4, #48	; 0x30
 800be8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800be92:	460c      	mov	r4, r1
 800be94:	2c63      	cmp	r4, #99	; 0x63
 800be96:	f102 32ff 	add.w	r2, r2, #4294967295
 800be9a:	4629      	mov	r1, r5
 800be9c:	dcf1      	bgt.n	800be82 <__exponent+0x22>
 800be9e:	3130      	adds	r1, #48	; 0x30
 800bea0:	f1ac 0402 	sub.w	r4, ip, #2
 800bea4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bea8:	1c41      	adds	r1, r0, #1
 800beaa:	4622      	mov	r2, r4
 800beac:	42ba      	cmp	r2, r7
 800beae:	d30a      	bcc.n	800bec6 <__exponent+0x66>
 800beb0:	f10d 0209 	add.w	r2, sp, #9
 800beb4:	eba2 020c 	sub.w	r2, r2, ip
 800beb8:	42bc      	cmp	r4, r7
 800beba:	bf88      	it	hi
 800bebc:	2200      	movhi	r2, #0
 800bebe:	4413      	add	r3, r2
 800bec0:	1a18      	subs	r0, r3, r0
 800bec2:	b003      	add	sp, #12
 800bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800beca:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bece:	e7ed      	b.n	800beac <__exponent+0x4c>
 800bed0:	2330      	movs	r3, #48	; 0x30
 800bed2:	3130      	adds	r1, #48	; 0x30
 800bed4:	7083      	strb	r3, [r0, #2]
 800bed6:	70c1      	strb	r1, [r0, #3]
 800bed8:	1d03      	adds	r3, r0, #4
 800beda:	e7f1      	b.n	800bec0 <__exponent+0x60>

0800bedc <_printf_float>:
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	ed2d 8b02 	vpush	{d8}
 800bee4:	b08d      	sub	sp, #52	; 0x34
 800bee6:	460c      	mov	r4, r1
 800bee8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800beec:	4616      	mov	r6, r2
 800beee:	461f      	mov	r7, r3
 800bef0:	4605      	mov	r5, r0
 800bef2:	f000 fcd9 	bl	800c8a8 <_localeconv_r>
 800bef6:	f8d0 a000 	ldr.w	sl, [r0]
 800befa:	4650      	mov	r0, sl
 800befc:	f7f4 f9c8 	bl	8000290 <strlen>
 800bf00:	2300      	movs	r3, #0
 800bf02:	930a      	str	r3, [sp, #40]	; 0x28
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	9305      	str	r3, [sp, #20]
 800bf08:	f8d8 3000 	ldr.w	r3, [r8]
 800bf0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf10:	3307      	adds	r3, #7
 800bf12:	f023 0307 	bic.w	r3, r3, #7
 800bf16:	f103 0208 	add.w	r2, r3, #8
 800bf1a:	f8c8 2000 	str.w	r2, [r8]
 800bf1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf26:	9307      	str	r3, [sp, #28]
 800bf28:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf2c:	ee08 0a10 	vmov	s16, r0
 800bf30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bf34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf38:	4b9e      	ldr	r3, [pc, #632]	; (800c1b4 <_printf_float+0x2d8>)
 800bf3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf3e:	f7f4 fe05 	bl	8000b4c <__aeabi_dcmpun>
 800bf42:	bb88      	cbnz	r0, 800bfa8 <_printf_float+0xcc>
 800bf44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf48:	4b9a      	ldr	r3, [pc, #616]	; (800c1b4 <_printf_float+0x2d8>)
 800bf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4e:	f7f4 fddf 	bl	8000b10 <__aeabi_dcmple>
 800bf52:	bb48      	cbnz	r0, 800bfa8 <_printf_float+0xcc>
 800bf54:	2200      	movs	r2, #0
 800bf56:	2300      	movs	r3, #0
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	f7f4 fdce 	bl	8000afc <__aeabi_dcmplt>
 800bf60:	b110      	cbz	r0, 800bf68 <_printf_float+0x8c>
 800bf62:	232d      	movs	r3, #45	; 0x2d
 800bf64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf68:	4a93      	ldr	r2, [pc, #588]	; (800c1b8 <_printf_float+0x2dc>)
 800bf6a:	4b94      	ldr	r3, [pc, #592]	; (800c1bc <_printf_float+0x2e0>)
 800bf6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf70:	bf94      	ite	ls
 800bf72:	4690      	movls	r8, r2
 800bf74:	4698      	movhi	r8, r3
 800bf76:	2303      	movs	r3, #3
 800bf78:	6123      	str	r3, [r4, #16]
 800bf7a:	9b05      	ldr	r3, [sp, #20]
 800bf7c:	f023 0304 	bic.w	r3, r3, #4
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	f04f 0900 	mov.w	r9, #0
 800bf86:	9700      	str	r7, [sp, #0]
 800bf88:	4633      	mov	r3, r6
 800bf8a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf8c:	4621      	mov	r1, r4
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 f9da 	bl	800c348 <_printf_common>
 800bf94:	3001      	adds	r0, #1
 800bf96:	f040 8090 	bne.w	800c0ba <_printf_float+0x1de>
 800bf9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9e:	b00d      	add	sp, #52	; 0x34
 800bfa0:	ecbd 8b02 	vpop	{d8}
 800bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa8:	4642      	mov	r2, r8
 800bfaa:	464b      	mov	r3, r9
 800bfac:	4640      	mov	r0, r8
 800bfae:	4649      	mov	r1, r9
 800bfb0:	f7f4 fdcc 	bl	8000b4c <__aeabi_dcmpun>
 800bfb4:	b140      	cbz	r0, 800bfc8 <_printf_float+0xec>
 800bfb6:	464b      	mov	r3, r9
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	bfbc      	itt	lt
 800bfbc:	232d      	movlt	r3, #45	; 0x2d
 800bfbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bfc2:	4a7f      	ldr	r2, [pc, #508]	; (800c1c0 <_printf_float+0x2e4>)
 800bfc4:	4b7f      	ldr	r3, [pc, #508]	; (800c1c4 <_printf_float+0x2e8>)
 800bfc6:	e7d1      	b.n	800bf6c <_printf_float+0x90>
 800bfc8:	6863      	ldr	r3, [r4, #4]
 800bfca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bfce:	9206      	str	r2, [sp, #24]
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	d13f      	bne.n	800c054 <_printf_float+0x178>
 800bfd4:	2306      	movs	r3, #6
 800bfd6:	6063      	str	r3, [r4, #4]
 800bfd8:	9b05      	ldr	r3, [sp, #20]
 800bfda:	6861      	ldr	r1, [r4, #4]
 800bfdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	9303      	str	r3, [sp, #12]
 800bfe4:	ab0a      	add	r3, sp, #40	; 0x28
 800bfe6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bfea:	ab09      	add	r3, sp, #36	; 0x24
 800bfec:	ec49 8b10 	vmov	d0, r8, r9
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	6022      	str	r2, [r4, #0]
 800bff4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bff8:	4628      	mov	r0, r5
 800bffa:	f7ff fecf 	bl	800bd9c <__cvt>
 800bffe:	9b06      	ldr	r3, [sp, #24]
 800c000:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c002:	2b47      	cmp	r3, #71	; 0x47
 800c004:	4680      	mov	r8, r0
 800c006:	d108      	bne.n	800c01a <_printf_float+0x13e>
 800c008:	1cc8      	adds	r0, r1, #3
 800c00a:	db02      	blt.n	800c012 <_printf_float+0x136>
 800c00c:	6863      	ldr	r3, [r4, #4]
 800c00e:	4299      	cmp	r1, r3
 800c010:	dd41      	ble.n	800c096 <_printf_float+0x1ba>
 800c012:	f1ab 0302 	sub.w	r3, fp, #2
 800c016:	fa5f fb83 	uxtb.w	fp, r3
 800c01a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c01e:	d820      	bhi.n	800c062 <_printf_float+0x186>
 800c020:	3901      	subs	r1, #1
 800c022:	465a      	mov	r2, fp
 800c024:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c028:	9109      	str	r1, [sp, #36]	; 0x24
 800c02a:	f7ff ff19 	bl	800be60 <__exponent>
 800c02e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c030:	1813      	adds	r3, r2, r0
 800c032:	2a01      	cmp	r2, #1
 800c034:	4681      	mov	r9, r0
 800c036:	6123      	str	r3, [r4, #16]
 800c038:	dc02      	bgt.n	800c040 <_printf_float+0x164>
 800c03a:	6822      	ldr	r2, [r4, #0]
 800c03c:	07d2      	lsls	r2, r2, #31
 800c03e:	d501      	bpl.n	800c044 <_printf_float+0x168>
 800c040:	3301      	adds	r3, #1
 800c042:	6123      	str	r3, [r4, #16]
 800c044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d09c      	beq.n	800bf86 <_printf_float+0xaa>
 800c04c:	232d      	movs	r3, #45	; 0x2d
 800c04e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c052:	e798      	b.n	800bf86 <_printf_float+0xaa>
 800c054:	9a06      	ldr	r2, [sp, #24]
 800c056:	2a47      	cmp	r2, #71	; 0x47
 800c058:	d1be      	bne.n	800bfd8 <_printf_float+0xfc>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1bc      	bne.n	800bfd8 <_printf_float+0xfc>
 800c05e:	2301      	movs	r3, #1
 800c060:	e7b9      	b.n	800bfd6 <_printf_float+0xfa>
 800c062:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c066:	d118      	bne.n	800c09a <_printf_float+0x1be>
 800c068:	2900      	cmp	r1, #0
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	dd0b      	ble.n	800c086 <_printf_float+0x1aa>
 800c06e:	6121      	str	r1, [r4, #16]
 800c070:	b913      	cbnz	r3, 800c078 <_printf_float+0x19c>
 800c072:	6822      	ldr	r2, [r4, #0]
 800c074:	07d0      	lsls	r0, r2, #31
 800c076:	d502      	bpl.n	800c07e <_printf_float+0x1a2>
 800c078:	3301      	adds	r3, #1
 800c07a:	440b      	add	r3, r1
 800c07c:	6123      	str	r3, [r4, #16]
 800c07e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c080:	f04f 0900 	mov.w	r9, #0
 800c084:	e7de      	b.n	800c044 <_printf_float+0x168>
 800c086:	b913      	cbnz	r3, 800c08e <_printf_float+0x1b2>
 800c088:	6822      	ldr	r2, [r4, #0]
 800c08a:	07d2      	lsls	r2, r2, #31
 800c08c:	d501      	bpl.n	800c092 <_printf_float+0x1b6>
 800c08e:	3302      	adds	r3, #2
 800c090:	e7f4      	b.n	800c07c <_printf_float+0x1a0>
 800c092:	2301      	movs	r3, #1
 800c094:	e7f2      	b.n	800c07c <_printf_float+0x1a0>
 800c096:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c09c:	4299      	cmp	r1, r3
 800c09e:	db05      	blt.n	800c0ac <_printf_float+0x1d0>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	6121      	str	r1, [r4, #16]
 800c0a4:	07d8      	lsls	r0, r3, #31
 800c0a6:	d5ea      	bpl.n	800c07e <_printf_float+0x1a2>
 800c0a8:	1c4b      	adds	r3, r1, #1
 800c0aa:	e7e7      	b.n	800c07c <_printf_float+0x1a0>
 800c0ac:	2900      	cmp	r1, #0
 800c0ae:	bfd4      	ite	le
 800c0b0:	f1c1 0202 	rsble	r2, r1, #2
 800c0b4:	2201      	movgt	r2, #1
 800c0b6:	4413      	add	r3, r2
 800c0b8:	e7e0      	b.n	800c07c <_printf_float+0x1a0>
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	055a      	lsls	r2, r3, #21
 800c0be:	d407      	bmi.n	800c0d0 <_printf_float+0x1f4>
 800c0c0:	6923      	ldr	r3, [r4, #16]
 800c0c2:	4642      	mov	r2, r8
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	47b8      	blx	r7
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	d12c      	bne.n	800c128 <_printf_float+0x24c>
 800c0ce:	e764      	b.n	800bf9a <_printf_float+0xbe>
 800c0d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0d4:	f240 80e0 	bls.w	800c298 <_printf_float+0x3bc>
 800c0d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f7f4 fd02 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d034      	beq.n	800c152 <_printf_float+0x276>
 800c0e8:	4a37      	ldr	r2, [pc, #220]	; (800c1c8 <_printf_float+0x2ec>)
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	4631      	mov	r1, r6
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	47b8      	blx	r7
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	f43f af51 	beq.w	800bf9a <_printf_float+0xbe>
 800c0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	db02      	blt.n	800c106 <_printf_float+0x22a>
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	07d8      	lsls	r0, r3, #31
 800c104:	d510      	bpl.n	800c128 <_printf_float+0x24c>
 800c106:	ee18 3a10 	vmov	r3, s16
 800c10a:	4652      	mov	r2, sl
 800c10c:	4631      	mov	r1, r6
 800c10e:	4628      	mov	r0, r5
 800c110:	47b8      	blx	r7
 800c112:	3001      	adds	r0, #1
 800c114:	f43f af41 	beq.w	800bf9a <_printf_float+0xbe>
 800c118:	f04f 0800 	mov.w	r8, #0
 800c11c:	f104 091a 	add.w	r9, r4, #26
 800c120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c122:	3b01      	subs	r3, #1
 800c124:	4543      	cmp	r3, r8
 800c126:	dc09      	bgt.n	800c13c <_printf_float+0x260>
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	079b      	lsls	r3, r3, #30
 800c12c:	f100 8107 	bmi.w	800c33e <_printf_float+0x462>
 800c130:	68e0      	ldr	r0, [r4, #12]
 800c132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c134:	4298      	cmp	r0, r3
 800c136:	bfb8      	it	lt
 800c138:	4618      	movlt	r0, r3
 800c13a:	e730      	b.n	800bf9e <_printf_float+0xc2>
 800c13c:	2301      	movs	r3, #1
 800c13e:	464a      	mov	r2, r9
 800c140:	4631      	mov	r1, r6
 800c142:	4628      	mov	r0, r5
 800c144:	47b8      	blx	r7
 800c146:	3001      	adds	r0, #1
 800c148:	f43f af27 	beq.w	800bf9a <_printf_float+0xbe>
 800c14c:	f108 0801 	add.w	r8, r8, #1
 800c150:	e7e6      	b.n	800c120 <_printf_float+0x244>
 800c152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c154:	2b00      	cmp	r3, #0
 800c156:	dc39      	bgt.n	800c1cc <_printf_float+0x2f0>
 800c158:	4a1b      	ldr	r2, [pc, #108]	; (800c1c8 <_printf_float+0x2ec>)
 800c15a:	2301      	movs	r3, #1
 800c15c:	4631      	mov	r1, r6
 800c15e:	4628      	mov	r0, r5
 800c160:	47b8      	blx	r7
 800c162:	3001      	adds	r0, #1
 800c164:	f43f af19 	beq.w	800bf9a <_printf_float+0xbe>
 800c168:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c16c:	4313      	orrs	r3, r2
 800c16e:	d102      	bne.n	800c176 <_printf_float+0x29a>
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	07d9      	lsls	r1, r3, #31
 800c174:	d5d8      	bpl.n	800c128 <_printf_float+0x24c>
 800c176:	ee18 3a10 	vmov	r3, s16
 800c17a:	4652      	mov	r2, sl
 800c17c:	4631      	mov	r1, r6
 800c17e:	4628      	mov	r0, r5
 800c180:	47b8      	blx	r7
 800c182:	3001      	adds	r0, #1
 800c184:	f43f af09 	beq.w	800bf9a <_printf_float+0xbe>
 800c188:	f04f 0900 	mov.w	r9, #0
 800c18c:	f104 0a1a 	add.w	sl, r4, #26
 800c190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c192:	425b      	negs	r3, r3
 800c194:	454b      	cmp	r3, r9
 800c196:	dc01      	bgt.n	800c19c <_printf_float+0x2c0>
 800c198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c19a:	e792      	b.n	800c0c2 <_printf_float+0x1e6>
 800c19c:	2301      	movs	r3, #1
 800c19e:	4652      	mov	r2, sl
 800c1a0:	4631      	mov	r1, r6
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	47b8      	blx	r7
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	f43f aef7 	beq.w	800bf9a <_printf_float+0xbe>
 800c1ac:	f109 0901 	add.w	r9, r9, #1
 800c1b0:	e7ee      	b.n	800c190 <_printf_float+0x2b4>
 800c1b2:	bf00      	nop
 800c1b4:	7fefffff 	.word	0x7fefffff
 800c1b8:	0800ea5c 	.word	0x0800ea5c
 800c1bc:	0800ea60 	.word	0x0800ea60
 800c1c0:	0800ea64 	.word	0x0800ea64
 800c1c4:	0800ea68 	.word	0x0800ea68
 800c1c8:	0800ea6c 	.word	0x0800ea6c
 800c1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	bfa8      	it	ge
 800c1d4:	461a      	movge	r2, r3
 800c1d6:	2a00      	cmp	r2, #0
 800c1d8:	4691      	mov	r9, r2
 800c1da:	dc37      	bgt.n	800c24c <_printf_float+0x370>
 800c1dc:	f04f 0b00 	mov.w	fp, #0
 800c1e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1e4:	f104 021a 	add.w	r2, r4, #26
 800c1e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1ea:	9305      	str	r3, [sp, #20]
 800c1ec:	eba3 0309 	sub.w	r3, r3, r9
 800c1f0:	455b      	cmp	r3, fp
 800c1f2:	dc33      	bgt.n	800c25c <_printf_float+0x380>
 800c1f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	db3b      	blt.n	800c274 <_printf_float+0x398>
 800c1fc:	6823      	ldr	r3, [r4, #0]
 800c1fe:	07da      	lsls	r2, r3, #31
 800c200:	d438      	bmi.n	800c274 <_printf_float+0x398>
 800c202:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c206:	eba2 0903 	sub.w	r9, r2, r3
 800c20a:	9b05      	ldr	r3, [sp, #20]
 800c20c:	1ad2      	subs	r2, r2, r3
 800c20e:	4591      	cmp	r9, r2
 800c210:	bfa8      	it	ge
 800c212:	4691      	movge	r9, r2
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	dc35      	bgt.n	800c286 <_printf_float+0x3aa>
 800c21a:	f04f 0800 	mov.w	r8, #0
 800c21e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c222:	f104 0a1a 	add.w	sl, r4, #26
 800c226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c22a:	1a9b      	subs	r3, r3, r2
 800c22c:	eba3 0309 	sub.w	r3, r3, r9
 800c230:	4543      	cmp	r3, r8
 800c232:	f77f af79 	ble.w	800c128 <_printf_float+0x24c>
 800c236:	2301      	movs	r3, #1
 800c238:	4652      	mov	r2, sl
 800c23a:	4631      	mov	r1, r6
 800c23c:	4628      	mov	r0, r5
 800c23e:	47b8      	blx	r7
 800c240:	3001      	adds	r0, #1
 800c242:	f43f aeaa 	beq.w	800bf9a <_printf_float+0xbe>
 800c246:	f108 0801 	add.w	r8, r8, #1
 800c24a:	e7ec      	b.n	800c226 <_printf_float+0x34a>
 800c24c:	4613      	mov	r3, r2
 800c24e:	4631      	mov	r1, r6
 800c250:	4642      	mov	r2, r8
 800c252:	4628      	mov	r0, r5
 800c254:	47b8      	blx	r7
 800c256:	3001      	adds	r0, #1
 800c258:	d1c0      	bne.n	800c1dc <_printf_float+0x300>
 800c25a:	e69e      	b.n	800bf9a <_printf_float+0xbe>
 800c25c:	2301      	movs	r3, #1
 800c25e:	4631      	mov	r1, r6
 800c260:	4628      	mov	r0, r5
 800c262:	9205      	str	r2, [sp, #20]
 800c264:	47b8      	blx	r7
 800c266:	3001      	adds	r0, #1
 800c268:	f43f ae97 	beq.w	800bf9a <_printf_float+0xbe>
 800c26c:	9a05      	ldr	r2, [sp, #20]
 800c26e:	f10b 0b01 	add.w	fp, fp, #1
 800c272:	e7b9      	b.n	800c1e8 <_printf_float+0x30c>
 800c274:	ee18 3a10 	vmov	r3, s16
 800c278:	4652      	mov	r2, sl
 800c27a:	4631      	mov	r1, r6
 800c27c:	4628      	mov	r0, r5
 800c27e:	47b8      	blx	r7
 800c280:	3001      	adds	r0, #1
 800c282:	d1be      	bne.n	800c202 <_printf_float+0x326>
 800c284:	e689      	b.n	800bf9a <_printf_float+0xbe>
 800c286:	9a05      	ldr	r2, [sp, #20]
 800c288:	464b      	mov	r3, r9
 800c28a:	4442      	add	r2, r8
 800c28c:	4631      	mov	r1, r6
 800c28e:	4628      	mov	r0, r5
 800c290:	47b8      	blx	r7
 800c292:	3001      	adds	r0, #1
 800c294:	d1c1      	bne.n	800c21a <_printf_float+0x33e>
 800c296:	e680      	b.n	800bf9a <_printf_float+0xbe>
 800c298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c29a:	2a01      	cmp	r2, #1
 800c29c:	dc01      	bgt.n	800c2a2 <_printf_float+0x3c6>
 800c29e:	07db      	lsls	r3, r3, #31
 800c2a0:	d53a      	bpl.n	800c318 <_printf_float+0x43c>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	4642      	mov	r2, r8
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	47b8      	blx	r7
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	f43f ae74 	beq.w	800bf9a <_printf_float+0xbe>
 800c2b2:	ee18 3a10 	vmov	r3, s16
 800c2b6:	4652      	mov	r2, sl
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	47b8      	blx	r7
 800c2be:	3001      	adds	r0, #1
 800c2c0:	f43f ae6b 	beq.w	800bf9a <_printf_float+0xbe>
 800c2c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c2d0:	f7f4 fc0a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2d4:	b9d8      	cbnz	r0, 800c30e <_printf_float+0x432>
 800c2d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c2da:	f108 0201 	add.w	r2, r8, #1
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b8      	blx	r7
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	d10e      	bne.n	800c306 <_printf_float+0x42a>
 800c2e8:	e657      	b.n	800bf9a <_printf_float+0xbe>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	4652      	mov	r2, sl
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	47b8      	blx	r7
 800c2f4:	3001      	adds	r0, #1
 800c2f6:	f43f ae50 	beq.w	800bf9a <_printf_float+0xbe>
 800c2fa:	f108 0801 	add.w	r8, r8, #1
 800c2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c300:	3b01      	subs	r3, #1
 800c302:	4543      	cmp	r3, r8
 800c304:	dcf1      	bgt.n	800c2ea <_printf_float+0x40e>
 800c306:	464b      	mov	r3, r9
 800c308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c30c:	e6da      	b.n	800c0c4 <_printf_float+0x1e8>
 800c30e:	f04f 0800 	mov.w	r8, #0
 800c312:	f104 0a1a 	add.w	sl, r4, #26
 800c316:	e7f2      	b.n	800c2fe <_printf_float+0x422>
 800c318:	2301      	movs	r3, #1
 800c31a:	4642      	mov	r2, r8
 800c31c:	e7df      	b.n	800c2de <_printf_float+0x402>
 800c31e:	2301      	movs	r3, #1
 800c320:	464a      	mov	r2, r9
 800c322:	4631      	mov	r1, r6
 800c324:	4628      	mov	r0, r5
 800c326:	47b8      	blx	r7
 800c328:	3001      	adds	r0, #1
 800c32a:	f43f ae36 	beq.w	800bf9a <_printf_float+0xbe>
 800c32e:	f108 0801 	add.w	r8, r8, #1
 800c332:	68e3      	ldr	r3, [r4, #12]
 800c334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c336:	1a5b      	subs	r3, r3, r1
 800c338:	4543      	cmp	r3, r8
 800c33a:	dcf0      	bgt.n	800c31e <_printf_float+0x442>
 800c33c:	e6f8      	b.n	800c130 <_printf_float+0x254>
 800c33e:	f04f 0800 	mov.w	r8, #0
 800c342:	f104 0919 	add.w	r9, r4, #25
 800c346:	e7f4      	b.n	800c332 <_printf_float+0x456>

0800c348 <_printf_common>:
 800c348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c34c:	4616      	mov	r6, r2
 800c34e:	4699      	mov	r9, r3
 800c350:	688a      	ldr	r2, [r1, #8]
 800c352:	690b      	ldr	r3, [r1, #16]
 800c354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c358:	4293      	cmp	r3, r2
 800c35a:	bfb8      	it	lt
 800c35c:	4613      	movlt	r3, r2
 800c35e:	6033      	str	r3, [r6, #0]
 800c360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c364:	4607      	mov	r7, r0
 800c366:	460c      	mov	r4, r1
 800c368:	b10a      	cbz	r2, 800c36e <_printf_common+0x26>
 800c36a:	3301      	adds	r3, #1
 800c36c:	6033      	str	r3, [r6, #0]
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	0699      	lsls	r1, r3, #26
 800c372:	bf42      	ittt	mi
 800c374:	6833      	ldrmi	r3, [r6, #0]
 800c376:	3302      	addmi	r3, #2
 800c378:	6033      	strmi	r3, [r6, #0]
 800c37a:	6825      	ldr	r5, [r4, #0]
 800c37c:	f015 0506 	ands.w	r5, r5, #6
 800c380:	d106      	bne.n	800c390 <_printf_common+0x48>
 800c382:	f104 0a19 	add.w	sl, r4, #25
 800c386:	68e3      	ldr	r3, [r4, #12]
 800c388:	6832      	ldr	r2, [r6, #0]
 800c38a:	1a9b      	subs	r3, r3, r2
 800c38c:	42ab      	cmp	r3, r5
 800c38e:	dc26      	bgt.n	800c3de <_printf_common+0x96>
 800c390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c394:	1e13      	subs	r3, r2, #0
 800c396:	6822      	ldr	r2, [r4, #0]
 800c398:	bf18      	it	ne
 800c39a:	2301      	movne	r3, #1
 800c39c:	0692      	lsls	r2, r2, #26
 800c39e:	d42b      	bmi.n	800c3f8 <_printf_common+0xb0>
 800c3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	47c0      	blx	r8
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d01e      	beq.n	800c3ec <_printf_common+0xa4>
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	6922      	ldr	r2, [r4, #16]
 800c3b2:	f003 0306 	and.w	r3, r3, #6
 800c3b6:	2b04      	cmp	r3, #4
 800c3b8:	bf02      	ittt	eq
 800c3ba:	68e5      	ldreq	r5, [r4, #12]
 800c3bc:	6833      	ldreq	r3, [r6, #0]
 800c3be:	1aed      	subeq	r5, r5, r3
 800c3c0:	68a3      	ldr	r3, [r4, #8]
 800c3c2:	bf0c      	ite	eq
 800c3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3c8:	2500      	movne	r5, #0
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	bfc4      	itt	gt
 800c3ce:	1a9b      	subgt	r3, r3, r2
 800c3d0:	18ed      	addgt	r5, r5, r3
 800c3d2:	2600      	movs	r6, #0
 800c3d4:	341a      	adds	r4, #26
 800c3d6:	42b5      	cmp	r5, r6
 800c3d8:	d11a      	bne.n	800c410 <_printf_common+0xc8>
 800c3da:	2000      	movs	r0, #0
 800c3dc:	e008      	b.n	800c3f0 <_printf_common+0xa8>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	4652      	mov	r2, sl
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	47c0      	blx	r8
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	d103      	bne.n	800c3f4 <_printf_common+0xac>
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f4:	3501      	adds	r5, #1
 800c3f6:	e7c6      	b.n	800c386 <_printf_common+0x3e>
 800c3f8:	18e1      	adds	r1, r4, r3
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	2030      	movs	r0, #48	; 0x30
 800c3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c402:	4422      	add	r2, r4
 800c404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c40c:	3302      	adds	r3, #2
 800c40e:	e7c7      	b.n	800c3a0 <_printf_common+0x58>
 800c410:	2301      	movs	r3, #1
 800c412:	4622      	mov	r2, r4
 800c414:	4649      	mov	r1, r9
 800c416:	4638      	mov	r0, r7
 800c418:	47c0      	blx	r8
 800c41a:	3001      	adds	r0, #1
 800c41c:	d0e6      	beq.n	800c3ec <_printf_common+0xa4>
 800c41e:	3601      	adds	r6, #1
 800c420:	e7d9      	b.n	800c3d6 <_printf_common+0x8e>
	...

0800c424 <_printf_i>:
 800c424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c428:	7e0f      	ldrb	r7, [r1, #24]
 800c42a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c42c:	2f78      	cmp	r7, #120	; 0x78
 800c42e:	4691      	mov	r9, r2
 800c430:	4680      	mov	r8, r0
 800c432:	460c      	mov	r4, r1
 800c434:	469a      	mov	sl, r3
 800c436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c43a:	d807      	bhi.n	800c44c <_printf_i+0x28>
 800c43c:	2f62      	cmp	r7, #98	; 0x62
 800c43e:	d80a      	bhi.n	800c456 <_printf_i+0x32>
 800c440:	2f00      	cmp	r7, #0
 800c442:	f000 80d4 	beq.w	800c5ee <_printf_i+0x1ca>
 800c446:	2f58      	cmp	r7, #88	; 0x58
 800c448:	f000 80c0 	beq.w	800c5cc <_printf_i+0x1a8>
 800c44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c454:	e03a      	b.n	800c4cc <_printf_i+0xa8>
 800c456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c45a:	2b15      	cmp	r3, #21
 800c45c:	d8f6      	bhi.n	800c44c <_printf_i+0x28>
 800c45e:	a101      	add	r1, pc, #4	; (adr r1, 800c464 <_printf_i+0x40>)
 800c460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c464:	0800c4bd 	.word	0x0800c4bd
 800c468:	0800c4d1 	.word	0x0800c4d1
 800c46c:	0800c44d 	.word	0x0800c44d
 800c470:	0800c44d 	.word	0x0800c44d
 800c474:	0800c44d 	.word	0x0800c44d
 800c478:	0800c44d 	.word	0x0800c44d
 800c47c:	0800c4d1 	.word	0x0800c4d1
 800c480:	0800c44d 	.word	0x0800c44d
 800c484:	0800c44d 	.word	0x0800c44d
 800c488:	0800c44d 	.word	0x0800c44d
 800c48c:	0800c44d 	.word	0x0800c44d
 800c490:	0800c5d5 	.word	0x0800c5d5
 800c494:	0800c4fd 	.word	0x0800c4fd
 800c498:	0800c58f 	.word	0x0800c58f
 800c49c:	0800c44d 	.word	0x0800c44d
 800c4a0:	0800c44d 	.word	0x0800c44d
 800c4a4:	0800c5f7 	.word	0x0800c5f7
 800c4a8:	0800c44d 	.word	0x0800c44d
 800c4ac:	0800c4fd 	.word	0x0800c4fd
 800c4b0:	0800c44d 	.word	0x0800c44d
 800c4b4:	0800c44d 	.word	0x0800c44d
 800c4b8:	0800c597 	.word	0x0800c597
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	602a      	str	r2, [r5, #0]
 800c4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e09f      	b.n	800c610 <_printf_i+0x1ec>
 800c4d0:	6820      	ldr	r0, [r4, #0]
 800c4d2:	682b      	ldr	r3, [r5, #0]
 800c4d4:	0607      	lsls	r7, r0, #24
 800c4d6:	f103 0104 	add.w	r1, r3, #4
 800c4da:	6029      	str	r1, [r5, #0]
 800c4dc:	d501      	bpl.n	800c4e2 <_printf_i+0xbe>
 800c4de:	681e      	ldr	r6, [r3, #0]
 800c4e0:	e003      	b.n	800c4ea <_printf_i+0xc6>
 800c4e2:	0646      	lsls	r6, r0, #25
 800c4e4:	d5fb      	bpl.n	800c4de <_printf_i+0xba>
 800c4e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c4ea:	2e00      	cmp	r6, #0
 800c4ec:	da03      	bge.n	800c4f6 <_printf_i+0xd2>
 800c4ee:	232d      	movs	r3, #45	; 0x2d
 800c4f0:	4276      	negs	r6, r6
 800c4f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4f6:	485a      	ldr	r0, [pc, #360]	; (800c660 <_printf_i+0x23c>)
 800c4f8:	230a      	movs	r3, #10
 800c4fa:	e012      	b.n	800c522 <_printf_i+0xfe>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	6820      	ldr	r0, [r4, #0]
 800c500:	1d19      	adds	r1, r3, #4
 800c502:	6029      	str	r1, [r5, #0]
 800c504:	0605      	lsls	r5, r0, #24
 800c506:	d501      	bpl.n	800c50c <_printf_i+0xe8>
 800c508:	681e      	ldr	r6, [r3, #0]
 800c50a:	e002      	b.n	800c512 <_printf_i+0xee>
 800c50c:	0641      	lsls	r1, r0, #25
 800c50e:	d5fb      	bpl.n	800c508 <_printf_i+0xe4>
 800c510:	881e      	ldrh	r6, [r3, #0]
 800c512:	4853      	ldr	r0, [pc, #332]	; (800c660 <_printf_i+0x23c>)
 800c514:	2f6f      	cmp	r7, #111	; 0x6f
 800c516:	bf0c      	ite	eq
 800c518:	2308      	moveq	r3, #8
 800c51a:	230a      	movne	r3, #10
 800c51c:	2100      	movs	r1, #0
 800c51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c522:	6865      	ldr	r5, [r4, #4]
 800c524:	60a5      	str	r5, [r4, #8]
 800c526:	2d00      	cmp	r5, #0
 800c528:	bfa2      	ittt	ge
 800c52a:	6821      	ldrge	r1, [r4, #0]
 800c52c:	f021 0104 	bicge.w	r1, r1, #4
 800c530:	6021      	strge	r1, [r4, #0]
 800c532:	b90e      	cbnz	r6, 800c538 <_printf_i+0x114>
 800c534:	2d00      	cmp	r5, #0
 800c536:	d04b      	beq.n	800c5d0 <_printf_i+0x1ac>
 800c538:	4615      	mov	r5, r2
 800c53a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c53e:	fb03 6711 	mls	r7, r3, r1, r6
 800c542:	5dc7      	ldrb	r7, [r0, r7]
 800c544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c548:	4637      	mov	r7, r6
 800c54a:	42bb      	cmp	r3, r7
 800c54c:	460e      	mov	r6, r1
 800c54e:	d9f4      	bls.n	800c53a <_printf_i+0x116>
 800c550:	2b08      	cmp	r3, #8
 800c552:	d10b      	bne.n	800c56c <_printf_i+0x148>
 800c554:	6823      	ldr	r3, [r4, #0]
 800c556:	07de      	lsls	r6, r3, #31
 800c558:	d508      	bpl.n	800c56c <_printf_i+0x148>
 800c55a:	6923      	ldr	r3, [r4, #16]
 800c55c:	6861      	ldr	r1, [r4, #4]
 800c55e:	4299      	cmp	r1, r3
 800c560:	bfde      	ittt	le
 800c562:	2330      	movle	r3, #48	; 0x30
 800c564:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c56c:	1b52      	subs	r2, r2, r5
 800c56e:	6122      	str	r2, [r4, #16]
 800c570:	f8cd a000 	str.w	sl, [sp]
 800c574:	464b      	mov	r3, r9
 800c576:	aa03      	add	r2, sp, #12
 800c578:	4621      	mov	r1, r4
 800c57a:	4640      	mov	r0, r8
 800c57c:	f7ff fee4 	bl	800c348 <_printf_common>
 800c580:	3001      	adds	r0, #1
 800c582:	d14a      	bne.n	800c61a <_printf_i+0x1f6>
 800c584:	f04f 30ff 	mov.w	r0, #4294967295
 800c588:	b004      	add	sp, #16
 800c58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	f043 0320 	orr.w	r3, r3, #32
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	4833      	ldr	r0, [pc, #204]	; (800c664 <_printf_i+0x240>)
 800c598:	2778      	movs	r7, #120	; 0x78
 800c59a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	6829      	ldr	r1, [r5, #0]
 800c5a2:	061f      	lsls	r7, r3, #24
 800c5a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5a8:	d402      	bmi.n	800c5b0 <_printf_i+0x18c>
 800c5aa:	065f      	lsls	r7, r3, #25
 800c5ac:	bf48      	it	mi
 800c5ae:	b2b6      	uxthmi	r6, r6
 800c5b0:	07df      	lsls	r7, r3, #31
 800c5b2:	bf48      	it	mi
 800c5b4:	f043 0320 	orrmi.w	r3, r3, #32
 800c5b8:	6029      	str	r1, [r5, #0]
 800c5ba:	bf48      	it	mi
 800c5bc:	6023      	strmi	r3, [r4, #0]
 800c5be:	b91e      	cbnz	r6, 800c5c8 <_printf_i+0x1a4>
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	f023 0320 	bic.w	r3, r3, #32
 800c5c6:	6023      	str	r3, [r4, #0]
 800c5c8:	2310      	movs	r3, #16
 800c5ca:	e7a7      	b.n	800c51c <_printf_i+0xf8>
 800c5cc:	4824      	ldr	r0, [pc, #144]	; (800c660 <_printf_i+0x23c>)
 800c5ce:	e7e4      	b.n	800c59a <_printf_i+0x176>
 800c5d0:	4615      	mov	r5, r2
 800c5d2:	e7bd      	b.n	800c550 <_printf_i+0x12c>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	6826      	ldr	r6, [r4, #0]
 800c5d8:	6961      	ldr	r1, [r4, #20]
 800c5da:	1d18      	adds	r0, r3, #4
 800c5dc:	6028      	str	r0, [r5, #0]
 800c5de:	0635      	lsls	r5, r6, #24
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	d501      	bpl.n	800c5e8 <_printf_i+0x1c4>
 800c5e4:	6019      	str	r1, [r3, #0]
 800c5e6:	e002      	b.n	800c5ee <_printf_i+0x1ca>
 800c5e8:	0670      	lsls	r0, r6, #25
 800c5ea:	d5fb      	bpl.n	800c5e4 <_printf_i+0x1c0>
 800c5ec:	8019      	strh	r1, [r3, #0]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	6123      	str	r3, [r4, #16]
 800c5f2:	4615      	mov	r5, r2
 800c5f4:	e7bc      	b.n	800c570 <_printf_i+0x14c>
 800c5f6:	682b      	ldr	r3, [r5, #0]
 800c5f8:	1d1a      	adds	r2, r3, #4
 800c5fa:	602a      	str	r2, [r5, #0]
 800c5fc:	681d      	ldr	r5, [r3, #0]
 800c5fe:	6862      	ldr	r2, [r4, #4]
 800c600:	2100      	movs	r1, #0
 800c602:	4628      	mov	r0, r5
 800c604:	f7f3 fdf4 	bl	80001f0 <memchr>
 800c608:	b108      	cbz	r0, 800c60e <_printf_i+0x1ea>
 800c60a:	1b40      	subs	r0, r0, r5
 800c60c:	6060      	str	r0, [r4, #4]
 800c60e:	6863      	ldr	r3, [r4, #4]
 800c610:	6123      	str	r3, [r4, #16]
 800c612:	2300      	movs	r3, #0
 800c614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c618:	e7aa      	b.n	800c570 <_printf_i+0x14c>
 800c61a:	6923      	ldr	r3, [r4, #16]
 800c61c:	462a      	mov	r2, r5
 800c61e:	4649      	mov	r1, r9
 800c620:	4640      	mov	r0, r8
 800c622:	47d0      	blx	sl
 800c624:	3001      	adds	r0, #1
 800c626:	d0ad      	beq.n	800c584 <_printf_i+0x160>
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	079b      	lsls	r3, r3, #30
 800c62c:	d413      	bmi.n	800c656 <_printf_i+0x232>
 800c62e:	68e0      	ldr	r0, [r4, #12]
 800c630:	9b03      	ldr	r3, [sp, #12]
 800c632:	4298      	cmp	r0, r3
 800c634:	bfb8      	it	lt
 800c636:	4618      	movlt	r0, r3
 800c638:	e7a6      	b.n	800c588 <_printf_i+0x164>
 800c63a:	2301      	movs	r3, #1
 800c63c:	4632      	mov	r2, r6
 800c63e:	4649      	mov	r1, r9
 800c640:	4640      	mov	r0, r8
 800c642:	47d0      	blx	sl
 800c644:	3001      	adds	r0, #1
 800c646:	d09d      	beq.n	800c584 <_printf_i+0x160>
 800c648:	3501      	adds	r5, #1
 800c64a:	68e3      	ldr	r3, [r4, #12]
 800c64c:	9903      	ldr	r1, [sp, #12]
 800c64e:	1a5b      	subs	r3, r3, r1
 800c650:	42ab      	cmp	r3, r5
 800c652:	dcf2      	bgt.n	800c63a <_printf_i+0x216>
 800c654:	e7eb      	b.n	800c62e <_printf_i+0x20a>
 800c656:	2500      	movs	r5, #0
 800c658:	f104 0619 	add.w	r6, r4, #25
 800c65c:	e7f5      	b.n	800c64a <_printf_i+0x226>
 800c65e:	bf00      	nop
 800c660:	0800ea6e 	.word	0x0800ea6e
 800c664:	0800ea7f 	.word	0x0800ea7f

0800c668 <std>:
 800c668:	2300      	movs	r3, #0
 800c66a:	b510      	push	{r4, lr}
 800c66c:	4604      	mov	r4, r0
 800c66e:	e9c0 3300 	strd	r3, r3, [r0]
 800c672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c676:	6083      	str	r3, [r0, #8]
 800c678:	8181      	strh	r1, [r0, #12]
 800c67a:	6643      	str	r3, [r0, #100]	; 0x64
 800c67c:	81c2      	strh	r2, [r0, #14]
 800c67e:	6183      	str	r3, [r0, #24]
 800c680:	4619      	mov	r1, r3
 800c682:	2208      	movs	r2, #8
 800c684:	305c      	adds	r0, #92	; 0x5c
 800c686:	f000 f906 	bl	800c896 <memset>
 800c68a:	4b0d      	ldr	r3, [pc, #52]	; (800c6c0 <std+0x58>)
 800c68c:	6263      	str	r3, [r4, #36]	; 0x24
 800c68e:	4b0d      	ldr	r3, [pc, #52]	; (800c6c4 <std+0x5c>)
 800c690:	62a3      	str	r3, [r4, #40]	; 0x28
 800c692:	4b0d      	ldr	r3, [pc, #52]	; (800c6c8 <std+0x60>)
 800c694:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c696:	4b0d      	ldr	r3, [pc, #52]	; (800c6cc <std+0x64>)
 800c698:	6323      	str	r3, [r4, #48]	; 0x30
 800c69a:	4b0d      	ldr	r3, [pc, #52]	; (800c6d0 <std+0x68>)
 800c69c:	6224      	str	r4, [r4, #32]
 800c69e:	429c      	cmp	r4, r3
 800c6a0:	d006      	beq.n	800c6b0 <std+0x48>
 800c6a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c6a6:	4294      	cmp	r4, r2
 800c6a8:	d002      	beq.n	800c6b0 <std+0x48>
 800c6aa:	33d0      	adds	r3, #208	; 0xd0
 800c6ac:	429c      	cmp	r4, r3
 800c6ae:	d105      	bne.n	800c6bc <std+0x54>
 800c6b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b8:	f000 b96a 	b.w	800c990 <__retarget_lock_init_recursive>
 800c6bc:	bd10      	pop	{r4, pc}
 800c6be:	bf00      	nop
 800c6c0:	0800c811 	.word	0x0800c811
 800c6c4:	0800c833 	.word	0x0800c833
 800c6c8:	0800c86b 	.word	0x0800c86b
 800c6cc:	0800c88f 	.word	0x0800c88f
 800c6d0:	2000246c 	.word	0x2000246c

0800c6d4 <stdio_exit_handler>:
 800c6d4:	4a02      	ldr	r2, [pc, #8]	; (800c6e0 <stdio_exit_handler+0xc>)
 800c6d6:	4903      	ldr	r1, [pc, #12]	; (800c6e4 <stdio_exit_handler+0x10>)
 800c6d8:	4803      	ldr	r0, [pc, #12]	; (800c6e8 <stdio_exit_handler+0x14>)
 800c6da:	f000 b869 	b.w	800c7b0 <_fwalk_sglue>
 800c6de:	bf00      	nop
 800c6e0:	20000024 	.word	0x20000024
 800c6e4:	0800e339 	.word	0x0800e339
 800c6e8:	20000030 	.word	0x20000030

0800c6ec <cleanup_stdio>:
 800c6ec:	6841      	ldr	r1, [r0, #4]
 800c6ee:	4b0c      	ldr	r3, [pc, #48]	; (800c720 <cleanup_stdio+0x34>)
 800c6f0:	4299      	cmp	r1, r3
 800c6f2:	b510      	push	{r4, lr}
 800c6f4:	4604      	mov	r4, r0
 800c6f6:	d001      	beq.n	800c6fc <cleanup_stdio+0x10>
 800c6f8:	f001 fe1e 	bl	800e338 <_fflush_r>
 800c6fc:	68a1      	ldr	r1, [r4, #8]
 800c6fe:	4b09      	ldr	r3, [pc, #36]	; (800c724 <cleanup_stdio+0x38>)
 800c700:	4299      	cmp	r1, r3
 800c702:	d002      	beq.n	800c70a <cleanup_stdio+0x1e>
 800c704:	4620      	mov	r0, r4
 800c706:	f001 fe17 	bl	800e338 <_fflush_r>
 800c70a:	68e1      	ldr	r1, [r4, #12]
 800c70c:	4b06      	ldr	r3, [pc, #24]	; (800c728 <cleanup_stdio+0x3c>)
 800c70e:	4299      	cmp	r1, r3
 800c710:	d004      	beq.n	800c71c <cleanup_stdio+0x30>
 800c712:	4620      	mov	r0, r4
 800c714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c718:	f001 be0e 	b.w	800e338 <_fflush_r>
 800c71c:	bd10      	pop	{r4, pc}
 800c71e:	bf00      	nop
 800c720:	2000246c 	.word	0x2000246c
 800c724:	200024d4 	.word	0x200024d4
 800c728:	2000253c 	.word	0x2000253c

0800c72c <global_stdio_init.part.0>:
 800c72c:	b510      	push	{r4, lr}
 800c72e:	4b0b      	ldr	r3, [pc, #44]	; (800c75c <global_stdio_init.part.0+0x30>)
 800c730:	4c0b      	ldr	r4, [pc, #44]	; (800c760 <global_stdio_init.part.0+0x34>)
 800c732:	4a0c      	ldr	r2, [pc, #48]	; (800c764 <global_stdio_init.part.0+0x38>)
 800c734:	601a      	str	r2, [r3, #0]
 800c736:	4620      	mov	r0, r4
 800c738:	2200      	movs	r2, #0
 800c73a:	2104      	movs	r1, #4
 800c73c:	f7ff ff94 	bl	800c668 <std>
 800c740:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c744:	2201      	movs	r2, #1
 800c746:	2109      	movs	r1, #9
 800c748:	f7ff ff8e 	bl	800c668 <std>
 800c74c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c750:	2202      	movs	r2, #2
 800c752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c756:	2112      	movs	r1, #18
 800c758:	f7ff bf86 	b.w	800c668 <std>
 800c75c:	200025a4 	.word	0x200025a4
 800c760:	2000246c 	.word	0x2000246c
 800c764:	0800c6d5 	.word	0x0800c6d5

0800c768 <__sfp_lock_acquire>:
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <__sfp_lock_acquire+0x8>)
 800c76a:	f000 b912 	b.w	800c992 <__retarget_lock_acquire_recursive>
 800c76e:	bf00      	nop
 800c770:	200025ad 	.word	0x200025ad

0800c774 <__sfp_lock_release>:
 800c774:	4801      	ldr	r0, [pc, #4]	; (800c77c <__sfp_lock_release+0x8>)
 800c776:	f000 b90d 	b.w	800c994 <__retarget_lock_release_recursive>
 800c77a:	bf00      	nop
 800c77c:	200025ad 	.word	0x200025ad

0800c780 <__sinit>:
 800c780:	b510      	push	{r4, lr}
 800c782:	4604      	mov	r4, r0
 800c784:	f7ff fff0 	bl	800c768 <__sfp_lock_acquire>
 800c788:	6a23      	ldr	r3, [r4, #32]
 800c78a:	b11b      	cbz	r3, 800c794 <__sinit+0x14>
 800c78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c790:	f7ff bff0 	b.w	800c774 <__sfp_lock_release>
 800c794:	4b04      	ldr	r3, [pc, #16]	; (800c7a8 <__sinit+0x28>)
 800c796:	6223      	str	r3, [r4, #32]
 800c798:	4b04      	ldr	r3, [pc, #16]	; (800c7ac <__sinit+0x2c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1f5      	bne.n	800c78c <__sinit+0xc>
 800c7a0:	f7ff ffc4 	bl	800c72c <global_stdio_init.part.0>
 800c7a4:	e7f2      	b.n	800c78c <__sinit+0xc>
 800c7a6:	bf00      	nop
 800c7a8:	0800c6ed 	.word	0x0800c6ed
 800c7ac:	200025a4 	.word	0x200025a4

0800c7b0 <_fwalk_sglue>:
 800c7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7b4:	4607      	mov	r7, r0
 800c7b6:	4688      	mov	r8, r1
 800c7b8:	4614      	mov	r4, r2
 800c7ba:	2600      	movs	r6, #0
 800c7bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c7c4:	d505      	bpl.n	800c7d2 <_fwalk_sglue+0x22>
 800c7c6:	6824      	ldr	r4, [r4, #0]
 800c7c8:	2c00      	cmp	r4, #0
 800c7ca:	d1f7      	bne.n	800c7bc <_fwalk_sglue+0xc>
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d2:	89ab      	ldrh	r3, [r5, #12]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d907      	bls.n	800c7e8 <_fwalk_sglue+0x38>
 800c7d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	d003      	beq.n	800c7e8 <_fwalk_sglue+0x38>
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	47c0      	blx	r8
 800c7e6:	4306      	orrs	r6, r0
 800c7e8:	3568      	adds	r5, #104	; 0x68
 800c7ea:	e7e9      	b.n	800c7c0 <_fwalk_sglue+0x10>

0800c7ec <iprintf>:
 800c7ec:	b40f      	push	{r0, r1, r2, r3}
 800c7ee:	b507      	push	{r0, r1, r2, lr}
 800c7f0:	4906      	ldr	r1, [pc, #24]	; (800c80c <iprintf+0x20>)
 800c7f2:	ab04      	add	r3, sp, #16
 800c7f4:	6808      	ldr	r0, [r1, #0]
 800c7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7fa:	6881      	ldr	r1, [r0, #8]
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	f001 fbfb 	bl	800dff8 <_vfiprintf_r>
 800c802:	b003      	add	sp, #12
 800c804:	f85d eb04 	ldr.w	lr, [sp], #4
 800c808:	b004      	add	sp, #16
 800c80a:	4770      	bx	lr
 800c80c:	2000007c 	.word	0x2000007c

0800c810 <__sread>:
 800c810:	b510      	push	{r4, lr}
 800c812:	460c      	mov	r4, r1
 800c814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c818:	f000 f86c 	bl	800c8f4 <_read_r>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	bfab      	itete	ge
 800c820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c822:	89a3      	ldrhlt	r3, [r4, #12]
 800c824:	181b      	addge	r3, r3, r0
 800c826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c82a:	bfac      	ite	ge
 800c82c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c82e:	81a3      	strhlt	r3, [r4, #12]
 800c830:	bd10      	pop	{r4, pc}

0800c832 <__swrite>:
 800c832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c836:	461f      	mov	r7, r3
 800c838:	898b      	ldrh	r3, [r1, #12]
 800c83a:	05db      	lsls	r3, r3, #23
 800c83c:	4605      	mov	r5, r0
 800c83e:	460c      	mov	r4, r1
 800c840:	4616      	mov	r6, r2
 800c842:	d505      	bpl.n	800c850 <__swrite+0x1e>
 800c844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c848:	2302      	movs	r3, #2
 800c84a:	2200      	movs	r2, #0
 800c84c:	f000 f840 	bl	800c8d0 <_lseek_r>
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c85a:	81a3      	strh	r3, [r4, #12]
 800c85c:	4632      	mov	r2, r6
 800c85e:	463b      	mov	r3, r7
 800c860:	4628      	mov	r0, r5
 800c862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c866:	f000 b857 	b.w	800c918 <_write_r>

0800c86a <__sseek>:
 800c86a:	b510      	push	{r4, lr}
 800c86c:	460c      	mov	r4, r1
 800c86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c872:	f000 f82d 	bl	800c8d0 <_lseek_r>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	bf15      	itete	ne
 800c87c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c87e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c886:	81a3      	strheq	r3, [r4, #12]
 800c888:	bf18      	it	ne
 800c88a:	81a3      	strhne	r3, [r4, #12]
 800c88c:	bd10      	pop	{r4, pc}

0800c88e <__sclose>:
 800c88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c892:	f000 b80d 	b.w	800c8b0 <_close_r>

0800c896 <memset>:
 800c896:	4402      	add	r2, r0
 800c898:	4603      	mov	r3, r0
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d100      	bne.n	800c8a0 <memset+0xa>
 800c89e:	4770      	bx	lr
 800c8a0:	f803 1b01 	strb.w	r1, [r3], #1
 800c8a4:	e7f9      	b.n	800c89a <memset+0x4>
	...

0800c8a8 <_localeconv_r>:
 800c8a8:	4800      	ldr	r0, [pc, #0]	; (800c8ac <_localeconv_r+0x4>)
 800c8aa:	4770      	bx	lr
 800c8ac:	20000170 	.word	0x20000170

0800c8b0 <_close_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d06      	ldr	r5, [pc, #24]	; (800c8cc <_close_r+0x1c>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	602b      	str	r3, [r5, #0]
 800c8bc:	f7f6 fc93 	bl	80031e6 <_close>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	d102      	bne.n	800c8ca <_close_r+0x1a>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	b103      	cbz	r3, 800c8ca <_close_r+0x1a>
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	200025a8 	.word	0x200025a8

0800c8d0 <_lseek_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d07      	ldr	r5, [pc, #28]	; (800c8f0 <_lseek_r+0x20>)
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	4608      	mov	r0, r1
 800c8d8:	4611      	mov	r1, r2
 800c8da:	2200      	movs	r2, #0
 800c8dc:	602a      	str	r2, [r5, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	f7f6 fca8 	bl	8003234 <_lseek>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_lseek_r+0x1e>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_lseek_r+0x1e>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	200025a8 	.word	0x200025a8

0800c8f4 <_read_r>:
 800c8f4:	b538      	push	{r3, r4, r5, lr}
 800c8f6:	4d07      	ldr	r5, [pc, #28]	; (800c914 <_read_r+0x20>)
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	4608      	mov	r0, r1
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	2200      	movs	r2, #0
 800c900:	602a      	str	r2, [r5, #0]
 800c902:	461a      	mov	r2, r3
 800c904:	f7f6 fc36 	bl	8003174 <_read>
 800c908:	1c43      	adds	r3, r0, #1
 800c90a:	d102      	bne.n	800c912 <_read_r+0x1e>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	b103      	cbz	r3, 800c912 <_read_r+0x1e>
 800c910:	6023      	str	r3, [r4, #0]
 800c912:	bd38      	pop	{r3, r4, r5, pc}
 800c914:	200025a8 	.word	0x200025a8

0800c918 <_write_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4d07      	ldr	r5, [pc, #28]	; (800c938 <_write_r+0x20>)
 800c91c:	4604      	mov	r4, r0
 800c91e:	4608      	mov	r0, r1
 800c920:	4611      	mov	r1, r2
 800c922:	2200      	movs	r2, #0
 800c924:	602a      	str	r2, [r5, #0]
 800c926:	461a      	mov	r2, r3
 800c928:	f7f6 fc41 	bl	80031ae <_write>
 800c92c:	1c43      	adds	r3, r0, #1
 800c92e:	d102      	bne.n	800c936 <_write_r+0x1e>
 800c930:	682b      	ldr	r3, [r5, #0]
 800c932:	b103      	cbz	r3, 800c936 <_write_r+0x1e>
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	200025a8 	.word	0x200025a8

0800c93c <__errno>:
 800c93c:	4b01      	ldr	r3, [pc, #4]	; (800c944 <__errno+0x8>)
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	2000007c 	.word	0x2000007c

0800c948 <__libc_init_array>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	4d0d      	ldr	r5, [pc, #52]	; (800c980 <__libc_init_array+0x38>)
 800c94c:	4c0d      	ldr	r4, [pc, #52]	; (800c984 <__libc_init_array+0x3c>)
 800c94e:	1b64      	subs	r4, r4, r5
 800c950:	10a4      	asrs	r4, r4, #2
 800c952:	2600      	movs	r6, #0
 800c954:	42a6      	cmp	r6, r4
 800c956:	d109      	bne.n	800c96c <__libc_init_array+0x24>
 800c958:	4d0b      	ldr	r5, [pc, #44]	; (800c988 <__libc_init_array+0x40>)
 800c95a:	4c0c      	ldr	r4, [pc, #48]	; (800c98c <__libc_init_array+0x44>)
 800c95c:	f001 fef0 	bl	800e740 <_init>
 800c960:	1b64      	subs	r4, r4, r5
 800c962:	10a4      	asrs	r4, r4, #2
 800c964:	2600      	movs	r6, #0
 800c966:	42a6      	cmp	r6, r4
 800c968:	d105      	bne.n	800c976 <__libc_init_array+0x2e>
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c970:	4798      	blx	r3
 800c972:	3601      	adds	r6, #1
 800c974:	e7ee      	b.n	800c954 <__libc_init_array+0xc>
 800c976:	f855 3b04 	ldr.w	r3, [r5], #4
 800c97a:	4798      	blx	r3
 800c97c:	3601      	adds	r6, #1
 800c97e:	e7f2      	b.n	800c966 <__libc_init_array+0x1e>
 800c980:	0800edd4 	.word	0x0800edd4
 800c984:	0800edd4 	.word	0x0800edd4
 800c988:	0800edd4 	.word	0x0800edd4
 800c98c:	0800edd8 	.word	0x0800edd8

0800c990 <__retarget_lock_init_recursive>:
 800c990:	4770      	bx	lr

0800c992 <__retarget_lock_acquire_recursive>:
 800c992:	4770      	bx	lr

0800c994 <__retarget_lock_release_recursive>:
 800c994:	4770      	bx	lr

0800c996 <memcpy>:
 800c996:	440a      	add	r2, r1
 800c998:	4291      	cmp	r1, r2
 800c99a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c99e:	d100      	bne.n	800c9a2 <memcpy+0xc>
 800c9a0:	4770      	bx	lr
 800c9a2:	b510      	push	{r4, lr}
 800c9a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9ac:	4291      	cmp	r1, r2
 800c9ae:	d1f9      	bne.n	800c9a4 <memcpy+0xe>
 800c9b0:	bd10      	pop	{r4, pc}

0800c9b2 <quorem>:
 800c9b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b6:	6903      	ldr	r3, [r0, #16]
 800c9b8:	690c      	ldr	r4, [r1, #16]
 800c9ba:	42a3      	cmp	r3, r4
 800c9bc:	4607      	mov	r7, r0
 800c9be:	db7e      	blt.n	800cabe <quorem+0x10c>
 800c9c0:	3c01      	subs	r4, #1
 800c9c2:	f101 0814 	add.w	r8, r1, #20
 800c9c6:	f100 0514 	add.w	r5, r0, #20
 800c9ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9ce:	9301      	str	r3, [sp, #4]
 800c9d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c9d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c9e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9e8:	d331      	bcc.n	800ca4e <quorem+0x9c>
 800c9ea:	f04f 0e00 	mov.w	lr, #0
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	46ac      	mov	ip, r5
 800c9f2:	46f2      	mov	sl, lr
 800c9f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9f8:	b293      	uxth	r3, r2
 800c9fa:	fb06 e303 	mla	r3, r6, r3, lr
 800c9fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca02:	0c1a      	lsrs	r2, r3, #16
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	ebaa 0303 	sub.w	r3, sl, r3
 800ca0a:	f8dc a000 	ldr.w	sl, [ip]
 800ca0e:	fa13 f38a 	uxtah	r3, r3, sl
 800ca12:	fb06 220e 	mla	r2, r6, lr, r2
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	9b00      	ldr	r3, [sp, #0]
 800ca1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca1e:	b292      	uxth	r2, r2
 800ca20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ca24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca28:	f8bd 3000 	ldrh.w	r3, [sp]
 800ca2c:	4581      	cmp	r9, r0
 800ca2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca32:	f84c 3b04 	str.w	r3, [ip], #4
 800ca36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca3a:	d2db      	bcs.n	800c9f4 <quorem+0x42>
 800ca3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ca40:	b92b      	cbnz	r3, 800ca4e <quorem+0x9c>
 800ca42:	9b01      	ldr	r3, [sp, #4]
 800ca44:	3b04      	subs	r3, #4
 800ca46:	429d      	cmp	r5, r3
 800ca48:	461a      	mov	r2, r3
 800ca4a:	d32c      	bcc.n	800caa6 <quorem+0xf4>
 800ca4c:	613c      	str	r4, [r7, #16]
 800ca4e:	4638      	mov	r0, r7
 800ca50:	f001 f9a8 	bl	800dda4 <__mcmp>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	db22      	blt.n	800ca9e <quorem+0xec>
 800ca58:	3601      	adds	r6, #1
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca62:	f8d1 c000 	ldr.w	ip, [r1]
 800ca66:	b293      	uxth	r3, r2
 800ca68:	1ac3      	subs	r3, r0, r3
 800ca6a:	0c12      	lsrs	r2, r2, #16
 800ca6c:	fa13 f38c 	uxtah	r3, r3, ip
 800ca70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ca74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca7e:	45c1      	cmp	r9, r8
 800ca80:	f841 3b04 	str.w	r3, [r1], #4
 800ca84:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca88:	d2e9      	bcs.n	800ca5e <quorem+0xac>
 800ca8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca92:	b922      	cbnz	r2, 800ca9e <quorem+0xec>
 800ca94:	3b04      	subs	r3, #4
 800ca96:	429d      	cmp	r5, r3
 800ca98:	461a      	mov	r2, r3
 800ca9a:	d30a      	bcc.n	800cab2 <quorem+0x100>
 800ca9c:	613c      	str	r4, [r7, #16]
 800ca9e:	4630      	mov	r0, r6
 800caa0:	b003      	add	sp, #12
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	6812      	ldr	r2, [r2, #0]
 800caa8:	3b04      	subs	r3, #4
 800caaa:	2a00      	cmp	r2, #0
 800caac:	d1ce      	bne.n	800ca4c <quorem+0x9a>
 800caae:	3c01      	subs	r4, #1
 800cab0:	e7c9      	b.n	800ca46 <quorem+0x94>
 800cab2:	6812      	ldr	r2, [r2, #0]
 800cab4:	3b04      	subs	r3, #4
 800cab6:	2a00      	cmp	r2, #0
 800cab8:	d1f0      	bne.n	800ca9c <quorem+0xea>
 800caba:	3c01      	subs	r4, #1
 800cabc:	e7eb      	b.n	800ca96 <quorem+0xe4>
 800cabe:	2000      	movs	r0, #0
 800cac0:	e7ee      	b.n	800caa0 <quorem+0xee>
 800cac2:	0000      	movs	r0, r0
 800cac4:	0000      	movs	r0, r0
	...

0800cac8 <_dtoa_r>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	ed2d 8b04 	vpush	{d8-d9}
 800cad0:	69c5      	ldr	r5, [r0, #28]
 800cad2:	b093      	sub	sp, #76	; 0x4c
 800cad4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cad8:	ec57 6b10 	vmov	r6, r7, d0
 800cadc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cae0:	9107      	str	r1, [sp, #28]
 800cae2:	4604      	mov	r4, r0
 800cae4:	920a      	str	r2, [sp, #40]	; 0x28
 800cae6:	930d      	str	r3, [sp, #52]	; 0x34
 800cae8:	b975      	cbnz	r5, 800cb08 <_dtoa_r+0x40>
 800caea:	2010      	movs	r0, #16
 800caec:	f000 fe2a 	bl	800d744 <malloc>
 800caf0:	4602      	mov	r2, r0
 800caf2:	61e0      	str	r0, [r4, #28]
 800caf4:	b920      	cbnz	r0, 800cb00 <_dtoa_r+0x38>
 800caf6:	4bae      	ldr	r3, [pc, #696]	; (800cdb0 <_dtoa_r+0x2e8>)
 800caf8:	21ef      	movs	r1, #239	; 0xef
 800cafa:	48ae      	ldr	r0, [pc, #696]	; (800cdb4 <_dtoa_r+0x2ec>)
 800cafc:	f001 fcea 	bl	800e4d4 <__assert_func>
 800cb00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb04:	6005      	str	r5, [r0, #0]
 800cb06:	60c5      	str	r5, [r0, #12]
 800cb08:	69e3      	ldr	r3, [r4, #28]
 800cb0a:	6819      	ldr	r1, [r3, #0]
 800cb0c:	b151      	cbz	r1, 800cb24 <_dtoa_r+0x5c>
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	604a      	str	r2, [r1, #4]
 800cb12:	2301      	movs	r3, #1
 800cb14:	4093      	lsls	r3, r2
 800cb16:	608b      	str	r3, [r1, #8]
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f000 ff07 	bl	800d92c <_Bfree>
 800cb1e:	69e3      	ldr	r3, [r4, #28]
 800cb20:	2200      	movs	r2, #0
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	1e3b      	subs	r3, r7, #0
 800cb26:	bfbb      	ittet	lt
 800cb28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb2c:	9303      	strlt	r3, [sp, #12]
 800cb2e:	2300      	movge	r3, #0
 800cb30:	2201      	movlt	r2, #1
 800cb32:	bfac      	ite	ge
 800cb34:	f8c8 3000 	strge.w	r3, [r8]
 800cb38:	f8c8 2000 	strlt.w	r2, [r8]
 800cb3c:	4b9e      	ldr	r3, [pc, #632]	; (800cdb8 <_dtoa_r+0x2f0>)
 800cb3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cb42:	ea33 0308 	bics.w	r3, r3, r8
 800cb46:	d11b      	bne.n	800cb80 <_dtoa_r+0xb8>
 800cb48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb4a:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cb54:	4333      	orrs	r3, r6
 800cb56:	f000 8593 	beq.w	800d680 <_dtoa_r+0xbb8>
 800cb5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb5c:	b963      	cbnz	r3, 800cb78 <_dtoa_r+0xb0>
 800cb5e:	4b97      	ldr	r3, [pc, #604]	; (800cdbc <_dtoa_r+0x2f4>)
 800cb60:	e027      	b.n	800cbb2 <_dtoa_r+0xea>
 800cb62:	4b97      	ldr	r3, [pc, #604]	; (800cdc0 <_dtoa_r+0x2f8>)
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	3308      	adds	r3, #8
 800cb68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	9800      	ldr	r0, [sp, #0]
 800cb6e:	b013      	add	sp, #76	; 0x4c
 800cb70:	ecbd 8b04 	vpop	{d8-d9}
 800cb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb78:	4b90      	ldr	r3, [pc, #576]	; (800cdbc <_dtoa_r+0x2f4>)
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	3303      	adds	r3, #3
 800cb7e:	e7f3      	b.n	800cb68 <_dtoa_r+0xa0>
 800cb80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb84:	2200      	movs	r2, #0
 800cb86:	ec51 0b17 	vmov	r0, r1, d7
 800cb8a:	eeb0 8a47 	vmov.f32	s16, s14
 800cb8e:	eef0 8a67 	vmov.f32	s17, s15
 800cb92:	2300      	movs	r3, #0
 800cb94:	f7f3 ffa8 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb98:	4681      	mov	r9, r0
 800cb9a:	b160      	cbz	r0, 800cbb6 <_dtoa_r+0xee>
 800cb9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb9e:	2301      	movs	r3, #1
 800cba0:	6013      	str	r3, [r2, #0]
 800cba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f000 8568 	beq.w	800d67a <_dtoa_r+0xbb2>
 800cbaa:	4b86      	ldr	r3, [pc, #536]	; (800cdc4 <_dtoa_r+0x2fc>)
 800cbac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	e7da      	b.n	800cb6c <_dtoa_r+0xa4>
 800cbb6:	aa10      	add	r2, sp, #64	; 0x40
 800cbb8:	a911      	add	r1, sp, #68	; 0x44
 800cbba:	4620      	mov	r0, r4
 800cbbc:	eeb0 0a48 	vmov.f32	s0, s16
 800cbc0:	eef0 0a68 	vmov.f32	s1, s17
 800cbc4:	f001 f994 	bl	800def0 <__d2b>
 800cbc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cbcc:	4682      	mov	sl, r0
 800cbce:	2d00      	cmp	r5, #0
 800cbd0:	d07f      	beq.n	800ccd2 <_dtoa_r+0x20a>
 800cbd2:	ee18 3a90 	vmov	r3, s17
 800cbd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cbde:	ec51 0b18 	vmov	r0, r1, d8
 800cbe2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cbe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cbea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cbee:	4619      	mov	r1, r3
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	4b75      	ldr	r3, [pc, #468]	; (800cdc8 <_dtoa_r+0x300>)
 800cbf4:	f7f3 fb58 	bl	80002a8 <__aeabi_dsub>
 800cbf8:	a367      	add	r3, pc, #412	; (adr r3, 800cd98 <_dtoa_r+0x2d0>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	f7f3 fd0b 	bl	8000618 <__aeabi_dmul>
 800cc02:	a367      	add	r3, pc, #412	; (adr r3, 800cda0 <_dtoa_r+0x2d8>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fb50 	bl	80002ac <__adddf3>
 800cc0c:	4606      	mov	r6, r0
 800cc0e:	4628      	mov	r0, r5
 800cc10:	460f      	mov	r7, r1
 800cc12:	f7f3 fc97 	bl	8000544 <__aeabi_i2d>
 800cc16:	a364      	add	r3, pc, #400	; (adr r3, 800cda8 <_dtoa_r+0x2e0>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	f7f3 fcfc 	bl	8000618 <__aeabi_dmul>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4630      	mov	r0, r6
 800cc26:	4639      	mov	r1, r7
 800cc28:	f7f3 fb40 	bl	80002ac <__adddf3>
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	460f      	mov	r7, r1
 800cc30:	f7f3 ffa2 	bl	8000b78 <__aeabi_d2iz>
 800cc34:	2200      	movs	r2, #0
 800cc36:	4683      	mov	fp, r0
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	f7f3 ff5d 	bl	8000afc <__aeabi_dcmplt>
 800cc42:	b148      	cbz	r0, 800cc58 <_dtoa_r+0x190>
 800cc44:	4658      	mov	r0, fp
 800cc46:	f7f3 fc7d 	bl	8000544 <__aeabi_i2d>
 800cc4a:	4632      	mov	r2, r6
 800cc4c:	463b      	mov	r3, r7
 800cc4e:	f7f3 ff4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc52:	b908      	cbnz	r0, 800cc58 <_dtoa_r+0x190>
 800cc54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc58:	f1bb 0f16 	cmp.w	fp, #22
 800cc5c:	d857      	bhi.n	800cd0e <_dtoa_r+0x246>
 800cc5e:	4b5b      	ldr	r3, [pc, #364]	; (800cdcc <_dtoa_r+0x304>)
 800cc60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	ec51 0b18 	vmov	r0, r1, d8
 800cc6c:	f7f3 ff46 	bl	8000afc <__aeabi_dcmplt>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d04e      	beq.n	800cd12 <_dtoa_r+0x24a>
 800cc74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc78:	2300      	movs	r3, #0
 800cc7a:	930c      	str	r3, [sp, #48]	; 0x30
 800cc7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc7e:	1b5b      	subs	r3, r3, r5
 800cc80:	1e5a      	subs	r2, r3, #1
 800cc82:	bf45      	ittet	mi
 800cc84:	f1c3 0301 	rsbmi	r3, r3, #1
 800cc88:	9305      	strmi	r3, [sp, #20]
 800cc8a:	2300      	movpl	r3, #0
 800cc8c:	2300      	movmi	r3, #0
 800cc8e:	9206      	str	r2, [sp, #24]
 800cc90:	bf54      	ite	pl
 800cc92:	9305      	strpl	r3, [sp, #20]
 800cc94:	9306      	strmi	r3, [sp, #24]
 800cc96:	f1bb 0f00 	cmp.w	fp, #0
 800cc9a:	db3c      	blt.n	800cd16 <_dtoa_r+0x24e>
 800cc9c:	9b06      	ldr	r3, [sp, #24]
 800cc9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cca2:	445b      	add	r3, fp
 800cca4:	9306      	str	r3, [sp, #24]
 800cca6:	2300      	movs	r3, #0
 800cca8:	9308      	str	r3, [sp, #32]
 800ccaa:	9b07      	ldr	r3, [sp, #28]
 800ccac:	2b09      	cmp	r3, #9
 800ccae:	d868      	bhi.n	800cd82 <_dtoa_r+0x2ba>
 800ccb0:	2b05      	cmp	r3, #5
 800ccb2:	bfc4      	itt	gt
 800ccb4:	3b04      	subgt	r3, #4
 800ccb6:	9307      	strgt	r3, [sp, #28]
 800ccb8:	9b07      	ldr	r3, [sp, #28]
 800ccba:	f1a3 0302 	sub.w	r3, r3, #2
 800ccbe:	bfcc      	ite	gt
 800ccc0:	2500      	movgt	r5, #0
 800ccc2:	2501      	movle	r5, #1
 800ccc4:	2b03      	cmp	r3, #3
 800ccc6:	f200 8085 	bhi.w	800cdd4 <_dtoa_r+0x30c>
 800ccca:	e8df f003 	tbb	[pc, r3]
 800ccce:	3b2e      	.short	0x3b2e
 800ccd0:	5839      	.short	0x5839
 800ccd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ccd6:	441d      	add	r5, r3
 800ccd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ccdc:	2b20      	cmp	r3, #32
 800ccde:	bfc1      	itttt	gt
 800cce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cce4:	fa08 f803 	lslgt.w	r8, r8, r3
 800cce8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ccec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ccf0:	bfd6      	itet	le
 800ccf2:	f1c3 0320 	rsble	r3, r3, #32
 800ccf6:	ea48 0003 	orrgt.w	r0, r8, r3
 800ccfa:	fa06 f003 	lslle.w	r0, r6, r3
 800ccfe:	f7f3 fc11 	bl	8000524 <__aeabi_ui2d>
 800cd02:	2201      	movs	r2, #1
 800cd04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cd08:	3d01      	subs	r5, #1
 800cd0a:	920e      	str	r2, [sp, #56]	; 0x38
 800cd0c:	e76f      	b.n	800cbee <_dtoa_r+0x126>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e7b3      	b.n	800cc7a <_dtoa_r+0x1b2>
 800cd12:	900c      	str	r0, [sp, #48]	; 0x30
 800cd14:	e7b2      	b.n	800cc7c <_dtoa_r+0x1b4>
 800cd16:	9b05      	ldr	r3, [sp, #20]
 800cd18:	eba3 030b 	sub.w	r3, r3, fp
 800cd1c:	9305      	str	r3, [sp, #20]
 800cd1e:	f1cb 0300 	rsb	r3, fp, #0
 800cd22:	9308      	str	r3, [sp, #32]
 800cd24:	2300      	movs	r3, #0
 800cd26:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd28:	e7bf      	b.n	800ccaa <_dtoa_r+0x1e2>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	dc52      	bgt.n	800cdda <_dtoa_r+0x312>
 800cd34:	2301      	movs	r3, #1
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	9304      	str	r3, [sp, #16]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	920a      	str	r2, [sp, #40]	; 0x28
 800cd3e:	e00b      	b.n	800cd58 <_dtoa_r+0x290>
 800cd40:	2301      	movs	r3, #1
 800cd42:	e7f3      	b.n	800cd2c <_dtoa_r+0x264>
 800cd44:	2300      	movs	r3, #0
 800cd46:	9309      	str	r3, [sp, #36]	; 0x24
 800cd48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd4a:	445b      	add	r3, fp
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	bfb8      	it	lt
 800cd56:	2301      	movlt	r3, #1
 800cd58:	69e0      	ldr	r0, [r4, #28]
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	2204      	movs	r2, #4
 800cd5e:	f102 0614 	add.w	r6, r2, #20
 800cd62:	429e      	cmp	r6, r3
 800cd64:	d93d      	bls.n	800cde2 <_dtoa_r+0x31a>
 800cd66:	6041      	str	r1, [r0, #4]
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f000 fd9f 	bl	800d8ac <_Balloc>
 800cd6e:	9000      	str	r0, [sp, #0]
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d139      	bne.n	800cde8 <_dtoa_r+0x320>
 800cd74:	4b16      	ldr	r3, [pc, #88]	; (800cdd0 <_dtoa_r+0x308>)
 800cd76:	4602      	mov	r2, r0
 800cd78:	f240 11af 	movw	r1, #431	; 0x1af
 800cd7c:	e6bd      	b.n	800cafa <_dtoa_r+0x32>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e7e1      	b.n	800cd46 <_dtoa_r+0x27e>
 800cd82:	2501      	movs	r5, #1
 800cd84:	2300      	movs	r3, #0
 800cd86:	9307      	str	r3, [sp, #28]
 800cd88:	9509      	str	r5, [sp, #36]	; 0x24
 800cd8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8e:	9301      	str	r3, [sp, #4]
 800cd90:	9304      	str	r3, [sp, #16]
 800cd92:	2200      	movs	r2, #0
 800cd94:	2312      	movs	r3, #18
 800cd96:	e7d1      	b.n	800cd3c <_dtoa_r+0x274>
 800cd98:	636f4361 	.word	0x636f4361
 800cd9c:	3fd287a7 	.word	0x3fd287a7
 800cda0:	8b60c8b3 	.word	0x8b60c8b3
 800cda4:	3fc68a28 	.word	0x3fc68a28
 800cda8:	509f79fb 	.word	0x509f79fb
 800cdac:	3fd34413 	.word	0x3fd34413
 800cdb0:	0800ea9d 	.word	0x0800ea9d
 800cdb4:	0800eab4 	.word	0x0800eab4
 800cdb8:	7ff00000 	.word	0x7ff00000
 800cdbc:	0800ea99 	.word	0x0800ea99
 800cdc0:	0800ea90 	.word	0x0800ea90
 800cdc4:	0800ea6d 	.word	0x0800ea6d
 800cdc8:	3ff80000 	.word	0x3ff80000
 800cdcc:	0800eba0 	.word	0x0800eba0
 800cdd0:	0800eb0c 	.word	0x0800eb0c
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd8:	e7d7      	b.n	800cd8a <_dtoa_r+0x2c2>
 800cdda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	9304      	str	r3, [sp, #16]
 800cde0:	e7ba      	b.n	800cd58 <_dtoa_r+0x290>
 800cde2:	3101      	adds	r1, #1
 800cde4:	0052      	lsls	r2, r2, #1
 800cde6:	e7ba      	b.n	800cd5e <_dtoa_r+0x296>
 800cde8:	69e3      	ldr	r3, [r4, #28]
 800cdea:	9a00      	ldr	r2, [sp, #0]
 800cdec:	601a      	str	r2, [r3, #0]
 800cdee:	9b04      	ldr	r3, [sp, #16]
 800cdf0:	2b0e      	cmp	r3, #14
 800cdf2:	f200 80a8 	bhi.w	800cf46 <_dtoa_r+0x47e>
 800cdf6:	2d00      	cmp	r5, #0
 800cdf8:	f000 80a5 	beq.w	800cf46 <_dtoa_r+0x47e>
 800cdfc:	f1bb 0f00 	cmp.w	fp, #0
 800ce00:	dd38      	ble.n	800ce74 <_dtoa_r+0x3ac>
 800ce02:	4bc0      	ldr	r3, [pc, #768]	; (800d104 <_dtoa_r+0x63c>)
 800ce04:	f00b 020f 	and.w	r2, fp, #15
 800ce08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ce10:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ce14:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ce18:	d019      	beq.n	800ce4e <_dtoa_r+0x386>
 800ce1a:	4bbb      	ldr	r3, [pc, #748]	; (800d108 <_dtoa_r+0x640>)
 800ce1c:	ec51 0b18 	vmov	r0, r1, d8
 800ce20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce24:	f7f3 fd22 	bl	800086c <__aeabi_ddiv>
 800ce28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce2c:	f008 080f 	and.w	r8, r8, #15
 800ce30:	2503      	movs	r5, #3
 800ce32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d108 <_dtoa_r+0x640>
 800ce36:	f1b8 0f00 	cmp.w	r8, #0
 800ce3a:	d10a      	bne.n	800ce52 <_dtoa_r+0x38a>
 800ce3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce40:	4632      	mov	r2, r6
 800ce42:	463b      	mov	r3, r7
 800ce44:	f7f3 fd12 	bl	800086c <__aeabi_ddiv>
 800ce48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce4c:	e02b      	b.n	800cea6 <_dtoa_r+0x3de>
 800ce4e:	2502      	movs	r5, #2
 800ce50:	e7ef      	b.n	800ce32 <_dtoa_r+0x36a>
 800ce52:	f018 0f01 	tst.w	r8, #1
 800ce56:	d008      	beq.n	800ce6a <_dtoa_r+0x3a2>
 800ce58:	4630      	mov	r0, r6
 800ce5a:	4639      	mov	r1, r7
 800ce5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ce60:	f7f3 fbda 	bl	8000618 <__aeabi_dmul>
 800ce64:	3501      	adds	r5, #1
 800ce66:	4606      	mov	r6, r0
 800ce68:	460f      	mov	r7, r1
 800ce6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ce6e:	f109 0908 	add.w	r9, r9, #8
 800ce72:	e7e0      	b.n	800ce36 <_dtoa_r+0x36e>
 800ce74:	f000 809f 	beq.w	800cfb6 <_dtoa_r+0x4ee>
 800ce78:	f1cb 0600 	rsb	r6, fp, #0
 800ce7c:	4ba1      	ldr	r3, [pc, #644]	; (800d104 <_dtoa_r+0x63c>)
 800ce7e:	4fa2      	ldr	r7, [pc, #648]	; (800d108 <_dtoa_r+0x640>)
 800ce80:	f006 020f 	and.w	r2, r6, #15
 800ce84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8c:	ec51 0b18 	vmov	r0, r1, d8
 800ce90:	f7f3 fbc2 	bl	8000618 <__aeabi_dmul>
 800ce94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce98:	1136      	asrs	r6, r6, #4
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	2502      	movs	r5, #2
 800ce9e:	2e00      	cmp	r6, #0
 800cea0:	d17e      	bne.n	800cfa0 <_dtoa_r+0x4d8>
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d1d0      	bne.n	800ce48 <_dtoa_r+0x380>
 800cea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cea8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 8084 	beq.w	800cfba <_dtoa_r+0x4f2>
 800ceb2:	4b96      	ldr	r3, [pc, #600]	; (800d10c <_dtoa_r+0x644>)
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	4649      	mov	r1, r9
 800ceba:	f7f3 fe1f 	bl	8000afc <__aeabi_dcmplt>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d07b      	beq.n	800cfba <_dtoa_r+0x4f2>
 800cec2:	9b04      	ldr	r3, [sp, #16]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d078      	beq.n	800cfba <_dtoa_r+0x4f2>
 800cec8:	9b01      	ldr	r3, [sp, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	dd39      	ble.n	800cf42 <_dtoa_r+0x47a>
 800cece:	4b90      	ldr	r3, [pc, #576]	; (800d110 <_dtoa_r+0x648>)
 800ced0:	2200      	movs	r2, #0
 800ced2:	4640      	mov	r0, r8
 800ced4:	4649      	mov	r1, r9
 800ced6:	f7f3 fb9f 	bl	8000618 <__aeabi_dmul>
 800ceda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cede:	9e01      	ldr	r6, [sp, #4]
 800cee0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cee4:	3501      	adds	r5, #1
 800cee6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ceea:	4628      	mov	r0, r5
 800ceec:	f7f3 fb2a 	bl	8000544 <__aeabi_i2d>
 800cef0:	4642      	mov	r2, r8
 800cef2:	464b      	mov	r3, r9
 800cef4:	f7f3 fb90 	bl	8000618 <__aeabi_dmul>
 800cef8:	4b86      	ldr	r3, [pc, #536]	; (800d114 <_dtoa_r+0x64c>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	f7f3 f9d6 	bl	80002ac <__adddf3>
 800cf00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cf04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf08:	9303      	str	r3, [sp, #12]
 800cf0a:	2e00      	cmp	r6, #0
 800cf0c:	d158      	bne.n	800cfc0 <_dtoa_r+0x4f8>
 800cf0e:	4b82      	ldr	r3, [pc, #520]	; (800d118 <_dtoa_r+0x650>)
 800cf10:	2200      	movs	r2, #0
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 f9c7 	bl	80002a8 <__aeabi_dsub>
 800cf1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf1e:	4680      	mov	r8, r0
 800cf20:	4689      	mov	r9, r1
 800cf22:	f7f3 fe09 	bl	8000b38 <__aeabi_dcmpgt>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	f040 8296 	bne.w	800d458 <_dtoa_r+0x990>
 800cf2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cf30:	4640      	mov	r0, r8
 800cf32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf36:	4649      	mov	r1, r9
 800cf38:	f7f3 fde0 	bl	8000afc <__aeabi_dcmplt>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	f040 8289 	bne.w	800d454 <_dtoa_r+0x98c>
 800cf42:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cf46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f2c0 814e 	blt.w	800d1ea <_dtoa_r+0x722>
 800cf4e:	f1bb 0f0e 	cmp.w	fp, #14
 800cf52:	f300 814a 	bgt.w	800d1ea <_dtoa_r+0x722>
 800cf56:	4b6b      	ldr	r3, [pc, #428]	; (800d104 <_dtoa_r+0x63c>)
 800cf58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cf5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f280 80dc 	bge.w	800d120 <_dtoa_r+0x658>
 800cf68:	9b04      	ldr	r3, [sp, #16]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f300 80d8 	bgt.w	800d120 <_dtoa_r+0x658>
 800cf70:	f040 826f 	bne.w	800d452 <_dtoa_r+0x98a>
 800cf74:	4b68      	ldr	r3, [pc, #416]	; (800d118 <_dtoa_r+0x650>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	4640      	mov	r0, r8
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	f7f3 fb4c 	bl	8000618 <__aeabi_dmul>
 800cf80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf84:	f7f3 fdce 	bl	8000b24 <__aeabi_dcmpge>
 800cf88:	9e04      	ldr	r6, [sp, #16]
 800cf8a:	4637      	mov	r7, r6
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	f040 8245 	bne.w	800d41c <_dtoa_r+0x954>
 800cf92:	9d00      	ldr	r5, [sp, #0]
 800cf94:	2331      	movs	r3, #49	; 0x31
 800cf96:	f805 3b01 	strb.w	r3, [r5], #1
 800cf9a:	f10b 0b01 	add.w	fp, fp, #1
 800cf9e:	e241      	b.n	800d424 <_dtoa_r+0x95c>
 800cfa0:	07f2      	lsls	r2, r6, #31
 800cfa2:	d505      	bpl.n	800cfb0 <_dtoa_r+0x4e8>
 800cfa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfa8:	f7f3 fb36 	bl	8000618 <__aeabi_dmul>
 800cfac:	3501      	adds	r5, #1
 800cfae:	2301      	movs	r3, #1
 800cfb0:	1076      	asrs	r6, r6, #1
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	e773      	b.n	800ce9e <_dtoa_r+0x3d6>
 800cfb6:	2502      	movs	r5, #2
 800cfb8:	e775      	b.n	800cea6 <_dtoa_r+0x3de>
 800cfba:	9e04      	ldr	r6, [sp, #16]
 800cfbc:	465f      	mov	r7, fp
 800cfbe:	e792      	b.n	800cee6 <_dtoa_r+0x41e>
 800cfc0:	9900      	ldr	r1, [sp, #0]
 800cfc2:	4b50      	ldr	r3, [pc, #320]	; (800d104 <_dtoa_r+0x63c>)
 800cfc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfc8:	4431      	add	r1, r6
 800cfca:	9102      	str	r1, [sp, #8]
 800cfcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfce:	eeb0 9a47 	vmov.f32	s18, s14
 800cfd2:	eef0 9a67 	vmov.f32	s19, s15
 800cfd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cfda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfde:	2900      	cmp	r1, #0
 800cfe0:	d044      	beq.n	800d06c <_dtoa_r+0x5a4>
 800cfe2:	494e      	ldr	r1, [pc, #312]	; (800d11c <_dtoa_r+0x654>)
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	f7f3 fc41 	bl	800086c <__aeabi_ddiv>
 800cfea:	ec53 2b19 	vmov	r2, r3, d9
 800cfee:	f7f3 f95b 	bl	80002a8 <__aeabi_dsub>
 800cff2:	9d00      	ldr	r5, [sp, #0]
 800cff4:	ec41 0b19 	vmov	d9, r0, r1
 800cff8:	4649      	mov	r1, r9
 800cffa:	4640      	mov	r0, r8
 800cffc:	f7f3 fdbc 	bl	8000b78 <__aeabi_d2iz>
 800d000:	4606      	mov	r6, r0
 800d002:	f7f3 fa9f 	bl	8000544 <__aeabi_i2d>
 800d006:	4602      	mov	r2, r0
 800d008:	460b      	mov	r3, r1
 800d00a:	4640      	mov	r0, r8
 800d00c:	4649      	mov	r1, r9
 800d00e:	f7f3 f94b 	bl	80002a8 <__aeabi_dsub>
 800d012:	3630      	adds	r6, #48	; 0x30
 800d014:	f805 6b01 	strb.w	r6, [r5], #1
 800d018:	ec53 2b19 	vmov	r2, r3, d9
 800d01c:	4680      	mov	r8, r0
 800d01e:	4689      	mov	r9, r1
 800d020:	f7f3 fd6c 	bl	8000afc <__aeabi_dcmplt>
 800d024:	2800      	cmp	r0, #0
 800d026:	d164      	bne.n	800d0f2 <_dtoa_r+0x62a>
 800d028:	4642      	mov	r2, r8
 800d02a:	464b      	mov	r3, r9
 800d02c:	4937      	ldr	r1, [pc, #220]	; (800d10c <_dtoa_r+0x644>)
 800d02e:	2000      	movs	r0, #0
 800d030:	f7f3 f93a 	bl	80002a8 <__aeabi_dsub>
 800d034:	ec53 2b19 	vmov	r2, r3, d9
 800d038:	f7f3 fd60 	bl	8000afc <__aeabi_dcmplt>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	f040 80b6 	bne.w	800d1ae <_dtoa_r+0x6e6>
 800d042:	9b02      	ldr	r3, [sp, #8]
 800d044:	429d      	cmp	r5, r3
 800d046:	f43f af7c 	beq.w	800cf42 <_dtoa_r+0x47a>
 800d04a:	4b31      	ldr	r3, [pc, #196]	; (800d110 <_dtoa_r+0x648>)
 800d04c:	ec51 0b19 	vmov	r0, r1, d9
 800d050:	2200      	movs	r2, #0
 800d052:	f7f3 fae1 	bl	8000618 <__aeabi_dmul>
 800d056:	4b2e      	ldr	r3, [pc, #184]	; (800d110 <_dtoa_r+0x648>)
 800d058:	ec41 0b19 	vmov	d9, r0, r1
 800d05c:	2200      	movs	r2, #0
 800d05e:	4640      	mov	r0, r8
 800d060:	4649      	mov	r1, r9
 800d062:	f7f3 fad9 	bl	8000618 <__aeabi_dmul>
 800d066:	4680      	mov	r8, r0
 800d068:	4689      	mov	r9, r1
 800d06a:	e7c5      	b.n	800cff8 <_dtoa_r+0x530>
 800d06c:	ec51 0b17 	vmov	r0, r1, d7
 800d070:	f7f3 fad2 	bl	8000618 <__aeabi_dmul>
 800d074:	9b02      	ldr	r3, [sp, #8]
 800d076:	9d00      	ldr	r5, [sp, #0]
 800d078:	930f      	str	r3, [sp, #60]	; 0x3c
 800d07a:	ec41 0b19 	vmov	d9, r0, r1
 800d07e:	4649      	mov	r1, r9
 800d080:	4640      	mov	r0, r8
 800d082:	f7f3 fd79 	bl	8000b78 <__aeabi_d2iz>
 800d086:	4606      	mov	r6, r0
 800d088:	f7f3 fa5c 	bl	8000544 <__aeabi_i2d>
 800d08c:	3630      	adds	r6, #48	; 0x30
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	4640      	mov	r0, r8
 800d094:	4649      	mov	r1, r9
 800d096:	f7f3 f907 	bl	80002a8 <__aeabi_dsub>
 800d09a:	f805 6b01 	strb.w	r6, [r5], #1
 800d09e:	9b02      	ldr	r3, [sp, #8]
 800d0a0:	429d      	cmp	r5, r3
 800d0a2:	4680      	mov	r8, r0
 800d0a4:	4689      	mov	r9, r1
 800d0a6:	f04f 0200 	mov.w	r2, #0
 800d0aa:	d124      	bne.n	800d0f6 <_dtoa_r+0x62e>
 800d0ac:	4b1b      	ldr	r3, [pc, #108]	; (800d11c <_dtoa_r+0x654>)
 800d0ae:	ec51 0b19 	vmov	r0, r1, d9
 800d0b2:	f7f3 f8fb 	bl	80002ac <__adddf3>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	4649      	mov	r1, r9
 800d0be:	f7f3 fd3b 	bl	8000b38 <__aeabi_dcmpgt>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d173      	bne.n	800d1ae <_dtoa_r+0x6e6>
 800d0c6:	ec53 2b19 	vmov	r2, r3, d9
 800d0ca:	4914      	ldr	r1, [pc, #80]	; (800d11c <_dtoa_r+0x654>)
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	f7f3 f8eb 	bl	80002a8 <__aeabi_dsub>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	4649      	mov	r1, r9
 800d0da:	f7f3 fd0f 	bl	8000afc <__aeabi_dcmplt>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	f43f af2f 	beq.w	800cf42 <_dtoa_r+0x47a>
 800d0e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d0e6:	1e6b      	subs	r3, r5, #1
 800d0e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d0ee:	2b30      	cmp	r3, #48	; 0x30
 800d0f0:	d0f8      	beq.n	800d0e4 <_dtoa_r+0x61c>
 800d0f2:	46bb      	mov	fp, r7
 800d0f4:	e04a      	b.n	800d18c <_dtoa_r+0x6c4>
 800d0f6:	4b06      	ldr	r3, [pc, #24]	; (800d110 <_dtoa_r+0x648>)
 800d0f8:	f7f3 fa8e 	bl	8000618 <__aeabi_dmul>
 800d0fc:	4680      	mov	r8, r0
 800d0fe:	4689      	mov	r9, r1
 800d100:	e7bd      	b.n	800d07e <_dtoa_r+0x5b6>
 800d102:	bf00      	nop
 800d104:	0800eba0 	.word	0x0800eba0
 800d108:	0800eb78 	.word	0x0800eb78
 800d10c:	3ff00000 	.word	0x3ff00000
 800d110:	40240000 	.word	0x40240000
 800d114:	401c0000 	.word	0x401c0000
 800d118:	40140000 	.word	0x40140000
 800d11c:	3fe00000 	.word	0x3fe00000
 800d120:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d124:	9d00      	ldr	r5, [sp, #0]
 800d126:	4642      	mov	r2, r8
 800d128:	464b      	mov	r3, r9
 800d12a:	4630      	mov	r0, r6
 800d12c:	4639      	mov	r1, r7
 800d12e:	f7f3 fb9d 	bl	800086c <__aeabi_ddiv>
 800d132:	f7f3 fd21 	bl	8000b78 <__aeabi_d2iz>
 800d136:	9001      	str	r0, [sp, #4]
 800d138:	f7f3 fa04 	bl	8000544 <__aeabi_i2d>
 800d13c:	4642      	mov	r2, r8
 800d13e:	464b      	mov	r3, r9
 800d140:	f7f3 fa6a 	bl	8000618 <__aeabi_dmul>
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	4630      	mov	r0, r6
 800d14a:	4639      	mov	r1, r7
 800d14c:	f7f3 f8ac 	bl	80002a8 <__aeabi_dsub>
 800d150:	9e01      	ldr	r6, [sp, #4]
 800d152:	9f04      	ldr	r7, [sp, #16]
 800d154:	3630      	adds	r6, #48	; 0x30
 800d156:	f805 6b01 	strb.w	r6, [r5], #1
 800d15a:	9e00      	ldr	r6, [sp, #0]
 800d15c:	1bae      	subs	r6, r5, r6
 800d15e:	42b7      	cmp	r7, r6
 800d160:	4602      	mov	r2, r0
 800d162:	460b      	mov	r3, r1
 800d164:	d134      	bne.n	800d1d0 <_dtoa_r+0x708>
 800d166:	f7f3 f8a1 	bl	80002ac <__adddf3>
 800d16a:	4642      	mov	r2, r8
 800d16c:	464b      	mov	r3, r9
 800d16e:	4606      	mov	r6, r0
 800d170:	460f      	mov	r7, r1
 800d172:	f7f3 fce1 	bl	8000b38 <__aeabi_dcmpgt>
 800d176:	b9c8      	cbnz	r0, 800d1ac <_dtoa_r+0x6e4>
 800d178:	4642      	mov	r2, r8
 800d17a:	464b      	mov	r3, r9
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 fcb2 	bl	8000ae8 <__aeabi_dcmpeq>
 800d184:	b110      	cbz	r0, 800d18c <_dtoa_r+0x6c4>
 800d186:	9b01      	ldr	r3, [sp, #4]
 800d188:	07db      	lsls	r3, r3, #31
 800d18a:	d40f      	bmi.n	800d1ac <_dtoa_r+0x6e4>
 800d18c:	4651      	mov	r1, sl
 800d18e:	4620      	mov	r0, r4
 800d190:	f000 fbcc 	bl	800d92c <_Bfree>
 800d194:	2300      	movs	r3, #0
 800d196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d198:	702b      	strb	r3, [r5, #0]
 800d19a:	f10b 0301 	add.w	r3, fp, #1
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f43f ace2 	beq.w	800cb6c <_dtoa_r+0xa4>
 800d1a8:	601d      	str	r5, [r3, #0]
 800d1aa:	e4df      	b.n	800cb6c <_dtoa_r+0xa4>
 800d1ac:	465f      	mov	r7, fp
 800d1ae:	462b      	mov	r3, r5
 800d1b0:	461d      	mov	r5, r3
 800d1b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1b6:	2a39      	cmp	r2, #57	; 0x39
 800d1b8:	d106      	bne.n	800d1c8 <_dtoa_r+0x700>
 800d1ba:	9a00      	ldr	r2, [sp, #0]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d1f7      	bne.n	800d1b0 <_dtoa_r+0x6e8>
 800d1c0:	9900      	ldr	r1, [sp, #0]
 800d1c2:	2230      	movs	r2, #48	; 0x30
 800d1c4:	3701      	adds	r7, #1
 800d1c6:	700a      	strb	r2, [r1, #0]
 800d1c8:	781a      	ldrb	r2, [r3, #0]
 800d1ca:	3201      	adds	r2, #1
 800d1cc:	701a      	strb	r2, [r3, #0]
 800d1ce:	e790      	b.n	800d0f2 <_dtoa_r+0x62a>
 800d1d0:	4ba3      	ldr	r3, [pc, #652]	; (800d460 <_dtoa_r+0x998>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f7f3 fa20 	bl	8000618 <__aeabi_dmul>
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2300      	movs	r3, #0
 800d1dc:	4606      	mov	r6, r0
 800d1de:	460f      	mov	r7, r1
 800d1e0:	f7f3 fc82 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d09e      	beq.n	800d126 <_dtoa_r+0x65e>
 800d1e8:	e7d0      	b.n	800d18c <_dtoa_r+0x6c4>
 800d1ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1ec:	2a00      	cmp	r2, #0
 800d1ee:	f000 80ca 	beq.w	800d386 <_dtoa_r+0x8be>
 800d1f2:	9a07      	ldr	r2, [sp, #28]
 800d1f4:	2a01      	cmp	r2, #1
 800d1f6:	f300 80ad 	bgt.w	800d354 <_dtoa_r+0x88c>
 800d1fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1fc:	2a00      	cmp	r2, #0
 800d1fe:	f000 80a5 	beq.w	800d34c <_dtoa_r+0x884>
 800d202:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d206:	9e08      	ldr	r6, [sp, #32]
 800d208:	9d05      	ldr	r5, [sp, #20]
 800d20a:	9a05      	ldr	r2, [sp, #20]
 800d20c:	441a      	add	r2, r3
 800d20e:	9205      	str	r2, [sp, #20]
 800d210:	9a06      	ldr	r2, [sp, #24]
 800d212:	2101      	movs	r1, #1
 800d214:	441a      	add	r2, r3
 800d216:	4620      	mov	r0, r4
 800d218:	9206      	str	r2, [sp, #24]
 800d21a:	f000 fc3d 	bl	800da98 <__i2b>
 800d21e:	4607      	mov	r7, r0
 800d220:	b165      	cbz	r5, 800d23c <_dtoa_r+0x774>
 800d222:	9b06      	ldr	r3, [sp, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	dd09      	ble.n	800d23c <_dtoa_r+0x774>
 800d228:	42ab      	cmp	r3, r5
 800d22a:	9a05      	ldr	r2, [sp, #20]
 800d22c:	bfa8      	it	ge
 800d22e:	462b      	movge	r3, r5
 800d230:	1ad2      	subs	r2, r2, r3
 800d232:	9205      	str	r2, [sp, #20]
 800d234:	9a06      	ldr	r2, [sp, #24]
 800d236:	1aed      	subs	r5, r5, r3
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	9306      	str	r3, [sp, #24]
 800d23c:	9b08      	ldr	r3, [sp, #32]
 800d23e:	b1f3      	cbz	r3, 800d27e <_dtoa_r+0x7b6>
 800d240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 80a3 	beq.w	800d38e <_dtoa_r+0x8c6>
 800d248:	2e00      	cmp	r6, #0
 800d24a:	dd10      	ble.n	800d26e <_dtoa_r+0x7a6>
 800d24c:	4639      	mov	r1, r7
 800d24e:	4632      	mov	r2, r6
 800d250:	4620      	mov	r0, r4
 800d252:	f000 fce1 	bl	800dc18 <__pow5mult>
 800d256:	4652      	mov	r2, sl
 800d258:	4601      	mov	r1, r0
 800d25a:	4607      	mov	r7, r0
 800d25c:	4620      	mov	r0, r4
 800d25e:	f000 fc31 	bl	800dac4 <__multiply>
 800d262:	4651      	mov	r1, sl
 800d264:	4680      	mov	r8, r0
 800d266:	4620      	mov	r0, r4
 800d268:	f000 fb60 	bl	800d92c <_Bfree>
 800d26c:	46c2      	mov	sl, r8
 800d26e:	9b08      	ldr	r3, [sp, #32]
 800d270:	1b9a      	subs	r2, r3, r6
 800d272:	d004      	beq.n	800d27e <_dtoa_r+0x7b6>
 800d274:	4651      	mov	r1, sl
 800d276:	4620      	mov	r0, r4
 800d278:	f000 fcce 	bl	800dc18 <__pow5mult>
 800d27c:	4682      	mov	sl, r0
 800d27e:	2101      	movs	r1, #1
 800d280:	4620      	mov	r0, r4
 800d282:	f000 fc09 	bl	800da98 <__i2b>
 800d286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d288:	2b00      	cmp	r3, #0
 800d28a:	4606      	mov	r6, r0
 800d28c:	f340 8081 	ble.w	800d392 <_dtoa_r+0x8ca>
 800d290:	461a      	mov	r2, r3
 800d292:	4601      	mov	r1, r0
 800d294:	4620      	mov	r0, r4
 800d296:	f000 fcbf 	bl	800dc18 <__pow5mult>
 800d29a:	9b07      	ldr	r3, [sp, #28]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	4606      	mov	r6, r0
 800d2a0:	dd7a      	ble.n	800d398 <_dtoa_r+0x8d0>
 800d2a2:	f04f 0800 	mov.w	r8, #0
 800d2a6:	6933      	ldr	r3, [r6, #16]
 800d2a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d2ac:	6918      	ldr	r0, [r3, #16]
 800d2ae:	f000 fba5 	bl	800d9fc <__hi0bits>
 800d2b2:	f1c0 0020 	rsb	r0, r0, #32
 800d2b6:	9b06      	ldr	r3, [sp, #24]
 800d2b8:	4418      	add	r0, r3
 800d2ba:	f010 001f 	ands.w	r0, r0, #31
 800d2be:	f000 8094 	beq.w	800d3ea <_dtoa_r+0x922>
 800d2c2:	f1c0 0320 	rsb	r3, r0, #32
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	f340 8085 	ble.w	800d3d6 <_dtoa_r+0x90e>
 800d2cc:	9b05      	ldr	r3, [sp, #20]
 800d2ce:	f1c0 001c 	rsb	r0, r0, #28
 800d2d2:	4403      	add	r3, r0
 800d2d4:	9305      	str	r3, [sp, #20]
 800d2d6:	9b06      	ldr	r3, [sp, #24]
 800d2d8:	4403      	add	r3, r0
 800d2da:	4405      	add	r5, r0
 800d2dc:	9306      	str	r3, [sp, #24]
 800d2de:	9b05      	ldr	r3, [sp, #20]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	dd05      	ble.n	800d2f0 <_dtoa_r+0x828>
 800d2e4:	4651      	mov	r1, sl
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f000 fcef 	bl	800dccc <__lshift>
 800d2ee:	4682      	mov	sl, r0
 800d2f0:	9b06      	ldr	r3, [sp, #24]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	dd05      	ble.n	800d302 <_dtoa_r+0x83a>
 800d2f6:	4631      	mov	r1, r6
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 fce6 	bl	800dccc <__lshift>
 800d300:	4606      	mov	r6, r0
 800d302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d304:	2b00      	cmp	r3, #0
 800d306:	d072      	beq.n	800d3ee <_dtoa_r+0x926>
 800d308:	4631      	mov	r1, r6
 800d30a:	4650      	mov	r0, sl
 800d30c:	f000 fd4a 	bl	800dda4 <__mcmp>
 800d310:	2800      	cmp	r0, #0
 800d312:	da6c      	bge.n	800d3ee <_dtoa_r+0x926>
 800d314:	2300      	movs	r3, #0
 800d316:	4651      	mov	r1, sl
 800d318:	220a      	movs	r2, #10
 800d31a:	4620      	mov	r0, r4
 800d31c:	f000 fb28 	bl	800d970 <__multadd>
 800d320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d322:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d326:	4682      	mov	sl, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f000 81b0 	beq.w	800d68e <_dtoa_r+0xbc6>
 800d32e:	2300      	movs	r3, #0
 800d330:	4639      	mov	r1, r7
 800d332:	220a      	movs	r2, #10
 800d334:	4620      	mov	r0, r4
 800d336:	f000 fb1b 	bl	800d970 <__multadd>
 800d33a:	9b01      	ldr	r3, [sp, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	4607      	mov	r7, r0
 800d340:	f300 8096 	bgt.w	800d470 <_dtoa_r+0x9a8>
 800d344:	9b07      	ldr	r3, [sp, #28]
 800d346:	2b02      	cmp	r3, #2
 800d348:	dc59      	bgt.n	800d3fe <_dtoa_r+0x936>
 800d34a:	e091      	b.n	800d470 <_dtoa_r+0x9a8>
 800d34c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d34e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d352:	e758      	b.n	800d206 <_dtoa_r+0x73e>
 800d354:	9b04      	ldr	r3, [sp, #16]
 800d356:	1e5e      	subs	r6, r3, #1
 800d358:	9b08      	ldr	r3, [sp, #32]
 800d35a:	42b3      	cmp	r3, r6
 800d35c:	bfbf      	itttt	lt
 800d35e:	9b08      	ldrlt	r3, [sp, #32]
 800d360:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d362:	9608      	strlt	r6, [sp, #32]
 800d364:	1af3      	sublt	r3, r6, r3
 800d366:	bfb4      	ite	lt
 800d368:	18d2      	addlt	r2, r2, r3
 800d36a:	1b9e      	subge	r6, r3, r6
 800d36c:	9b04      	ldr	r3, [sp, #16]
 800d36e:	bfbc      	itt	lt
 800d370:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d372:	2600      	movlt	r6, #0
 800d374:	2b00      	cmp	r3, #0
 800d376:	bfb7      	itett	lt
 800d378:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d37c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d380:	1a9d      	sublt	r5, r3, r2
 800d382:	2300      	movlt	r3, #0
 800d384:	e741      	b.n	800d20a <_dtoa_r+0x742>
 800d386:	9e08      	ldr	r6, [sp, #32]
 800d388:	9d05      	ldr	r5, [sp, #20]
 800d38a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d38c:	e748      	b.n	800d220 <_dtoa_r+0x758>
 800d38e:	9a08      	ldr	r2, [sp, #32]
 800d390:	e770      	b.n	800d274 <_dtoa_r+0x7ac>
 800d392:	9b07      	ldr	r3, [sp, #28]
 800d394:	2b01      	cmp	r3, #1
 800d396:	dc19      	bgt.n	800d3cc <_dtoa_r+0x904>
 800d398:	9b02      	ldr	r3, [sp, #8]
 800d39a:	b9bb      	cbnz	r3, 800d3cc <_dtoa_r+0x904>
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3a2:	b99b      	cbnz	r3, 800d3cc <_dtoa_r+0x904>
 800d3a4:	9b03      	ldr	r3, [sp, #12]
 800d3a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3aa:	0d1b      	lsrs	r3, r3, #20
 800d3ac:	051b      	lsls	r3, r3, #20
 800d3ae:	b183      	cbz	r3, 800d3d2 <_dtoa_r+0x90a>
 800d3b0:	9b05      	ldr	r3, [sp, #20]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	9305      	str	r3, [sp, #20]
 800d3b6:	9b06      	ldr	r3, [sp, #24]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	9306      	str	r3, [sp, #24]
 800d3bc:	f04f 0801 	mov.w	r8, #1
 800d3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f47f af6f 	bne.w	800d2a6 <_dtoa_r+0x7de>
 800d3c8:	2001      	movs	r0, #1
 800d3ca:	e774      	b.n	800d2b6 <_dtoa_r+0x7ee>
 800d3cc:	f04f 0800 	mov.w	r8, #0
 800d3d0:	e7f6      	b.n	800d3c0 <_dtoa_r+0x8f8>
 800d3d2:	4698      	mov	r8, r3
 800d3d4:	e7f4      	b.n	800d3c0 <_dtoa_r+0x8f8>
 800d3d6:	d082      	beq.n	800d2de <_dtoa_r+0x816>
 800d3d8:	9a05      	ldr	r2, [sp, #20]
 800d3da:	331c      	adds	r3, #28
 800d3dc:	441a      	add	r2, r3
 800d3de:	9205      	str	r2, [sp, #20]
 800d3e0:	9a06      	ldr	r2, [sp, #24]
 800d3e2:	441a      	add	r2, r3
 800d3e4:	441d      	add	r5, r3
 800d3e6:	9206      	str	r2, [sp, #24]
 800d3e8:	e779      	b.n	800d2de <_dtoa_r+0x816>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	e7f4      	b.n	800d3d8 <_dtoa_r+0x910>
 800d3ee:	9b04      	ldr	r3, [sp, #16]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	dc37      	bgt.n	800d464 <_dtoa_r+0x99c>
 800d3f4:	9b07      	ldr	r3, [sp, #28]
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	dd34      	ble.n	800d464 <_dtoa_r+0x99c>
 800d3fa:	9b04      	ldr	r3, [sp, #16]
 800d3fc:	9301      	str	r3, [sp, #4]
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	b963      	cbnz	r3, 800d41c <_dtoa_r+0x954>
 800d402:	4631      	mov	r1, r6
 800d404:	2205      	movs	r2, #5
 800d406:	4620      	mov	r0, r4
 800d408:	f000 fab2 	bl	800d970 <__multadd>
 800d40c:	4601      	mov	r1, r0
 800d40e:	4606      	mov	r6, r0
 800d410:	4650      	mov	r0, sl
 800d412:	f000 fcc7 	bl	800dda4 <__mcmp>
 800d416:	2800      	cmp	r0, #0
 800d418:	f73f adbb 	bgt.w	800cf92 <_dtoa_r+0x4ca>
 800d41c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d41e:	9d00      	ldr	r5, [sp, #0]
 800d420:	ea6f 0b03 	mvn.w	fp, r3
 800d424:	f04f 0800 	mov.w	r8, #0
 800d428:	4631      	mov	r1, r6
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 fa7e 	bl	800d92c <_Bfree>
 800d430:	2f00      	cmp	r7, #0
 800d432:	f43f aeab 	beq.w	800d18c <_dtoa_r+0x6c4>
 800d436:	f1b8 0f00 	cmp.w	r8, #0
 800d43a:	d005      	beq.n	800d448 <_dtoa_r+0x980>
 800d43c:	45b8      	cmp	r8, r7
 800d43e:	d003      	beq.n	800d448 <_dtoa_r+0x980>
 800d440:	4641      	mov	r1, r8
 800d442:	4620      	mov	r0, r4
 800d444:	f000 fa72 	bl	800d92c <_Bfree>
 800d448:	4639      	mov	r1, r7
 800d44a:	4620      	mov	r0, r4
 800d44c:	f000 fa6e 	bl	800d92c <_Bfree>
 800d450:	e69c      	b.n	800d18c <_dtoa_r+0x6c4>
 800d452:	2600      	movs	r6, #0
 800d454:	4637      	mov	r7, r6
 800d456:	e7e1      	b.n	800d41c <_dtoa_r+0x954>
 800d458:	46bb      	mov	fp, r7
 800d45a:	4637      	mov	r7, r6
 800d45c:	e599      	b.n	800cf92 <_dtoa_r+0x4ca>
 800d45e:	bf00      	nop
 800d460:	40240000 	.word	0x40240000
 800d464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 80c8 	beq.w	800d5fc <_dtoa_r+0xb34>
 800d46c:	9b04      	ldr	r3, [sp, #16]
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	2d00      	cmp	r5, #0
 800d472:	dd05      	ble.n	800d480 <_dtoa_r+0x9b8>
 800d474:	4639      	mov	r1, r7
 800d476:	462a      	mov	r2, r5
 800d478:	4620      	mov	r0, r4
 800d47a:	f000 fc27 	bl	800dccc <__lshift>
 800d47e:	4607      	mov	r7, r0
 800d480:	f1b8 0f00 	cmp.w	r8, #0
 800d484:	d05b      	beq.n	800d53e <_dtoa_r+0xa76>
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	4620      	mov	r0, r4
 800d48a:	f000 fa0f 	bl	800d8ac <_Balloc>
 800d48e:	4605      	mov	r5, r0
 800d490:	b928      	cbnz	r0, 800d49e <_dtoa_r+0x9d6>
 800d492:	4b83      	ldr	r3, [pc, #524]	; (800d6a0 <_dtoa_r+0xbd8>)
 800d494:	4602      	mov	r2, r0
 800d496:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d49a:	f7ff bb2e 	b.w	800cafa <_dtoa_r+0x32>
 800d49e:	693a      	ldr	r2, [r7, #16]
 800d4a0:	3202      	adds	r2, #2
 800d4a2:	0092      	lsls	r2, r2, #2
 800d4a4:	f107 010c 	add.w	r1, r7, #12
 800d4a8:	300c      	adds	r0, #12
 800d4aa:	f7ff fa74 	bl	800c996 <memcpy>
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 fc0a 	bl	800dccc <__lshift>
 800d4b8:	9b00      	ldr	r3, [sp, #0]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	9304      	str	r3, [sp, #16]
 800d4be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4c2:	4413      	add	r3, r2
 800d4c4:	9308      	str	r3, [sp, #32]
 800d4c6:	9b02      	ldr	r3, [sp, #8]
 800d4c8:	f003 0301 	and.w	r3, r3, #1
 800d4cc:	46b8      	mov	r8, r7
 800d4ce:	9306      	str	r3, [sp, #24]
 800d4d0:	4607      	mov	r7, r0
 800d4d2:	9b04      	ldr	r3, [sp, #16]
 800d4d4:	4631      	mov	r1, r6
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	4650      	mov	r0, sl
 800d4da:	9301      	str	r3, [sp, #4]
 800d4dc:	f7ff fa69 	bl	800c9b2 <quorem>
 800d4e0:	4641      	mov	r1, r8
 800d4e2:	9002      	str	r0, [sp, #8]
 800d4e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d4e8:	4650      	mov	r0, sl
 800d4ea:	f000 fc5b 	bl	800dda4 <__mcmp>
 800d4ee:	463a      	mov	r2, r7
 800d4f0:	9005      	str	r0, [sp, #20]
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f000 fc71 	bl	800dddc <__mdiff>
 800d4fa:	68c2      	ldr	r2, [r0, #12]
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	bb02      	cbnz	r2, 800d542 <_dtoa_r+0xa7a>
 800d500:	4601      	mov	r1, r0
 800d502:	4650      	mov	r0, sl
 800d504:	f000 fc4e 	bl	800dda4 <__mcmp>
 800d508:	4602      	mov	r2, r0
 800d50a:	4629      	mov	r1, r5
 800d50c:	4620      	mov	r0, r4
 800d50e:	9209      	str	r2, [sp, #36]	; 0x24
 800d510:	f000 fa0c 	bl	800d92c <_Bfree>
 800d514:	9b07      	ldr	r3, [sp, #28]
 800d516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d518:	9d04      	ldr	r5, [sp, #16]
 800d51a:	ea43 0102 	orr.w	r1, r3, r2
 800d51e:	9b06      	ldr	r3, [sp, #24]
 800d520:	4319      	orrs	r1, r3
 800d522:	d110      	bne.n	800d546 <_dtoa_r+0xa7e>
 800d524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d528:	d029      	beq.n	800d57e <_dtoa_r+0xab6>
 800d52a:	9b05      	ldr	r3, [sp, #20]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dd02      	ble.n	800d536 <_dtoa_r+0xa6e>
 800d530:	9b02      	ldr	r3, [sp, #8]
 800d532:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d536:	9b01      	ldr	r3, [sp, #4]
 800d538:	f883 9000 	strb.w	r9, [r3]
 800d53c:	e774      	b.n	800d428 <_dtoa_r+0x960>
 800d53e:	4638      	mov	r0, r7
 800d540:	e7ba      	b.n	800d4b8 <_dtoa_r+0x9f0>
 800d542:	2201      	movs	r2, #1
 800d544:	e7e1      	b.n	800d50a <_dtoa_r+0xa42>
 800d546:	9b05      	ldr	r3, [sp, #20]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	db04      	blt.n	800d556 <_dtoa_r+0xa8e>
 800d54c:	9907      	ldr	r1, [sp, #28]
 800d54e:	430b      	orrs	r3, r1
 800d550:	9906      	ldr	r1, [sp, #24]
 800d552:	430b      	orrs	r3, r1
 800d554:	d120      	bne.n	800d598 <_dtoa_r+0xad0>
 800d556:	2a00      	cmp	r2, #0
 800d558:	dded      	ble.n	800d536 <_dtoa_r+0xa6e>
 800d55a:	4651      	mov	r1, sl
 800d55c:	2201      	movs	r2, #1
 800d55e:	4620      	mov	r0, r4
 800d560:	f000 fbb4 	bl	800dccc <__lshift>
 800d564:	4631      	mov	r1, r6
 800d566:	4682      	mov	sl, r0
 800d568:	f000 fc1c 	bl	800dda4 <__mcmp>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	dc03      	bgt.n	800d578 <_dtoa_r+0xab0>
 800d570:	d1e1      	bne.n	800d536 <_dtoa_r+0xa6e>
 800d572:	f019 0f01 	tst.w	r9, #1
 800d576:	d0de      	beq.n	800d536 <_dtoa_r+0xa6e>
 800d578:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d57c:	d1d8      	bne.n	800d530 <_dtoa_r+0xa68>
 800d57e:	9a01      	ldr	r2, [sp, #4]
 800d580:	2339      	movs	r3, #57	; 0x39
 800d582:	7013      	strb	r3, [r2, #0]
 800d584:	462b      	mov	r3, r5
 800d586:	461d      	mov	r5, r3
 800d588:	3b01      	subs	r3, #1
 800d58a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d58e:	2a39      	cmp	r2, #57	; 0x39
 800d590:	d06c      	beq.n	800d66c <_dtoa_r+0xba4>
 800d592:	3201      	adds	r2, #1
 800d594:	701a      	strb	r2, [r3, #0]
 800d596:	e747      	b.n	800d428 <_dtoa_r+0x960>
 800d598:	2a00      	cmp	r2, #0
 800d59a:	dd07      	ble.n	800d5ac <_dtoa_r+0xae4>
 800d59c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d5a0:	d0ed      	beq.n	800d57e <_dtoa_r+0xab6>
 800d5a2:	9a01      	ldr	r2, [sp, #4]
 800d5a4:	f109 0301 	add.w	r3, r9, #1
 800d5a8:	7013      	strb	r3, [r2, #0]
 800d5aa:	e73d      	b.n	800d428 <_dtoa_r+0x960>
 800d5ac:	9b04      	ldr	r3, [sp, #16]
 800d5ae:	9a08      	ldr	r2, [sp, #32]
 800d5b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d043      	beq.n	800d640 <_dtoa_r+0xb78>
 800d5b8:	4651      	mov	r1, sl
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	220a      	movs	r2, #10
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f000 f9d6 	bl	800d970 <__multadd>
 800d5c4:	45b8      	cmp	r8, r7
 800d5c6:	4682      	mov	sl, r0
 800d5c8:	f04f 0300 	mov.w	r3, #0
 800d5cc:	f04f 020a 	mov.w	r2, #10
 800d5d0:	4641      	mov	r1, r8
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	d107      	bne.n	800d5e6 <_dtoa_r+0xb1e>
 800d5d6:	f000 f9cb 	bl	800d970 <__multadd>
 800d5da:	4680      	mov	r8, r0
 800d5dc:	4607      	mov	r7, r0
 800d5de:	9b04      	ldr	r3, [sp, #16]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	9304      	str	r3, [sp, #16]
 800d5e4:	e775      	b.n	800d4d2 <_dtoa_r+0xa0a>
 800d5e6:	f000 f9c3 	bl	800d970 <__multadd>
 800d5ea:	4639      	mov	r1, r7
 800d5ec:	4680      	mov	r8, r0
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	220a      	movs	r2, #10
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f000 f9bc 	bl	800d970 <__multadd>
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	e7f0      	b.n	800d5de <_dtoa_r+0xb16>
 800d5fc:	9b04      	ldr	r3, [sp, #16]
 800d5fe:	9301      	str	r3, [sp, #4]
 800d600:	9d00      	ldr	r5, [sp, #0]
 800d602:	4631      	mov	r1, r6
 800d604:	4650      	mov	r0, sl
 800d606:	f7ff f9d4 	bl	800c9b2 <quorem>
 800d60a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d60e:	9b00      	ldr	r3, [sp, #0]
 800d610:	f805 9b01 	strb.w	r9, [r5], #1
 800d614:	1aea      	subs	r2, r5, r3
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	4293      	cmp	r3, r2
 800d61a:	dd07      	ble.n	800d62c <_dtoa_r+0xb64>
 800d61c:	4651      	mov	r1, sl
 800d61e:	2300      	movs	r3, #0
 800d620:	220a      	movs	r2, #10
 800d622:	4620      	mov	r0, r4
 800d624:	f000 f9a4 	bl	800d970 <__multadd>
 800d628:	4682      	mov	sl, r0
 800d62a:	e7ea      	b.n	800d602 <_dtoa_r+0xb3a>
 800d62c:	9b01      	ldr	r3, [sp, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	bfc8      	it	gt
 800d632:	461d      	movgt	r5, r3
 800d634:	9b00      	ldr	r3, [sp, #0]
 800d636:	bfd8      	it	le
 800d638:	2501      	movle	r5, #1
 800d63a:	441d      	add	r5, r3
 800d63c:	f04f 0800 	mov.w	r8, #0
 800d640:	4651      	mov	r1, sl
 800d642:	2201      	movs	r2, #1
 800d644:	4620      	mov	r0, r4
 800d646:	f000 fb41 	bl	800dccc <__lshift>
 800d64a:	4631      	mov	r1, r6
 800d64c:	4682      	mov	sl, r0
 800d64e:	f000 fba9 	bl	800dda4 <__mcmp>
 800d652:	2800      	cmp	r0, #0
 800d654:	dc96      	bgt.n	800d584 <_dtoa_r+0xabc>
 800d656:	d102      	bne.n	800d65e <_dtoa_r+0xb96>
 800d658:	f019 0f01 	tst.w	r9, #1
 800d65c:	d192      	bne.n	800d584 <_dtoa_r+0xabc>
 800d65e:	462b      	mov	r3, r5
 800d660:	461d      	mov	r5, r3
 800d662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d666:	2a30      	cmp	r2, #48	; 0x30
 800d668:	d0fa      	beq.n	800d660 <_dtoa_r+0xb98>
 800d66a:	e6dd      	b.n	800d428 <_dtoa_r+0x960>
 800d66c:	9a00      	ldr	r2, [sp, #0]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d189      	bne.n	800d586 <_dtoa_r+0xabe>
 800d672:	f10b 0b01 	add.w	fp, fp, #1
 800d676:	2331      	movs	r3, #49	; 0x31
 800d678:	e796      	b.n	800d5a8 <_dtoa_r+0xae0>
 800d67a:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <_dtoa_r+0xbdc>)
 800d67c:	f7ff ba99 	b.w	800cbb2 <_dtoa_r+0xea>
 800d680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d682:	2b00      	cmp	r3, #0
 800d684:	f47f aa6d 	bne.w	800cb62 <_dtoa_r+0x9a>
 800d688:	4b07      	ldr	r3, [pc, #28]	; (800d6a8 <_dtoa_r+0xbe0>)
 800d68a:	f7ff ba92 	b.w	800cbb2 <_dtoa_r+0xea>
 800d68e:	9b01      	ldr	r3, [sp, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	dcb5      	bgt.n	800d600 <_dtoa_r+0xb38>
 800d694:	9b07      	ldr	r3, [sp, #28]
 800d696:	2b02      	cmp	r3, #2
 800d698:	f73f aeb1 	bgt.w	800d3fe <_dtoa_r+0x936>
 800d69c:	e7b0      	b.n	800d600 <_dtoa_r+0xb38>
 800d69e:	bf00      	nop
 800d6a0:	0800eb0c 	.word	0x0800eb0c
 800d6a4:	0800ea6c 	.word	0x0800ea6c
 800d6a8:	0800ea90 	.word	0x0800ea90

0800d6ac <_free_r>:
 800d6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6ae:	2900      	cmp	r1, #0
 800d6b0:	d044      	beq.n	800d73c <_free_r+0x90>
 800d6b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b6:	9001      	str	r0, [sp, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d6be:	bfb8      	it	lt
 800d6c0:	18e4      	addlt	r4, r4, r3
 800d6c2:	f000 f8e7 	bl	800d894 <__malloc_lock>
 800d6c6:	4a1e      	ldr	r2, [pc, #120]	; (800d740 <_free_r+0x94>)
 800d6c8:	9801      	ldr	r0, [sp, #4]
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	b933      	cbnz	r3, 800d6dc <_free_r+0x30>
 800d6ce:	6063      	str	r3, [r4, #4]
 800d6d0:	6014      	str	r4, [r2, #0]
 800d6d2:	b003      	add	sp, #12
 800d6d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6d8:	f000 b8e2 	b.w	800d8a0 <__malloc_unlock>
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	d908      	bls.n	800d6f2 <_free_r+0x46>
 800d6e0:	6825      	ldr	r5, [r4, #0]
 800d6e2:	1961      	adds	r1, r4, r5
 800d6e4:	428b      	cmp	r3, r1
 800d6e6:	bf01      	itttt	eq
 800d6e8:	6819      	ldreq	r1, [r3, #0]
 800d6ea:	685b      	ldreq	r3, [r3, #4]
 800d6ec:	1949      	addeq	r1, r1, r5
 800d6ee:	6021      	streq	r1, [r4, #0]
 800d6f0:	e7ed      	b.n	800d6ce <_free_r+0x22>
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	b10b      	cbz	r3, 800d6fc <_free_r+0x50>
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	d9fa      	bls.n	800d6f2 <_free_r+0x46>
 800d6fc:	6811      	ldr	r1, [r2, #0]
 800d6fe:	1855      	adds	r5, r2, r1
 800d700:	42a5      	cmp	r5, r4
 800d702:	d10b      	bne.n	800d71c <_free_r+0x70>
 800d704:	6824      	ldr	r4, [r4, #0]
 800d706:	4421      	add	r1, r4
 800d708:	1854      	adds	r4, r2, r1
 800d70a:	42a3      	cmp	r3, r4
 800d70c:	6011      	str	r1, [r2, #0]
 800d70e:	d1e0      	bne.n	800d6d2 <_free_r+0x26>
 800d710:	681c      	ldr	r4, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	6053      	str	r3, [r2, #4]
 800d716:	440c      	add	r4, r1
 800d718:	6014      	str	r4, [r2, #0]
 800d71a:	e7da      	b.n	800d6d2 <_free_r+0x26>
 800d71c:	d902      	bls.n	800d724 <_free_r+0x78>
 800d71e:	230c      	movs	r3, #12
 800d720:	6003      	str	r3, [r0, #0]
 800d722:	e7d6      	b.n	800d6d2 <_free_r+0x26>
 800d724:	6825      	ldr	r5, [r4, #0]
 800d726:	1961      	adds	r1, r4, r5
 800d728:	428b      	cmp	r3, r1
 800d72a:	bf04      	itt	eq
 800d72c:	6819      	ldreq	r1, [r3, #0]
 800d72e:	685b      	ldreq	r3, [r3, #4]
 800d730:	6063      	str	r3, [r4, #4]
 800d732:	bf04      	itt	eq
 800d734:	1949      	addeq	r1, r1, r5
 800d736:	6021      	streq	r1, [r4, #0]
 800d738:	6054      	str	r4, [r2, #4]
 800d73a:	e7ca      	b.n	800d6d2 <_free_r+0x26>
 800d73c:	b003      	add	sp, #12
 800d73e:	bd30      	pop	{r4, r5, pc}
 800d740:	200025b0 	.word	0x200025b0

0800d744 <malloc>:
 800d744:	4b02      	ldr	r3, [pc, #8]	; (800d750 <malloc+0xc>)
 800d746:	4601      	mov	r1, r0
 800d748:	6818      	ldr	r0, [r3, #0]
 800d74a:	f000 b823 	b.w	800d794 <_malloc_r>
 800d74e:	bf00      	nop
 800d750:	2000007c 	.word	0x2000007c

0800d754 <sbrk_aligned>:
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	4e0e      	ldr	r6, [pc, #56]	; (800d790 <sbrk_aligned+0x3c>)
 800d758:	460c      	mov	r4, r1
 800d75a:	6831      	ldr	r1, [r6, #0]
 800d75c:	4605      	mov	r5, r0
 800d75e:	b911      	cbnz	r1, 800d766 <sbrk_aligned+0x12>
 800d760:	f000 fea8 	bl	800e4b4 <_sbrk_r>
 800d764:	6030      	str	r0, [r6, #0]
 800d766:	4621      	mov	r1, r4
 800d768:	4628      	mov	r0, r5
 800d76a:	f000 fea3 	bl	800e4b4 <_sbrk_r>
 800d76e:	1c43      	adds	r3, r0, #1
 800d770:	d00a      	beq.n	800d788 <sbrk_aligned+0x34>
 800d772:	1cc4      	adds	r4, r0, #3
 800d774:	f024 0403 	bic.w	r4, r4, #3
 800d778:	42a0      	cmp	r0, r4
 800d77a:	d007      	beq.n	800d78c <sbrk_aligned+0x38>
 800d77c:	1a21      	subs	r1, r4, r0
 800d77e:	4628      	mov	r0, r5
 800d780:	f000 fe98 	bl	800e4b4 <_sbrk_r>
 800d784:	3001      	adds	r0, #1
 800d786:	d101      	bne.n	800d78c <sbrk_aligned+0x38>
 800d788:	f04f 34ff 	mov.w	r4, #4294967295
 800d78c:	4620      	mov	r0, r4
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	200025b4 	.word	0x200025b4

0800d794 <_malloc_r>:
 800d794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d798:	1ccd      	adds	r5, r1, #3
 800d79a:	f025 0503 	bic.w	r5, r5, #3
 800d79e:	3508      	adds	r5, #8
 800d7a0:	2d0c      	cmp	r5, #12
 800d7a2:	bf38      	it	cc
 800d7a4:	250c      	movcc	r5, #12
 800d7a6:	2d00      	cmp	r5, #0
 800d7a8:	4607      	mov	r7, r0
 800d7aa:	db01      	blt.n	800d7b0 <_malloc_r+0x1c>
 800d7ac:	42a9      	cmp	r1, r5
 800d7ae:	d905      	bls.n	800d7bc <_malloc_r+0x28>
 800d7b0:	230c      	movs	r3, #12
 800d7b2:	603b      	str	r3, [r7, #0]
 800d7b4:	2600      	movs	r6, #0
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d890 <_malloc_r+0xfc>
 800d7c0:	f000 f868 	bl	800d894 <__malloc_lock>
 800d7c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d7c8:	461c      	mov	r4, r3
 800d7ca:	bb5c      	cbnz	r4, 800d824 <_malloc_r+0x90>
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	f7ff ffc0 	bl	800d754 <sbrk_aligned>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	d155      	bne.n	800d886 <_malloc_r+0xf2>
 800d7da:	f8d8 4000 	ldr.w	r4, [r8]
 800d7de:	4626      	mov	r6, r4
 800d7e0:	2e00      	cmp	r6, #0
 800d7e2:	d145      	bne.n	800d870 <_malloc_r+0xdc>
 800d7e4:	2c00      	cmp	r4, #0
 800d7e6:	d048      	beq.n	800d87a <_malloc_r+0xe6>
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	4631      	mov	r1, r6
 800d7ec:	4638      	mov	r0, r7
 800d7ee:	eb04 0903 	add.w	r9, r4, r3
 800d7f2:	f000 fe5f 	bl	800e4b4 <_sbrk_r>
 800d7f6:	4581      	cmp	r9, r0
 800d7f8:	d13f      	bne.n	800d87a <_malloc_r+0xe6>
 800d7fa:	6821      	ldr	r1, [r4, #0]
 800d7fc:	1a6d      	subs	r5, r5, r1
 800d7fe:	4629      	mov	r1, r5
 800d800:	4638      	mov	r0, r7
 800d802:	f7ff ffa7 	bl	800d754 <sbrk_aligned>
 800d806:	3001      	adds	r0, #1
 800d808:	d037      	beq.n	800d87a <_malloc_r+0xe6>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	442b      	add	r3, r5
 800d80e:	6023      	str	r3, [r4, #0]
 800d810:	f8d8 3000 	ldr.w	r3, [r8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d038      	beq.n	800d88a <_malloc_r+0xf6>
 800d818:	685a      	ldr	r2, [r3, #4]
 800d81a:	42a2      	cmp	r2, r4
 800d81c:	d12b      	bne.n	800d876 <_malloc_r+0xe2>
 800d81e:	2200      	movs	r2, #0
 800d820:	605a      	str	r2, [r3, #4]
 800d822:	e00f      	b.n	800d844 <_malloc_r+0xb0>
 800d824:	6822      	ldr	r2, [r4, #0]
 800d826:	1b52      	subs	r2, r2, r5
 800d828:	d41f      	bmi.n	800d86a <_malloc_r+0xd6>
 800d82a:	2a0b      	cmp	r2, #11
 800d82c:	d917      	bls.n	800d85e <_malloc_r+0xca>
 800d82e:	1961      	adds	r1, r4, r5
 800d830:	42a3      	cmp	r3, r4
 800d832:	6025      	str	r5, [r4, #0]
 800d834:	bf18      	it	ne
 800d836:	6059      	strne	r1, [r3, #4]
 800d838:	6863      	ldr	r3, [r4, #4]
 800d83a:	bf08      	it	eq
 800d83c:	f8c8 1000 	streq.w	r1, [r8]
 800d840:	5162      	str	r2, [r4, r5]
 800d842:	604b      	str	r3, [r1, #4]
 800d844:	4638      	mov	r0, r7
 800d846:	f104 060b 	add.w	r6, r4, #11
 800d84a:	f000 f829 	bl	800d8a0 <__malloc_unlock>
 800d84e:	f026 0607 	bic.w	r6, r6, #7
 800d852:	1d23      	adds	r3, r4, #4
 800d854:	1af2      	subs	r2, r6, r3
 800d856:	d0ae      	beq.n	800d7b6 <_malloc_r+0x22>
 800d858:	1b9b      	subs	r3, r3, r6
 800d85a:	50a3      	str	r3, [r4, r2]
 800d85c:	e7ab      	b.n	800d7b6 <_malloc_r+0x22>
 800d85e:	42a3      	cmp	r3, r4
 800d860:	6862      	ldr	r2, [r4, #4]
 800d862:	d1dd      	bne.n	800d820 <_malloc_r+0x8c>
 800d864:	f8c8 2000 	str.w	r2, [r8]
 800d868:	e7ec      	b.n	800d844 <_malloc_r+0xb0>
 800d86a:	4623      	mov	r3, r4
 800d86c:	6864      	ldr	r4, [r4, #4]
 800d86e:	e7ac      	b.n	800d7ca <_malloc_r+0x36>
 800d870:	4634      	mov	r4, r6
 800d872:	6876      	ldr	r6, [r6, #4]
 800d874:	e7b4      	b.n	800d7e0 <_malloc_r+0x4c>
 800d876:	4613      	mov	r3, r2
 800d878:	e7cc      	b.n	800d814 <_malloc_r+0x80>
 800d87a:	230c      	movs	r3, #12
 800d87c:	603b      	str	r3, [r7, #0]
 800d87e:	4638      	mov	r0, r7
 800d880:	f000 f80e 	bl	800d8a0 <__malloc_unlock>
 800d884:	e797      	b.n	800d7b6 <_malloc_r+0x22>
 800d886:	6025      	str	r5, [r4, #0]
 800d888:	e7dc      	b.n	800d844 <_malloc_r+0xb0>
 800d88a:	605b      	str	r3, [r3, #4]
 800d88c:	deff      	udf	#255	; 0xff
 800d88e:	bf00      	nop
 800d890:	200025b0 	.word	0x200025b0

0800d894 <__malloc_lock>:
 800d894:	4801      	ldr	r0, [pc, #4]	; (800d89c <__malloc_lock+0x8>)
 800d896:	f7ff b87c 	b.w	800c992 <__retarget_lock_acquire_recursive>
 800d89a:	bf00      	nop
 800d89c:	200025ac 	.word	0x200025ac

0800d8a0 <__malloc_unlock>:
 800d8a0:	4801      	ldr	r0, [pc, #4]	; (800d8a8 <__malloc_unlock+0x8>)
 800d8a2:	f7ff b877 	b.w	800c994 <__retarget_lock_release_recursive>
 800d8a6:	bf00      	nop
 800d8a8:	200025ac 	.word	0x200025ac

0800d8ac <_Balloc>:
 800d8ac:	b570      	push	{r4, r5, r6, lr}
 800d8ae:	69c6      	ldr	r6, [r0, #28]
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	460d      	mov	r5, r1
 800d8b4:	b976      	cbnz	r6, 800d8d4 <_Balloc+0x28>
 800d8b6:	2010      	movs	r0, #16
 800d8b8:	f7ff ff44 	bl	800d744 <malloc>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	61e0      	str	r0, [r4, #28]
 800d8c0:	b920      	cbnz	r0, 800d8cc <_Balloc+0x20>
 800d8c2:	4b18      	ldr	r3, [pc, #96]	; (800d924 <_Balloc+0x78>)
 800d8c4:	4818      	ldr	r0, [pc, #96]	; (800d928 <_Balloc+0x7c>)
 800d8c6:	216b      	movs	r1, #107	; 0x6b
 800d8c8:	f000 fe04 	bl	800e4d4 <__assert_func>
 800d8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8d0:	6006      	str	r6, [r0, #0]
 800d8d2:	60c6      	str	r6, [r0, #12]
 800d8d4:	69e6      	ldr	r6, [r4, #28]
 800d8d6:	68f3      	ldr	r3, [r6, #12]
 800d8d8:	b183      	cbz	r3, 800d8fc <_Balloc+0x50>
 800d8da:	69e3      	ldr	r3, [r4, #28]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8e2:	b9b8      	cbnz	r0, 800d914 <_Balloc+0x68>
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	fa01 f605 	lsl.w	r6, r1, r5
 800d8ea:	1d72      	adds	r2, r6, #5
 800d8ec:	0092      	lsls	r2, r2, #2
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f000 fe0e 	bl	800e510 <_calloc_r>
 800d8f4:	b160      	cbz	r0, 800d910 <_Balloc+0x64>
 800d8f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8fa:	e00e      	b.n	800d91a <_Balloc+0x6e>
 800d8fc:	2221      	movs	r2, #33	; 0x21
 800d8fe:	2104      	movs	r1, #4
 800d900:	4620      	mov	r0, r4
 800d902:	f000 fe05 	bl	800e510 <_calloc_r>
 800d906:	69e3      	ldr	r3, [r4, #28]
 800d908:	60f0      	str	r0, [r6, #12]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1e4      	bne.n	800d8da <_Balloc+0x2e>
 800d910:	2000      	movs	r0, #0
 800d912:	bd70      	pop	{r4, r5, r6, pc}
 800d914:	6802      	ldr	r2, [r0, #0]
 800d916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d91a:	2300      	movs	r3, #0
 800d91c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d920:	e7f7      	b.n	800d912 <_Balloc+0x66>
 800d922:	bf00      	nop
 800d924:	0800ea9d 	.word	0x0800ea9d
 800d928:	0800eb1d 	.word	0x0800eb1d

0800d92c <_Bfree>:
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	69c6      	ldr	r6, [r0, #28]
 800d930:	4605      	mov	r5, r0
 800d932:	460c      	mov	r4, r1
 800d934:	b976      	cbnz	r6, 800d954 <_Bfree+0x28>
 800d936:	2010      	movs	r0, #16
 800d938:	f7ff ff04 	bl	800d744 <malloc>
 800d93c:	4602      	mov	r2, r0
 800d93e:	61e8      	str	r0, [r5, #28]
 800d940:	b920      	cbnz	r0, 800d94c <_Bfree+0x20>
 800d942:	4b09      	ldr	r3, [pc, #36]	; (800d968 <_Bfree+0x3c>)
 800d944:	4809      	ldr	r0, [pc, #36]	; (800d96c <_Bfree+0x40>)
 800d946:	218f      	movs	r1, #143	; 0x8f
 800d948:	f000 fdc4 	bl	800e4d4 <__assert_func>
 800d94c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d950:	6006      	str	r6, [r0, #0]
 800d952:	60c6      	str	r6, [r0, #12]
 800d954:	b13c      	cbz	r4, 800d966 <_Bfree+0x3a>
 800d956:	69eb      	ldr	r3, [r5, #28]
 800d958:	6862      	ldr	r2, [r4, #4]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d960:	6021      	str	r1, [r4, #0]
 800d962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d966:	bd70      	pop	{r4, r5, r6, pc}
 800d968:	0800ea9d 	.word	0x0800ea9d
 800d96c:	0800eb1d 	.word	0x0800eb1d

0800d970 <__multadd>:
 800d970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d974:	690d      	ldr	r5, [r1, #16]
 800d976:	4607      	mov	r7, r0
 800d978:	460c      	mov	r4, r1
 800d97a:	461e      	mov	r6, r3
 800d97c:	f101 0c14 	add.w	ip, r1, #20
 800d980:	2000      	movs	r0, #0
 800d982:	f8dc 3000 	ldr.w	r3, [ip]
 800d986:	b299      	uxth	r1, r3
 800d988:	fb02 6101 	mla	r1, r2, r1, r6
 800d98c:	0c1e      	lsrs	r6, r3, #16
 800d98e:	0c0b      	lsrs	r3, r1, #16
 800d990:	fb02 3306 	mla	r3, r2, r6, r3
 800d994:	b289      	uxth	r1, r1
 800d996:	3001      	adds	r0, #1
 800d998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d99c:	4285      	cmp	r5, r0
 800d99e:	f84c 1b04 	str.w	r1, [ip], #4
 800d9a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9a6:	dcec      	bgt.n	800d982 <__multadd+0x12>
 800d9a8:	b30e      	cbz	r6, 800d9ee <__multadd+0x7e>
 800d9aa:	68a3      	ldr	r3, [r4, #8]
 800d9ac:	42ab      	cmp	r3, r5
 800d9ae:	dc19      	bgt.n	800d9e4 <__multadd+0x74>
 800d9b0:	6861      	ldr	r1, [r4, #4]
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	3101      	adds	r1, #1
 800d9b6:	f7ff ff79 	bl	800d8ac <_Balloc>
 800d9ba:	4680      	mov	r8, r0
 800d9bc:	b928      	cbnz	r0, 800d9ca <__multadd+0x5a>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	4b0c      	ldr	r3, [pc, #48]	; (800d9f4 <__multadd+0x84>)
 800d9c2:	480d      	ldr	r0, [pc, #52]	; (800d9f8 <__multadd+0x88>)
 800d9c4:	21ba      	movs	r1, #186	; 0xba
 800d9c6:	f000 fd85 	bl	800e4d4 <__assert_func>
 800d9ca:	6922      	ldr	r2, [r4, #16]
 800d9cc:	3202      	adds	r2, #2
 800d9ce:	f104 010c 	add.w	r1, r4, #12
 800d9d2:	0092      	lsls	r2, r2, #2
 800d9d4:	300c      	adds	r0, #12
 800d9d6:	f7fe ffde 	bl	800c996 <memcpy>
 800d9da:	4621      	mov	r1, r4
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7ff ffa5 	bl	800d92c <_Bfree>
 800d9e2:	4644      	mov	r4, r8
 800d9e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9e8:	3501      	adds	r5, #1
 800d9ea:	615e      	str	r6, [r3, #20]
 800d9ec:	6125      	str	r5, [r4, #16]
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f4:	0800eb0c 	.word	0x0800eb0c
 800d9f8:	0800eb1d 	.word	0x0800eb1d

0800d9fc <__hi0bits>:
 800d9fc:	0c03      	lsrs	r3, r0, #16
 800d9fe:	041b      	lsls	r3, r3, #16
 800da00:	b9d3      	cbnz	r3, 800da38 <__hi0bits+0x3c>
 800da02:	0400      	lsls	r0, r0, #16
 800da04:	2310      	movs	r3, #16
 800da06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da0a:	bf04      	itt	eq
 800da0c:	0200      	lsleq	r0, r0, #8
 800da0e:	3308      	addeq	r3, #8
 800da10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da14:	bf04      	itt	eq
 800da16:	0100      	lsleq	r0, r0, #4
 800da18:	3304      	addeq	r3, #4
 800da1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da1e:	bf04      	itt	eq
 800da20:	0080      	lsleq	r0, r0, #2
 800da22:	3302      	addeq	r3, #2
 800da24:	2800      	cmp	r0, #0
 800da26:	db05      	blt.n	800da34 <__hi0bits+0x38>
 800da28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da2c:	f103 0301 	add.w	r3, r3, #1
 800da30:	bf08      	it	eq
 800da32:	2320      	moveq	r3, #32
 800da34:	4618      	mov	r0, r3
 800da36:	4770      	bx	lr
 800da38:	2300      	movs	r3, #0
 800da3a:	e7e4      	b.n	800da06 <__hi0bits+0xa>

0800da3c <__lo0bits>:
 800da3c:	6803      	ldr	r3, [r0, #0]
 800da3e:	f013 0207 	ands.w	r2, r3, #7
 800da42:	d00c      	beq.n	800da5e <__lo0bits+0x22>
 800da44:	07d9      	lsls	r1, r3, #31
 800da46:	d422      	bmi.n	800da8e <__lo0bits+0x52>
 800da48:	079a      	lsls	r2, r3, #30
 800da4a:	bf49      	itett	mi
 800da4c:	085b      	lsrmi	r3, r3, #1
 800da4e:	089b      	lsrpl	r3, r3, #2
 800da50:	6003      	strmi	r3, [r0, #0]
 800da52:	2201      	movmi	r2, #1
 800da54:	bf5c      	itt	pl
 800da56:	6003      	strpl	r3, [r0, #0]
 800da58:	2202      	movpl	r2, #2
 800da5a:	4610      	mov	r0, r2
 800da5c:	4770      	bx	lr
 800da5e:	b299      	uxth	r1, r3
 800da60:	b909      	cbnz	r1, 800da66 <__lo0bits+0x2a>
 800da62:	0c1b      	lsrs	r3, r3, #16
 800da64:	2210      	movs	r2, #16
 800da66:	b2d9      	uxtb	r1, r3
 800da68:	b909      	cbnz	r1, 800da6e <__lo0bits+0x32>
 800da6a:	3208      	adds	r2, #8
 800da6c:	0a1b      	lsrs	r3, r3, #8
 800da6e:	0719      	lsls	r1, r3, #28
 800da70:	bf04      	itt	eq
 800da72:	091b      	lsreq	r3, r3, #4
 800da74:	3204      	addeq	r2, #4
 800da76:	0799      	lsls	r1, r3, #30
 800da78:	bf04      	itt	eq
 800da7a:	089b      	lsreq	r3, r3, #2
 800da7c:	3202      	addeq	r2, #2
 800da7e:	07d9      	lsls	r1, r3, #31
 800da80:	d403      	bmi.n	800da8a <__lo0bits+0x4e>
 800da82:	085b      	lsrs	r3, r3, #1
 800da84:	f102 0201 	add.w	r2, r2, #1
 800da88:	d003      	beq.n	800da92 <__lo0bits+0x56>
 800da8a:	6003      	str	r3, [r0, #0]
 800da8c:	e7e5      	b.n	800da5a <__lo0bits+0x1e>
 800da8e:	2200      	movs	r2, #0
 800da90:	e7e3      	b.n	800da5a <__lo0bits+0x1e>
 800da92:	2220      	movs	r2, #32
 800da94:	e7e1      	b.n	800da5a <__lo0bits+0x1e>
	...

0800da98 <__i2b>:
 800da98:	b510      	push	{r4, lr}
 800da9a:	460c      	mov	r4, r1
 800da9c:	2101      	movs	r1, #1
 800da9e:	f7ff ff05 	bl	800d8ac <_Balloc>
 800daa2:	4602      	mov	r2, r0
 800daa4:	b928      	cbnz	r0, 800dab2 <__i2b+0x1a>
 800daa6:	4b05      	ldr	r3, [pc, #20]	; (800dabc <__i2b+0x24>)
 800daa8:	4805      	ldr	r0, [pc, #20]	; (800dac0 <__i2b+0x28>)
 800daaa:	f240 1145 	movw	r1, #325	; 0x145
 800daae:	f000 fd11 	bl	800e4d4 <__assert_func>
 800dab2:	2301      	movs	r3, #1
 800dab4:	6144      	str	r4, [r0, #20]
 800dab6:	6103      	str	r3, [r0, #16]
 800dab8:	bd10      	pop	{r4, pc}
 800daba:	bf00      	nop
 800dabc:	0800eb0c 	.word	0x0800eb0c
 800dac0:	0800eb1d 	.word	0x0800eb1d

0800dac4 <__multiply>:
 800dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac8:	4691      	mov	r9, r2
 800daca:	690a      	ldr	r2, [r1, #16]
 800dacc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	bfb8      	it	lt
 800dad4:	460b      	movlt	r3, r1
 800dad6:	460c      	mov	r4, r1
 800dad8:	bfbc      	itt	lt
 800dada:	464c      	movlt	r4, r9
 800dadc:	4699      	movlt	r9, r3
 800dade:	6927      	ldr	r7, [r4, #16]
 800dae0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dae4:	68a3      	ldr	r3, [r4, #8]
 800dae6:	6861      	ldr	r1, [r4, #4]
 800dae8:	eb07 060a 	add.w	r6, r7, sl
 800daec:	42b3      	cmp	r3, r6
 800daee:	b085      	sub	sp, #20
 800daf0:	bfb8      	it	lt
 800daf2:	3101      	addlt	r1, #1
 800daf4:	f7ff feda 	bl	800d8ac <_Balloc>
 800daf8:	b930      	cbnz	r0, 800db08 <__multiply+0x44>
 800dafa:	4602      	mov	r2, r0
 800dafc:	4b44      	ldr	r3, [pc, #272]	; (800dc10 <__multiply+0x14c>)
 800dafe:	4845      	ldr	r0, [pc, #276]	; (800dc14 <__multiply+0x150>)
 800db00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800db04:	f000 fce6 	bl	800e4d4 <__assert_func>
 800db08:	f100 0514 	add.w	r5, r0, #20
 800db0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db10:	462b      	mov	r3, r5
 800db12:	2200      	movs	r2, #0
 800db14:	4543      	cmp	r3, r8
 800db16:	d321      	bcc.n	800db5c <__multiply+0x98>
 800db18:	f104 0314 	add.w	r3, r4, #20
 800db1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db20:	f109 0314 	add.w	r3, r9, #20
 800db24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db28:	9202      	str	r2, [sp, #8]
 800db2a:	1b3a      	subs	r2, r7, r4
 800db2c:	3a15      	subs	r2, #21
 800db2e:	f022 0203 	bic.w	r2, r2, #3
 800db32:	3204      	adds	r2, #4
 800db34:	f104 0115 	add.w	r1, r4, #21
 800db38:	428f      	cmp	r7, r1
 800db3a:	bf38      	it	cc
 800db3c:	2204      	movcc	r2, #4
 800db3e:	9201      	str	r2, [sp, #4]
 800db40:	9a02      	ldr	r2, [sp, #8]
 800db42:	9303      	str	r3, [sp, #12]
 800db44:	429a      	cmp	r2, r3
 800db46:	d80c      	bhi.n	800db62 <__multiply+0x9e>
 800db48:	2e00      	cmp	r6, #0
 800db4a:	dd03      	ble.n	800db54 <__multiply+0x90>
 800db4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db50:	2b00      	cmp	r3, #0
 800db52:	d05b      	beq.n	800dc0c <__multiply+0x148>
 800db54:	6106      	str	r6, [r0, #16]
 800db56:	b005      	add	sp, #20
 800db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	f843 2b04 	str.w	r2, [r3], #4
 800db60:	e7d8      	b.n	800db14 <__multiply+0x50>
 800db62:	f8b3 a000 	ldrh.w	sl, [r3]
 800db66:	f1ba 0f00 	cmp.w	sl, #0
 800db6a:	d024      	beq.n	800dbb6 <__multiply+0xf2>
 800db6c:	f104 0e14 	add.w	lr, r4, #20
 800db70:	46a9      	mov	r9, r5
 800db72:	f04f 0c00 	mov.w	ip, #0
 800db76:	f85e 2b04 	ldr.w	r2, [lr], #4
 800db7a:	f8d9 1000 	ldr.w	r1, [r9]
 800db7e:	fa1f fb82 	uxth.w	fp, r2
 800db82:	b289      	uxth	r1, r1
 800db84:	fb0a 110b 	mla	r1, sl, fp, r1
 800db88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800db8c:	f8d9 2000 	ldr.w	r2, [r9]
 800db90:	4461      	add	r1, ip
 800db92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db96:	fb0a c20b 	mla	r2, sl, fp, ip
 800db9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800db9e:	b289      	uxth	r1, r1
 800dba0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dba4:	4577      	cmp	r7, lr
 800dba6:	f849 1b04 	str.w	r1, [r9], #4
 800dbaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbae:	d8e2      	bhi.n	800db76 <__multiply+0xb2>
 800dbb0:	9a01      	ldr	r2, [sp, #4]
 800dbb2:	f845 c002 	str.w	ip, [r5, r2]
 800dbb6:	9a03      	ldr	r2, [sp, #12]
 800dbb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	f1b9 0f00 	cmp.w	r9, #0
 800dbc2:	d021      	beq.n	800dc08 <__multiply+0x144>
 800dbc4:	6829      	ldr	r1, [r5, #0]
 800dbc6:	f104 0c14 	add.w	ip, r4, #20
 800dbca:	46ae      	mov	lr, r5
 800dbcc:	f04f 0a00 	mov.w	sl, #0
 800dbd0:	f8bc b000 	ldrh.w	fp, [ip]
 800dbd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dbd8:	fb09 220b 	mla	r2, r9, fp, r2
 800dbdc:	4452      	add	r2, sl
 800dbde:	b289      	uxth	r1, r1
 800dbe0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dbe4:	f84e 1b04 	str.w	r1, [lr], #4
 800dbe8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dbec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dbf0:	f8be 1000 	ldrh.w	r1, [lr]
 800dbf4:	fb09 110a 	mla	r1, r9, sl, r1
 800dbf8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dbfc:	4567      	cmp	r7, ip
 800dbfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc02:	d8e5      	bhi.n	800dbd0 <__multiply+0x10c>
 800dc04:	9a01      	ldr	r2, [sp, #4]
 800dc06:	50a9      	str	r1, [r5, r2]
 800dc08:	3504      	adds	r5, #4
 800dc0a:	e799      	b.n	800db40 <__multiply+0x7c>
 800dc0c:	3e01      	subs	r6, #1
 800dc0e:	e79b      	b.n	800db48 <__multiply+0x84>
 800dc10:	0800eb0c 	.word	0x0800eb0c
 800dc14:	0800eb1d 	.word	0x0800eb1d

0800dc18 <__pow5mult>:
 800dc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	4615      	mov	r5, r2
 800dc1e:	f012 0203 	ands.w	r2, r2, #3
 800dc22:	4606      	mov	r6, r0
 800dc24:	460f      	mov	r7, r1
 800dc26:	d007      	beq.n	800dc38 <__pow5mult+0x20>
 800dc28:	4c25      	ldr	r4, [pc, #148]	; (800dcc0 <__pow5mult+0xa8>)
 800dc2a:	3a01      	subs	r2, #1
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc32:	f7ff fe9d 	bl	800d970 <__multadd>
 800dc36:	4607      	mov	r7, r0
 800dc38:	10ad      	asrs	r5, r5, #2
 800dc3a:	d03d      	beq.n	800dcb8 <__pow5mult+0xa0>
 800dc3c:	69f4      	ldr	r4, [r6, #28]
 800dc3e:	b97c      	cbnz	r4, 800dc60 <__pow5mult+0x48>
 800dc40:	2010      	movs	r0, #16
 800dc42:	f7ff fd7f 	bl	800d744 <malloc>
 800dc46:	4602      	mov	r2, r0
 800dc48:	61f0      	str	r0, [r6, #28]
 800dc4a:	b928      	cbnz	r0, 800dc58 <__pow5mult+0x40>
 800dc4c:	4b1d      	ldr	r3, [pc, #116]	; (800dcc4 <__pow5mult+0xac>)
 800dc4e:	481e      	ldr	r0, [pc, #120]	; (800dcc8 <__pow5mult+0xb0>)
 800dc50:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dc54:	f000 fc3e 	bl	800e4d4 <__assert_func>
 800dc58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc5c:	6004      	str	r4, [r0, #0]
 800dc5e:	60c4      	str	r4, [r0, #12]
 800dc60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dc64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc68:	b94c      	cbnz	r4, 800dc7e <__pow5mult+0x66>
 800dc6a:	f240 2171 	movw	r1, #625	; 0x271
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f7ff ff12 	bl	800da98 <__i2b>
 800dc74:	2300      	movs	r3, #0
 800dc76:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	f04f 0900 	mov.w	r9, #0
 800dc82:	07eb      	lsls	r3, r5, #31
 800dc84:	d50a      	bpl.n	800dc9c <__pow5mult+0x84>
 800dc86:	4639      	mov	r1, r7
 800dc88:	4622      	mov	r2, r4
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f7ff ff1a 	bl	800dac4 <__multiply>
 800dc90:	4639      	mov	r1, r7
 800dc92:	4680      	mov	r8, r0
 800dc94:	4630      	mov	r0, r6
 800dc96:	f7ff fe49 	bl	800d92c <_Bfree>
 800dc9a:	4647      	mov	r7, r8
 800dc9c:	106d      	asrs	r5, r5, #1
 800dc9e:	d00b      	beq.n	800dcb8 <__pow5mult+0xa0>
 800dca0:	6820      	ldr	r0, [r4, #0]
 800dca2:	b938      	cbnz	r0, 800dcb4 <__pow5mult+0x9c>
 800dca4:	4622      	mov	r2, r4
 800dca6:	4621      	mov	r1, r4
 800dca8:	4630      	mov	r0, r6
 800dcaa:	f7ff ff0b 	bl	800dac4 <__multiply>
 800dcae:	6020      	str	r0, [r4, #0]
 800dcb0:	f8c0 9000 	str.w	r9, [r0]
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	e7e4      	b.n	800dc82 <__pow5mult+0x6a>
 800dcb8:	4638      	mov	r0, r7
 800dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcbe:	bf00      	nop
 800dcc0:	0800ec68 	.word	0x0800ec68
 800dcc4:	0800ea9d 	.word	0x0800ea9d
 800dcc8:	0800eb1d 	.word	0x0800eb1d

0800dccc <__lshift>:
 800dccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	6849      	ldr	r1, [r1, #4]
 800dcd4:	6923      	ldr	r3, [r4, #16]
 800dcd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcda:	68a3      	ldr	r3, [r4, #8]
 800dcdc:	4607      	mov	r7, r0
 800dcde:	4691      	mov	r9, r2
 800dce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dce4:	f108 0601 	add.w	r6, r8, #1
 800dce8:	42b3      	cmp	r3, r6
 800dcea:	db0b      	blt.n	800dd04 <__lshift+0x38>
 800dcec:	4638      	mov	r0, r7
 800dcee:	f7ff fddd 	bl	800d8ac <_Balloc>
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	b948      	cbnz	r0, 800dd0a <__lshift+0x3e>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	4b28      	ldr	r3, [pc, #160]	; (800dd9c <__lshift+0xd0>)
 800dcfa:	4829      	ldr	r0, [pc, #164]	; (800dda0 <__lshift+0xd4>)
 800dcfc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dd00:	f000 fbe8 	bl	800e4d4 <__assert_func>
 800dd04:	3101      	adds	r1, #1
 800dd06:	005b      	lsls	r3, r3, #1
 800dd08:	e7ee      	b.n	800dce8 <__lshift+0x1c>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f100 0114 	add.w	r1, r0, #20
 800dd10:	f100 0210 	add.w	r2, r0, #16
 800dd14:	4618      	mov	r0, r3
 800dd16:	4553      	cmp	r3, sl
 800dd18:	db33      	blt.n	800dd82 <__lshift+0xb6>
 800dd1a:	6920      	ldr	r0, [r4, #16]
 800dd1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd20:	f104 0314 	add.w	r3, r4, #20
 800dd24:	f019 091f 	ands.w	r9, r9, #31
 800dd28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd30:	d02b      	beq.n	800dd8a <__lshift+0xbe>
 800dd32:	f1c9 0e20 	rsb	lr, r9, #32
 800dd36:	468a      	mov	sl, r1
 800dd38:	2200      	movs	r2, #0
 800dd3a:	6818      	ldr	r0, [r3, #0]
 800dd3c:	fa00 f009 	lsl.w	r0, r0, r9
 800dd40:	4310      	orrs	r0, r2
 800dd42:	f84a 0b04 	str.w	r0, [sl], #4
 800dd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd4a:	459c      	cmp	ip, r3
 800dd4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd50:	d8f3      	bhi.n	800dd3a <__lshift+0x6e>
 800dd52:	ebac 0304 	sub.w	r3, ip, r4
 800dd56:	3b15      	subs	r3, #21
 800dd58:	f023 0303 	bic.w	r3, r3, #3
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	f104 0015 	add.w	r0, r4, #21
 800dd62:	4584      	cmp	ip, r0
 800dd64:	bf38      	it	cc
 800dd66:	2304      	movcc	r3, #4
 800dd68:	50ca      	str	r2, [r1, r3]
 800dd6a:	b10a      	cbz	r2, 800dd70 <__lshift+0xa4>
 800dd6c:	f108 0602 	add.w	r6, r8, #2
 800dd70:	3e01      	subs	r6, #1
 800dd72:	4638      	mov	r0, r7
 800dd74:	612e      	str	r6, [r5, #16]
 800dd76:	4621      	mov	r1, r4
 800dd78:	f7ff fdd8 	bl	800d92c <_Bfree>
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd82:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd86:	3301      	adds	r3, #1
 800dd88:	e7c5      	b.n	800dd16 <__lshift+0x4a>
 800dd8a:	3904      	subs	r1, #4
 800dd8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd90:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd94:	459c      	cmp	ip, r3
 800dd96:	d8f9      	bhi.n	800dd8c <__lshift+0xc0>
 800dd98:	e7ea      	b.n	800dd70 <__lshift+0xa4>
 800dd9a:	bf00      	nop
 800dd9c:	0800eb0c 	.word	0x0800eb0c
 800dda0:	0800eb1d 	.word	0x0800eb1d

0800dda4 <__mcmp>:
 800dda4:	b530      	push	{r4, r5, lr}
 800dda6:	6902      	ldr	r2, [r0, #16]
 800dda8:	690c      	ldr	r4, [r1, #16]
 800ddaa:	1b12      	subs	r2, r2, r4
 800ddac:	d10e      	bne.n	800ddcc <__mcmp+0x28>
 800ddae:	f100 0314 	add.w	r3, r0, #20
 800ddb2:	3114      	adds	r1, #20
 800ddb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ddbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ddc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ddc4:	42a5      	cmp	r5, r4
 800ddc6:	d003      	beq.n	800ddd0 <__mcmp+0x2c>
 800ddc8:	d305      	bcc.n	800ddd6 <__mcmp+0x32>
 800ddca:	2201      	movs	r2, #1
 800ddcc:	4610      	mov	r0, r2
 800ddce:	bd30      	pop	{r4, r5, pc}
 800ddd0:	4283      	cmp	r3, r0
 800ddd2:	d3f3      	bcc.n	800ddbc <__mcmp+0x18>
 800ddd4:	e7fa      	b.n	800ddcc <__mcmp+0x28>
 800ddd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddda:	e7f7      	b.n	800ddcc <__mcmp+0x28>

0800dddc <__mdiff>:
 800dddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde0:	460c      	mov	r4, r1
 800dde2:	4606      	mov	r6, r0
 800dde4:	4611      	mov	r1, r2
 800dde6:	4620      	mov	r0, r4
 800dde8:	4690      	mov	r8, r2
 800ddea:	f7ff ffdb 	bl	800dda4 <__mcmp>
 800ddee:	1e05      	subs	r5, r0, #0
 800ddf0:	d110      	bne.n	800de14 <__mdiff+0x38>
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f7ff fd59 	bl	800d8ac <_Balloc>
 800ddfa:	b930      	cbnz	r0, 800de0a <__mdiff+0x2e>
 800ddfc:	4b3a      	ldr	r3, [pc, #232]	; (800dee8 <__mdiff+0x10c>)
 800ddfe:	4602      	mov	r2, r0
 800de00:	f240 2137 	movw	r1, #567	; 0x237
 800de04:	4839      	ldr	r0, [pc, #228]	; (800deec <__mdiff+0x110>)
 800de06:	f000 fb65 	bl	800e4d4 <__assert_func>
 800de0a:	2301      	movs	r3, #1
 800de0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de14:	bfa4      	itt	ge
 800de16:	4643      	movge	r3, r8
 800de18:	46a0      	movge	r8, r4
 800de1a:	4630      	mov	r0, r6
 800de1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de20:	bfa6      	itte	ge
 800de22:	461c      	movge	r4, r3
 800de24:	2500      	movge	r5, #0
 800de26:	2501      	movlt	r5, #1
 800de28:	f7ff fd40 	bl	800d8ac <_Balloc>
 800de2c:	b920      	cbnz	r0, 800de38 <__mdiff+0x5c>
 800de2e:	4b2e      	ldr	r3, [pc, #184]	; (800dee8 <__mdiff+0x10c>)
 800de30:	4602      	mov	r2, r0
 800de32:	f240 2145 	movw	r1, #581	; 0x245
 800de36:	e7e5      	b.n	800de04 <__mdiff+0x28>
 800de38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de3c:	6926      	ldr	r6, [r4, #16]
 800de3e:	60c5      	str	r5, [r0, #12]
 800de40:	f104 0914 	add.w	r9, r4, #20
 800de44:	f108 0514 	add.w	r5, r8, #20
 800de48:	f100 0e14 	add.w	lr, r0, #20
 800de4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de54:	f108 0210 	add.w	r2, r8, #16
 800de58:	46f2      	mov	sl, lr
 800de5a:	2100      	movs	r1, #0
 800de5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800de60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de64:	fa11 f88b 	uxtah	r8, r1, fp
 800de68:	b299      	uxth	r1, r3
 800de6a:	0c1b      	lsrs	r3, r3, #16
 800de6c:	eba8 0801 	sub.w	r8, r8, r1
 800de70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de78:	fa1f f888 	uxth.w	r8, r8
 800de7c:	1419      	asrs	r1, r3, #16
 800de7e:	454e      	cmp	r6, r9
 800de80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de84:	f84a 3b04 	str.w	r3, [sl], #4
 800de88:	d8e8      	bhi.n	800de5c <__mdiff+0x80>
 800de8a:	1b33      	subs	r3, r6, r4
 800de8c:	3b15      	subs	r3, #21
 800de8e:	f023 0303 	bic.w	r3, r3, #3
 800de92:	3304      	adds	r3, #4
 800de94:	3415      	adds	r4, #21
 800de96:	42a6      	cmp	r6, r4
 800de98:	bf38      	it	cc
 800de9a:	2304      	movcc	r3, #4
 800de9c:	441d      	add	r5, r3
 800de9e:	4473      	add	r3, lr
 800dea0:	469e      	mov	lr, r3
 800dea2:	462e      	mov	r6, r5
 800dea4:	4566      	cmp	r6, ip
 800dea6:	d30e      	bcc.n	800dec6 <__mdiff+0xea>
 800dea8:	f10c 0203 	add.w	r2, ip, #3
 800deac:	1b52      	subs	r2, r2, r5
 800deae:	f022 0203 	bic.w	r2, r2, #3
 800deb2:	3d03      	subs	r5, #3
 800deb4:	45ac      	cmp	ip, r5
 800deb6:	bf38      	it	cc
 800deb8:	2200      	movcc	r2, #0
 800deba:	4413      	add	r3, r2
 800debc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dec0:	b17a      	cbz	r2, 800dee2 <__mdiff+0x106>
 800dec2:	6107      	str	r7, [r0, #16]
 800dec4:	e7a4      	b.n	800de10 <__mdiff+0x34>
 800dec6:	f856 8b04 	ldr.w	r8, [r6], #4
 800deca:	fa11 f288 	uxtah	r2, r1, r8
 800dece:	1414      	asrs	r4, r2, #16
 800ded0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ded4:	b292      	uxth	r2, r2
 800ded6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800deda:	f84e 2b04 	str.w	r2, [lr], #4
 800dede:	1421      	asrs	r1, r4, #16
 800dee0:	e7e0      	b.n	800dea4 <__mdiff+0xc8>
 800dee2:	3f01      	subs	r7, #1
 800dee4:	e7ea      	b.n	800debc <__mdiff+0xe0>
 800dee6:	bf00      	nop
 800dee8:	0800eb0c 	.word	0x0800eb0c
 800deec:	0800eb1d 	.word	0x0800eb1d

0800def0 <__d2b>:
 800def0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800def4:	460f      	mov	r7, r1
 800def6:	2101      	movs	r1, #1
 800def8:	ec59 8b10 	vmov	r8, r9, d0
 800defc:	4616      	mov	r6, r2
 800defe:	f7ff fcd5 	bl	800d8ac <_Balloc>
 800df02:	4604      	mov	r4, r0
 800df04:	b930      	cbnz	r0, 800df14 <__d2b+0x24>
 800df06:	4602      	mov	r2, r0
 800df08:	4b24      	ldr	r3, [pc, #144]	; (800df9c <__d2b+0xac>)
 800df0a:	4825      	ldr	r0, [pc, #148]	; (800dfa0 <__d2b+0xb0>)
 800df0c:	f240 310f 	movw	r1, #783	; 0x30f
 800df10:	f000 fae0 	bl	800e4d4 <__assert_func>
 800df14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800df18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df1c:	bb2d      	cbnz	r5, 800df6a <__d2b+0x7a>
 800df1e:	9301      	str	r3, [sp, #4]
 800df20:	f1b8 0300 	subs.w	r3, r8, #0
 800df24:	d026      	beq.n	800df74 <__d2b+0x84>
 800df26:	4668      	mov	r0, sp
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	f7ff fd87 	bl	800da3c <__lo0bits>
 800df2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800df32:	b1e8      	cbz	r0, 800df70 <__d2b+0x80>
 800df34:	f1c0 0320 	rsb	r3, r0, #32
 800df38:	fa02 f303 	lsl.w	r3, r2, r3
 800df3c:	430b      	orrs	r3, r1
 800df3e:	40c2      	lsrs	r2, r0
 800df40:	6163      	str	r3, [r4, #20]
 800df42:	9201      	str	r2, [sp, #4]
 800df44:	9b01      	ldr	r3, [sp, #4]
 800df46:	61a3      	str	r3, [r4, #24]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	bf14      	ite	ne
 800df4c:	2202      	movne	r2, #2
 800df4e:	2201      	moveq	r2, #1
 800df50:	6122      	str	r2, [r4, #16]
 800df52:	b1bd      	cbz	r5, 800df84 <__d2b+0x94>
 800df54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df58:	4405      	add	r5, r0
 800df5a:	603d      	str	r5, [r7, #0]
 800df5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df60:	6030      	str	r0, [r6, #0]
 800df62:	4620      	mov	r0, r4
 800df64:	b003      	add	sp, #12
 800df66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df6e:	e7d6      	b.n	800df1e <__d2b+0x2e>
 800df70:	6161      	str	r1, [r4, #20]
 800df72:	e7e7      	b.n	800df44 <__d2b+0x54>
 800df74:	a801      	add	r0, sp, #4
 800df76:	f7ff fd61 	bl	800da3c <__lo0bits>
 800df7a:	9b01      	ldr	r3, [sp, #4]
 800df7c:	6163      	str	r3, [r4, #20]
 800df7e:	3020      	adds	r0, #32
 800df80:	2201      	movs	r2, #1
 800df82:	e7e5      	b.n	800df50 <__d2b+0x60>
 800df84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df8c:	6038      	str	r0, [r7, #0]
 800df8e:	6918      	ldr	r0, [r3, #16]
 800df90:	f7ff fd34 	bl	800d9fc <__hi0bits>
 800df94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df98:	e7e2      	b.n	800df60 <__d2b+0x70>
 800df9a:	bf00      	nop
 800df9c:	0800eb0c 	.word	0x0800eb0c
 800dfa0:	0800eb1d 	.word	0x0800eb1d

0800dfa4 <__sfputc_r>:
 800dfa4:	6893      	ldr	r3, [r2, #8]
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	b410      	push	{r4}
 800dfac:	6093      	str	r3, [r2, #8]
 800dfae:	da08      	bge.n	800dfc2 <__sfputc_r+0x1e>
 800dfb0:	6994      	ldr	r4, [r2, #24]
 800dfb2:	42a3      	cmp	r3, r4
 800dfb4:	db01      	blt.n	800dfba <__sfputc_r+0x16>
 800dfb6:	290a      	cmp	r1, #10
 800dfb8:	d103      	bne.n	800dfc2 <__sfputc_r+0x1e>
 800dfba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfbe:	f000 b9e3 	b.w	800e388 <__swbuf_r>
 800dfc2:	6813      	ldr	r3, [r2, #0]
 800dfc4:	1c58      	adds	r0, r3, #1
 800dfc6:	6010      	str	r0, [r2, #0]
 800dfc8:	7019      	strb	r1, [r3, #0]
 800dfca:	4608      	mov	r0, r1
 800dfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfd0:	4770      	bx	lr

0800dfd2 <__sfputs_r>:
 800dfd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	460f      	mov	r7, r1
 800dfd8:	4614      	mov	r4, r2
 800dfda:	18d5      	adds	r5, r2, r3
 800dfdc:	42ac      	cmp	r4, r5
 800dfde:	d101      	bne.n	800dfe4 <__sfputs_r+0x12>
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	e007      	b.n	800dff4 <__sfputs_r+0x22>
 800dfe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfe8:	463a      	mov	r2, r7
 800dfea:	4630      	mov	r0, r6
 800dfec:	f7ff ffda 	bl	800dfa4 <__sfputc_r>
 800dff0:	1c43      	adds	r3, r0, #1
 800dff2:	d1f3      	bne.n	800dfdc <__sfputs_r+0xa>
 800dff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dff8 <_vfiprintf_r>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	460d      	mov	r5, r1
 800dffe:	b09d      	sub	sp, #116	; 0x74
 800e000:	4614      	mov	r4, r2
 800e002:	4698      	mov	r8, r3
 800e004:	4606      	mov	r6, r0
 800e006:	b118      	cbz	r0, 800e010 <_vfiprintf_r+0x18>
 800e008:	6a03      	ldr	r3, [r0, #32]
 800e00a:	b90b      	cbnz	r3, 800e010 <_vfiprintf_r+0x18>
 800e00c:	f7fe fbb8 	bl	800c780 <__sinit>
 800e010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e012:	07d9      	lsls	r1, r3, #31
 800e014:	d405      	bmi.n	800e022 <_vfiprintf_r+0x2a>
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	059a      	lsls	r2, r3, #22
 800e01a:	d402      	bmi.n	800e022 <_vfiprintf_r+0x2a>
 800e01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e01e:	f7fe fcb8 	bl	800c992 <__retarget_lock_acquire_recursive>
 800e022:	89ab      	ldrh	r3, [r5, #12]
 800e024:	071b      	lsls	r3, r3, #28
 800e026:	d501      	bpl.n	800e02c <_vfiprintf_r+0x34>
 800e028:	692b      	ldr	r3, [r5, #16]
 800e02a:	b99b      	cbnz	r3, 800e054 <_vfiprintf_r+0x5c>
 800e02c:	4629      	mov	r1, r5
 800e02e:	4630      	mov	r0, r6
 800e030:	f000 f9e8 	bl	800e404 <__swsetup_r>
 800e034:	b170      	cbz	r0, 800e054 <_vfiprintf_r+0x5c>
 800e036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e038:	07dc      	lsls	r4, r3, #31
 800e03a:	d504      	bpl.n	800e046 <_vfiprintf_r+0x4e>
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295
 800e040:	b01d      	add	sp, #116	; 0x74
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	89ab      	ldrh	r3, [r5, #12]
 800e048:	0598      	lsls	r0, r3, #22
 800e04a:	d4f7      	bmi.n	800e03c <_vfiprintf_r+0x44>
 800e04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e04e:	f7fe fca1 	bl	800c994 <__retarget_lock_release_recursive>
 800e052:	e7f3      	b.n	800e03c <_vfiprintf_r+0x44>
 800e054:	2300      	movs	r3, #0
 800e056:	9309      	str	r3, [sp, #36]	; 0x24
 800e058:	2320      	movs	r3, #32
 800e05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e05e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e062:	2330      	movs	r3, #48	; 0x30
 800e064:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e218 <_vfiprintf_r+0x220>
 800e068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e06c:	f04f 0901 	mov.w	r9, #1
 800e070:	4623      	mov	r3, r4
 800e072:	469a      	mov	sl, r3
 800e074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e078:	b10a      	cbz	r2, 800e07e <_vfiprintf_r+0x86>
 800e07a:	2a25      	cmp	r2, #37	; 0x25
 800e07c:	d1f9      	bne.n	800e072 <_vfiprintf_r+0x7a>
 800e07e:	ebba 0b04 	subs.w	fp, sl, r4
 800e082:	d00b      	beq.n	800e09c <_vfiprintf_r+0xa4>
 800e084:	465b      	mov	r3, fp
 800e086:	4622      	mov	r2, r4
 800e088:	4629      	mov	r1, r5
 800e08a:	4630      	mov	r0, r6
 800e08c:	f7ff ffa1 	bl	800dfd2 <__sfputs_r>
 800e090:	3001      	adds	r0, #1
 800e092:	f000 80a9 	beq.w	800e1e8 <_vfiprintf_r+0x1f0>
 800e096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e098:	445a      	add	r2, fp
 800e09a:	9209      	str	r2, [sp, #36]	; 0x24
 800e09c:	f89a 3000 	ldrb.w	r3, [sl]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 80a1 	beq.w	800e1e8 <_vfiprintf_r+0x1f0>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0b0:	f10a 0a01 	add.w	sl, sl, #1
 800e0b4:	9304      	str	r3, [sp, #16]
 800e0b6:	9307      	str	r3, [sp, #28]
 800e0b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0bc:	931a      	str	r3, [sp, #104]	; 0x68
 800e0be:	4654      	mov	r4, sl
 800e0c0:	2205      	movs	r2, #5
 800e0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0c6:	4854      	ldr	r0, [pc, #336]	; (800e218 <_vfiprintf_r+0x220>)
 800e0c8:	f7f2 f892 	bl	80001f0 <memchr>
 800e0cc:	9a04      	ldr	r2, [sp, #16]
 800e0ce:	b9d8      	cbnz	r0, 800e108 <_vfiprintf_r+0x110>
 800e0d0:	06d1      	lsls	r1, r2, #27
 800e0d2:	bf44      	itt	mi
 800e0d4:	2320      	movmi	r3, #32
 800e0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0da:	0713      	lsls	r3, r2, #28
 800e0dc:	bf44      	itt	mi
 800e0de:	232b      	movmi	r3, #43	; 0x2b
 800e0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ea:	d015      	beq.n	800e118 <_vfiprintf_r+0x120>
 800e0ec:	9a07      	ldr	r2, [sp, #28]
 800e0ee:	4654      	mov	r4, sl
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	f04f 0c0a 	mov.w	ip, #10
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0fc:	3b30      	subs	r3, #48	; 0x30
 800e0fe:	2b09      	cmp	r3, #9
 800e100:	d94d      	bls.n	800e19e <_vfiprintf_r+0x1a6>
 800e102:	b1b0      	cbz	r0, 800e132 <_vfiprintf_r+0x13a>
 800e104:	9207      	str	r2, [sp, #28]
 800e106:	e014      	b.n	800e132 <_vfiprintf_r+0x13a>
 800e108:	eba0 0308 	sub.w	r3, r0, r8
 800e10c:	fa09 f303 	lsl.w	r3, r9, r3
 800e110:	4313      	orrs	r3, r2
 800e112:	9304      	str	r3, [sp, #16]
 800e114:	46a2      	mov	sl, r4
 800e116:	e7d2      	b.n	800e0be <_vfiprintf_r+0xc6>
 800e118:	9b03      	ldr	r3, [sp, #12]
 800e11a:	1d19      	adds	r1, r3, #4
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	9103      	str	r1, [sp, #12]
 800e120:	2b00      	cmp	r3, #0
 800e122:	bfbb      	ittet	lt
 800e124:	425b      	neglt	r3, r3
 800e126:	f042 0202 	orrlt.w	r2, r2, #2
 800e12a:	9307      	strge	r3, [sp, #28]
 800e12c:	9307      	strlt	r3, [sp, #28]
 800e12e:	bfb8      	it	lt
 800e130:	9204      	strlt	r2, [sp, #16]
 800e132:	7823      	ldrb	r3, [r4, #0]
 800e134:	2b2e      	cmp	r3, #46	; 0x2e
 800e136:	d10c      	bne.n	800e152 <_vfiprintf_r+0x15a>
 800e138:	7863      	ldrb	r3, [r4, #1]
 800e13a:	2b2a      	cmp	r3, #42	; 0x2a
 800e13c:	d134      	bne.n	800e1a8 <_vfiprintf_r+0x1b0>
 800e13e:	9b03      	ldr	r3, [sp, #12]
 800e140:	1d1a      	adds	r2, r3, #4
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	9203      	str	r2, [sp, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	bfb8      	it	lt
 800e14a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e14e:	3402      	adds	r4, #2
 800e150:	9305      	str	r3, [sp, #20]
 800e152:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e228 <_vfiprintf_r+0x230>
 800e156:	7821      	ldrb	r1, [r4, #0]
 800e158:	2203      	movs	r2, #3
 800e15a:	4650      	mov	r0, sl
 800e15c:	f7f2 f848 	bl	80001f0 <memchr>
 800e160:	b138      	cbz	r0, 800e172 <_vfiprintf_r+0x17a>
 800e162:	9b04      	ldr	r3, [sp, #16]
 800e164:	eba0 000a 	sub.w	r0, r0, sl
 800e168:	2240      	movs	r2, #64	; 0x40
 800e16a:	4082      	lsls	r2, r0
 800e16c:	4313      	orrs	r3, r2
 800e16e:	3401      	adds	r4, #1
 800e170:	9304      	str	r3, [sp, #16]
 800e172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e176:	4829      	ldr	r0, [pc, #164]	; (800e21c <_vfiprintf_r+0x224>)
 800e178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e17c:	2206      	movs	r2, #6
 800e17e:	f7f2 f837 	bl	80001f0 <memchr>
 800e182:	2800      	cmp	r0, #0
 800e184:	d03f      	beq.n	800e206 <_vfiprintf_r+0x20e>
 800e186:	4b26      	ldr	r3, [pc, #152]	; (800e220 <_vfiprintf_r+0x228>)
 800e188:	bb1b      	cbnz	r3, 800e1d2 <_vfiprintf_r+0x1da>
 800e18a:	9b03      	ldr	r3, [sp, #12]
 800e18c:	3307      	adds	r3, #7
 800e18e:	f023 0307 	bic.w	r3, r3, #7
 800e192:	3308      	adds	r3, #8
 800e194:	9303      	str	r3, [sp, #12]
 800e196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e198:	443b      	add	r3, r7
 800e19a:	9309      	str	r3, [sp, #36]	; 0x24
 800e19c:	e768      	b.n	800e070 <_vfiprintf_r+0x78>
 800e19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	2001      	movs	r0, #1
 800e1a6:	e7a6      	b.n	800e0f6 <_vfiprintf_r+0xfe>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	3401      	adds	r4, #1
 800e1ac:	9305      	str	r3, [sp, #20]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	f04f 0c0a 	mov.w	ip, #10
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ba:	3a30      	subs	r2, #48	; 0x30
 800e1bc:	2a09      	cmp	r2, #9
 800e1be:	d903      	bls.n	800e1c8 <_vfiprintf_r+0x1d0>
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d0c6      	beq.n	800e152 <_vfiprintf_r+0x15a>
 800e1c4:	9105      	str	r1, [sp, #20]
 800e1c6:	e7c4      	b.n	800e152 <_vfiprintf_r+0x15a>
 800e1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e7f0      	b.n	800e1b4 <_vfiprintf_r+0x1bc>
 800e1d2:	ab03      	add	r3, sp, #12
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	462a      	mov	r2, r5
 800e1d8:	4b12      	ldr	r3, [pc, #72]	; (800e224 <_vfiprintf_r+0x22c>)
 800e1da:	a904      	add	r1, sp, #16
 800e1dc:	4630      	mov	r0, r6
 800e1de:	f7fd fe7d 	bl	800bedc <_printf_float>
 800e1e2:	4607      	mov	r7, r0
 800e1e4:	1c78      	adds	r0, r7, #1
 800e1e6:	d1d6      	bne.n	800e196 <_vfiprintf_r+0x19e>
 800e1e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1ea:	07d9      	lsls	r1, r3, #31
 800e1ec:	d405      	bmi.n	800e1fa <_vfiprintf_r+0x202>
 800e1ee:	89ab      	ldrh	r3, [r5, #12]
 800e1f0:	059a      	lsls	r2, r3, #22
 800e1f2:	d402      	bmi.n	800e1fa <_vfiprintf_r+0x202>
 800e1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1f6:	f7fe fbcd 	bl	800c994 <__retarget_lock_release_recursive>
 800e1fa:	89ab      	ldrh	r3, [r5, #12]
 800e1fc:	065b      	lsls	r3, r3, #25
 800e1fe:	f53f af1d 	bmi.w	800e03c <_vfiprintf_r+0x44>
 800e202:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e204:	e71c      	b.n	800e040 <_vfiprintf_r+0x48>
 800e206:	ab03      	add	r3, sp, #12
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	462a      	mov	r2, r5
 800e20c:	4b05      	ldr	r3, [pc, #20]	; (800e224 <_vfiprintf_r+0x22c>)
 800e20e:	a904      	add	r1, sp, #16
 800e210:	4630      	mov	r0, r6
 800e212:	f7fe f907 	bl	800c424 <_printf_i>
 800e216:	e7e4      	b.n	800e1e2 <_vfiprintf_r+0x1ea>
 800e218:	0800ec74 	.word	0x0800ec74
 800e21c:	0800ec7e 	.word	0x0800ec7e
 800e220:	0800bedd 	.word	0x0800bedd
 800e224:	0800dfd3 	.word	0x0800dfd3
 800e228:	0800ec7a 	.word	0x0800ec7a

0800e22c <__sflush_r>:
 800e22c:	898a      	ldrh	r2, [r1, #12]
 800e22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e232:	4605      	mov	r5, r0
 800e234:	0710      	lsls	r0, r2, #28
 800e236:	460c      	mov	r4, r1
 800e238:	d458      	bmi.n	800e2ec <__sflush_r+0xc0>
 800e23a:	684b      	ldr	r3, [r1, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	dc05      	bgt.n	800e24c <__sflush_r+0x20>
 800e240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e242:	2b00      	cmp	r3, #0
 800e244:	dc02      	bgt.n	800e24c <__sflush_r+0x20>
 800e246:	2000      	movs	r0, #0
 800e248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e24e:	2e00      	cmp	r6, #0
 800e250:	d0f9      	beq.n	800e246 <__sflush_r+0x1a>
 800e252:	2300      	movs	r3, #0
 800e254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e258:	682f      	ldr	r7, [r5, #0]
 800e25a:	6a21      	ldr	r1, [r4, #32]
 800e25c:	602b      	str	r3, [r5, #0]
 800e25e:	d032      	beq.n	800e2c6 <__sflush_r+0x9a>
 800e260:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	075a      	lsls	r2, r3, #29
 800e266:	d505      	bpl.n	800e274 <__sflush_r+0x48>
 800e268:	6863      	ldr	r3, [r4, #4]
 800e26a:	1ac0      	subs	r0, r0, r3
 800e26c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e26e:	b10b      	cbz	r3, 800e274 <__sflush_r+0x48>
 800e270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e272:	1ac0      	subs	r0, r0, r3
 800e274:	2300      	movs	r3, #0
 800e276:	4602      	mov	r2, r0
 800e278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e27a:	6a21      	ldr	r1, [r4, #32]
 800e27c:	4628      	mov	r0, r5
 800e27e:	47b0      	blx	r6
 800e280:	1c43      	adds	r3, r0, #1
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	d106      	bne.n	800e294 <__sflush_r+0x68>
 800e286:	6829      	ldr	r1, [r5, #0]
 800e288:	291d      	cmp	r1, #29
 800e28a:	d82b      	bhi.n	800e2e4 <__sflush_r+0xb8>
 800e28c:	4a29      	ldr	r2, [pc, #164]	; (800e334 <__sflush_r+0x108>)
 800e28e:	410a      	asrs	r2, r1
 800e290:	07d6      	lsls	r6, r2, #31
 800e292:	d427      	bmi.n	800e2e4 <__sflush_r+0xb8>
 800e294:	2200      	movs	r2, #0
 800e296:	6062      	str	r2, [r4, #4]
 800e298:	04d9      	lsls	r1, r3, #19
 800e29a:	6922      	ldr	r2, [r4, #16]
 800e29c:	6022      	str	r2, [r4, #0]
 800e29e:	d504      	bpl.n	800e2aa <__sflush_r+0x7e>
 800e2a0:	1c42      	adds	r2, r0, #1
 800e2a2:	d101      	bne.n	800e2a8 <__sflush_r+0x7c>
 800e2a4:	682b      	ldr	r3, [r5, #0]
 800e2a6:	b903      	cbnz	r3, 800e2aa <__sflush_r+0x7e>
 800e2a8:	6560      	str	r0, [r4, #84]	; 0x54
 800e2aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2ac:	602f      	str	r7, [r5, #0]
 800e2ae:	2900      	cmp	r1, #0
 800e2b0:	d0c9      	beq.n	800e246 <__sflush_r+0x1a>
 800e2b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2b6:	4299      	cmp	r1, r3
 800e2b8:	d002      	beq.n	800e2c0 <__sflush_r+0x94>
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	f7ff f9f6 	bl	800d6ac <_free_r>
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	6360      	str	r0, [r4, #52]	; 0x34
 800e2c4:	e7c0      	b.n	800e248 <__sflush_r+0x1c>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	47b0      	blx	r6
 800e2cc:	1c41      	adds	r1, r0, #1
 800e2ce:	d1c8      	bne.n	800e262 <__sflush_r+0x36>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d0c5      	beq.n	800e262 <__sflush_r+0x36>
 800e2d6:	2b1d      	cmp	r3, #29
 800e2d8:	d001      	beq.n	800e2de <__sflush_r+0xb2>
 800e2da:	2b16      	cmp	r3, #22
 800e2dc:	d101      	bne.n	800e2e2 <__sflush_r+0xb6>
 800e2de:	602f      	str	r7, [r5, #0]
 800e2e0:	e7b1      	b.n	800e246 <__sflush_r+0x1a>
 800e2e2:	89a3      	ldrh	r3, [r4, #12]
 800e2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2e8:	81a3      	strh	r3, [r4, #12]
 800e2ea:	e7ad      	b.n	800e248 <__sflush_r+0x1c>
 800e2ec:	690f      	ldr	r7, [r1, #16]
 800e2ee:	2f00      	cmp	r7, #0
 800e2f0:	d0a9      	beq.n	800e246 <__sflush_r+0x1a>
 800e2f2:	0793      	lsls	r3, r2, #30
 800e2f4:	680e      	ldr	r6, [r1, #0]
 800e2f6:	bf08      	it	eq
 800e2f8:	694b      	ldreq	r3, [r1, #20]
 800e2fa:	600f      	str	r7, [r1, #0]
 800e2fc:	bf18      	it	ne
 800e2fe:	2300      	movne	r3, #0
 800e300:	eba6 0807 	sub.w	r8, r6, r7
 800e304:	608b      	str	r3, [r1, #8]
 800e306:	f1b8 0f00 	cmp.w	r8, #0
 800e30a:	dd9c      	ble.n	800e246 <__sflush_r+0x1a>
 800e30c:	6a21      	ldr	r1, [r4, #32]
 800e30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e310:	4643      	mov	r3, r8
 800e312:	463a      	mov	r2, r7
 800e314:	4628      	mov	r0, r5
 800e316:	47b0      	blx	r6
 800e318:	2800      	cmp	r0, #0
 800e31a:	dc06      	bgt.n	800e32a <__sflush_r+0xfe>
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	e78e      	b.n	800e248 <__sflush_r+0x1c>
 800e32a:	4407      	add	r7, r0
 800e32c:	eba8 0800 	sub.w	r8, r8, r0
 800e330:	e7e9      	b.n	800e306 <__sflush_r+0xda>
 800e332:	bf00      	nop
 800e334:	dfbffffe 	.word	0xdfbffffe

0800e338 <_fflush_r>:
 800e338:	b538      	push	{r3, r4, r5, lr}
 800e33a:	690b      	ldr	r3, [r1, #16]
 800e33c:	4605      	mov	r5, r0
 800e33e:	460c      	mov	r4, r1
 800e340:	b913      	cbnz	r3, 800e348 <_fflush_r+0x10>
 800e342:	2500      	movs	r5, #0
 800e344:	4628      	mov	r0, r5
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	b118      	cbz	r0, 800e352 <_fflush_r+0x1a>
 800e34a:	6a03      	ldr	r3, [r0, #32]
 800e34c:	b90b      	cbnz	r3, 800e352 <_fflush_r+0x1a>
 800e34e:	f7fe fa17 	bl	800c780 <__sinit>
 800e352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d0f3      	beq.n	800e342 <_fflush_r+0xa>
 800e35a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e35c:	07d0      	lsls	r0, r2, #31
 800e35e:	d404      	bmi.n	800e36a <_fflush_r+0x32>
 800e360:	0599      	lsls	r1, r3, #22
 800e362:	d402      	bmi.n	800e36a <_fflush_r+0x32>
 800e364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e366:	f7fe fb14 	bl	800c992 <__retarget_lock_acquire_recursive>
 800e36a:	4628      	mov	r0, r5
 800e36c:	4621      	mov	r1, r4
 800e36e:	f7ff ff5d 	bl	800e22c <__sflush_r>
 800e372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e374:	07da      	lsls	r2, r3, #31
 800e376:	4605      	mov	r5, r0
 800e378:	d4e4      	bmi.n	800e344 <_fflush_r+0xc>
 800e37a:	89a3      	ldrh	r3, [r4, #12]
 800e37c:	059b      	lsls	r3, r3, #22
 800e37e:	d4e1      	bmi.n	800e344 <_fflush_r+0xc>
 800e380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e382:	f7fe fb07 	bl	800c994 <__retarget_lock_release_recursive>
 800e386:	e7dd      	b.n	800e344 <_fflush_r+0xc>

0800e388 <__swbuf_r>:
 800e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38a:	460e      	mov	r6, r1
 800e38c:	4614      	mov	r4, r2
 800e38e:	4605      	mov	r5, r0
 800e390:	b118      	cbz	r0, 800e39a <__swbuf_r+0x12>
 800e392:	6a03      	ldr	r3, [r0, #32]
 800e394:	b90b      	cbnz	r3, 800e39a <__swbuf_r+0x12>
 800e396:	f7fe f9f3 	bl	800c780 <__sinit>
 800e39a:	69a3      	ldr	r3, [r4, #24]
 800e39c:	60a3      	str	r3, [r4, #8]
 800e39e:	89a3      	ldrh	r3, [r4, #12]
 800e3a0:	071a      	lsls	r2, r3, #28
 800e3a2:	d525      	bpl.n	800e3f0 <__swbuf_r+0x68>
 800e3a4:	6923      	ldr	r3, [r4, #16]
 800e3a6:	b31b      	cbz	r3, 800e3f0 <__swbuf_r+0x68>
 800e3a8:	6823      	ldr	r3, [r4, #0]
 800e3aa:	6922      	ldr	r2, [r4, #16]
 800e3ac:	1a98      	subs	r0, r3, r2
 800e3ae:	6963      	ldr	r3, [r4, #20]
 800e3b0:	b2f6      	uxtb	r6, r6
 800e3b2:	4283      	cmp	r3, r0
 800e3b4:	4637      	mov	r7, r6
 800e3b6:	dc04      	bgt.n	800e3c2 <__swbuf_r+0x3a>
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	f7ff ffbc 	bl	800e338 <_fflush_r>
 800e3c0:	b9e0      	cbnz	r0, 800e3fc <__swbuf_r+0x74>
 800e3c2:	68a3      	ldr	r3, [r4, #8]
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	60a3      	str	r3, [r4, #8]
 800e3c8:	6823      	ldr	r3, [r4, #0]
 800e3ca:	1c5a      	adds	r2, r3, #1
 800e3cc:	6022      	str	r2, [r4, #0]
 800e3ce:	701e      	strb	r6, [r3, #0]
 800e3d0:	6962      	ldr	r2, [r4, #20]
 800e3d2:	1c43      	adds	r3, r0, #1
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d004      	beq.n	800e3e2 <__swbuf_r+0x5a>
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	07db      	lsls	r3, r3, #31
 800e3dc:	d506      	bpl.n	800e3ec <__swbuf_r+0x64>
 800e3de:	2e0a      	cmp	r6, #10
 800e3e0:	d104      	bne.n	800e3ec <__swbuf_r+0x64>
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	f7ff ffa7 	bl	800e338 <_fflush_r>
 800e3ea:	b938      	cbnz	r0, 800e3fc <__swbuf_r+0x74>
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f000 f806 	bl	800e404 <__swsetup_r>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d0d5      	beq.n	800e3a8 <__swbuf_r+0x20>
 800e3fc:	f04f 37ff 	mov.w	r7, #4294967295
 800e400:	e7f4      	b.n	800e3ec <__swbuf_r+0x64>
	...

0800e404 <__swsetup_r>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4b2a      	ldr	r3, [pc, #168]	; (800e4b0 <__swsetup_r+0xac>)
 800e408:	4605      	mov	r5, r0
 800e40a:	6818      	ldr	r0, [r3, #0]
 800e40c:	460c      	mov	r4, r1
 800e40e:	b118      	cbz	r0, 800e418 <__swsetup_r+0x14>
 800e410:	6a03      	ldr	r3, [r0, #32]
 800e412:	b90b      	cbnz	r3, 800e418 <__swsetup_r+0x14>
 800e414:	f7fe f9b4 	bl	800c780 <__sinit>
 800e418:	89a3      	ldrh	r3, [r4, #12]
 800e41a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e41e:	0718      	lsls	r0, r3, #28
 800e420:	d422      	bmi.n	800e468 <__swsetup_r+0x64>
 800e422:	06d9      	lsls	r1, r3, #27
 800e424:	d407      	bmi.n	800e436 <__swsetup_r+0x32>
 800e426:	2309      	movs	r3, #9
 800e428:	602b      	str	r3, [r5, #0]
 800e42a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e42e:	81a3      	strh	r3, [r4, #12]
 800e430:	f04f 30ff 	mov.w	r0, #4294967295
 800e434:	e034      	b.n	800e4a0 <__swsetup_r+0x9c>
 800e436:	0758      	lsls	r0, r3, #29
 800e438:	d512      	bpl.n	800e460 <__swsetup_r+0x5c>
 800e43a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e43c:	b141      	cbz	r1, 800e450 <__swsetup_r+0x4c>
 800e43e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e442:	4299      	cmp	r1, r3
 800e444:	d002      	beq.n	800e44c <__swsetup_r+0x48>
 800e446:	4628      	mov	r0, r5
 800e448:	f7ff f930 	bl	800d6ac <_free_r>
 800e44c:	2300      	movs	r3, #0
 800e44e:	6363      	str	r3, [r4, #52]	; 0x34
 800e450:	89a3      	ldrh	r3, [r4, #12]
 800e452:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e456:	81a3      	strh	r3, [r4, #12]
 800e458:	2300      	movs	r3, #0
 800e45a:	6063      	str	r3, [r4, #4]
 800e45c:	6923      	ldr	r3, [r4, #16]
 800e45e:	6023      	str	r3, [r4, #0]
 800e460:	89a3      	ldrh	r3, [r4, #12]
 800e462:	f043 0308 	orr.w	r3, r3, #8
 800e466:	81a3      	strh	r3, [r4, #12]
 800e468:	6923      	ldr	r3, [r4, #16]
 800e46a:	b94b      	cbnz	r3, 800e480 <__swsetup_r+0x7c>
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e476:	d003      	beq.n	800e480 <__swsetup_r+0x7c>
 800e478:	4621      	mov	r1, r4
 800e47a:	4628      	mov	r0, r5
 800e47c:	f000 f8b6 	bl	800e5ec <__smakebuf_r>
 800e480:	89a0      	ldrh	r0, [r4, #12]
 800e482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e486:	f010 0301 	ands.w	r3, r0, #1
 800e48a:	d00a      	beq.n	800e4a2 <__swsetup_r+0x9e>
 800e48c:	2300      	movs	r3, #0
 800e48e:	60a3      	str	r3, [r4, #8]
 800e490:	6963      	ldr	r3, [r4, #20]
 800e492:	425b      	negs	r3, r3
 800e494:	61a3      	str	r3, [r4, #24]
 800e496:	6923      	ldr	r3, [r4, #16]
 800e498:	b943      	cbnz	r3, 800e4ac <__swsetup_r+0xa8>
 800e49a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e49e:	d1c4      	bne.n	800e42a <__swsetup_r+0x26>
 800e4a0:	bd38      	pop	{r3, r4, r5, pc}
 800e4a2:	0781      	lsls	r1, r0, #30
 800e4a4:	bf58      	it	pl
 800e4a6:	6963      	ldrpl	r3, [r4, #20]
 800e4a8:	60a3      	str	r3, [r4, #8]
 800e4aa:	e7f4      	b.n	800e496 <__swsetup_r+0x92>
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	e7f7      	b.n	800e4a0 <__swsetup_r+0x9c>
 800e4b0:	2000007c 	.word	0x2000007c

0800e4b4 <_sbrk_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	4d06      	ldr	r5, [pc, #24]	; (800e4d0 <_sbrk_r+0x1c>)
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	602b      	str	r3, [r5, #0]
 800e4c0:	f7f4 fec6 	bl	8003250 <_sbrk>
 800e4c4:	1c43      	adds	r3, r0, #1
 800e4c6:	d102      	bne.n	800e4ce <_sbrk_r+0x1a>
 800e4c8:	682b      	ldr	r3, [r5, #0]
 800e4ca:	b103      	cbz	r3, 800e4ce <_sbrk_r+0x1a>
 800e4cc:	6023      	str	r3, [r4, #0]
 800e4ce:	bd38      	pop	{r3, r4, r5, pc}
 800e4d0:	200025a8 	.word	0x200025a8

0800e4d4 <__assert_func>:
 800e4d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4d6:	4614      	mov	r4, r2
 800e4d8:	461a      	mov	r2, r3
 800e4da:	4b09      	ldr	r3, [pc, #36]	; (800e500 <__assert_func+0x2c>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4605      	mov	r5, r0
 800e4e0:	68d8      	ldr	r0, [r3, #12]
 800e4e2:	b14c      	cbz	r4, 800e4f8 <__assert_func+0x24>
 800e4e4:	4b07      	ldr	r3, [pc, #28]	; (800e504 <__assert_func+0x30>)
 800e4e6:	9100      	str	r1, [sp, #0]
 800e4e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4ec:	4906      	ldr	r1, [pc, #24]	; (800e508 <__assert_func+0x34>)
 800e4ee:	462b      	mov	r3, r5
 800e4f0:	f000 f844 	bl	800e57c <fiprintf>
 800e4f4:	f000 f8d8 	bl	800e6a8 <abort>
 800e4f8:	4b04      	ldr	r3, [pc, #16]	; (800e50c <__assert_func+0x38>)
 800e4fa:	461c      	mov	r4, r3
 800e4fc:	e7f3      	b.n	800e4e6 <__assert_func+0x12>
 800e4fe:	bf00      	nop
 800e500:	2000007c 	.word	0x2000007c
 800e504:	0800ec8f 	.word	0x0800ec8f
 800e508:	0800ec9c 	.word	0x0800ec9c
 800e50c:	0800ecca 	.word	0x0800ecca

0800e510 <_calloc_r>:
 800e510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e512:	fba1 2402 	umull	r2, r4, r1, r2
 800e516:	b94c      	cbnz	r4, 800e52c <_calloc_r+0x1c>
 800e518:	4611      	mov	r1, r2
 800e51a:	9201      	str	r2, [sp, #4]
 800e51c:	f7ff f93a 	bl	800d794 <_malloc_r>
 800e520:	9a01      	ldr	r2, [sp, #4]
 800e522:	4605      	mov	r5, r0
 800e524:	b930      	cbnz	r0, 800e534 <_calloc_r+0x24>
 800e526:	4628      	mov	r0, r5
 800e528:	b003      	add	sp, #12
 800e52a:	bd30      	pop	{r4, r5, pc}
 800e52c:	220c      	movs	r2, #12
 800e52e:	6002      	str	r2, [r0, #0]
 800e530:	2500      	movs	r5, #0
 800e532:	e7f8      	b.n	800e526 <_calloc_r+0x16>
 800e534:	4621      	mov	r1, r4
 800e536:	f7fe f9ae 	bl	800c896 <memset>
 800e53a:	e7f4      	b.n	800e526 <_calloc_r+0x16>

0800e53c <__ascii_mbtowc>:
 800e53c:	b082      	sub	sp, #8
 800e53e:	b901      	cbnz	r1, 800e542 <__ascii_mbtowc+0x6>
 800e540:	a901      	add	r1, sp, #4
 800e542:	b142      	cbz	r2, 800e556 <__ascii_mbtowc+0x1a>
 800e544:	b14b      	cbz	r3, 800e55a <__ascii_mbtowc+0x1e>
 800e546:	7813      	ldrb	r3, [r2, #0]
 800e548:	600b      	str	r3, [r1, #0]
 800e54a:	7812      	ldrb	r2, [r2, #0]
 800e54c:	1e10      	subs	r0, r2, #0
 800e54e:	bf18      	it	ne
 800e550:	2001      	movne	r0, #1
 800e552:	b002      	add	sp, #8
 800e554:	4770      	bx	lr
 800e556:	4610      	mov	r0, r2
 800e558:	e7fb      	b.n	800e552 <__ascii_mbtowc+0x16>
 800e55a:	f06f 0001 	mvn.w	r0, #1
 800e55e:	e7f8      	b.n	800e552 <__ascii_mbtowc+0x16>

0800e560 <__ascii_wctomb>:
 800e560:	b149      	cbz	r1, 800e576 <__ascii_wctomb+0x16>
 800e562:	2aff      	cmp	r2, #255	; 0xff
 800e564:	bf85      	ittet	hi
 800e566:	238a      	movhi	r3, #138	; 0x8a
 800e568:	6003      	strhi	r3, [r0, #0]
 800e56a:	700a      	strbls	r2, [r1, #0]
 800e56c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e570:	bf98      	it	ls
 800e572:	2001      	movls	r0, #1
 800e574:	4770      	bx	lr
 800e576:	4608      	mov	r0, r1
 800e578:	4770      	bx	lr
	...

0800e57c <fiprintf>:
 800e57c:	b40e      	push	{r1, r2, r3}
 800e57e:	b503      	push	{r0, r1, lr}
 800e580:	4601      	mov	r1, r0
 800e582:	ab03      	add	r3, sp, #12
 800e584:	4805      	ldr	r0, [pc, #20]	; (800e59c <fiprintf+0x20>)
 800e586:	f853 2b04 	ldr.w	r2, [r3], #4
 800e58a:	6800      	ldr	r0, [r0, #0]
 800e58c:	9301      	str	r3, [sp, #4]
 800e58e:	f7ff fd33 	bl	800dff8 <_vfiprintf_r>
 800e592:	b002      	add	sp, #8
 800e594:	f85d eb04 	ldr.w	lr, [sp], #4
 800e598:	b003      	add	sp, #12
 800e59a:	4770      	bx	lr
 800e59c:	2000007c 	.word	0x2000007c

0800e5a0 <__swhatbuf_r>:
 800e5a0:	b570      	push	{r4, r5, r6, lr}
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a8:	2900      	cmp	r1, #0
 800e5aa:	b096      	sub	sp, #88	; 0x58
 800e5ac:	4615      	mov	r5, r2
 800e5ae:	461e      	mov	r6, r3
 800e5b0:	da0d      	bge.n	800e5ce <__swhatbuf_r+0x2e>
 800e5b2:	89a3      	ldrh	r3, [r4, #12]
 800e5b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e5b8:	f04f 0100 	mov.w	r1, #0
 800e5bc:	bf0c      	ite	eq
 800e5be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e5c2:	2340      	movne	r3, #64	; 0x40
 800e5c4:	2000      	movs	r0, #0
 800e5c6:	6031      	str	r1, [r6, #0]
 800e5c8:	602b      	str	r3, [r5, #0]
 800e5ca:	b016      	add	sp, #88	; 0x58
 800e5cc:	bd70      	pop	{r4, r5, r6, pc}
 800e5ce:	466a      	mov	r2, sp
 800e5d0:	f000 f848 	bl	800e664 <_fstat_r>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	dbec      	blt.n	800e5b2 <__swhatbuf_r+0x12>
 800e5d8:	9901      	ldr	r1, [sp, #4]
 800e5da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e5de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e5e2:	4259      	negs	r1, r3
 800e5e4:	4159      	adcs	r1, r3
 800e5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5ea:	e7eb      	b.n	800e5c4 <__swhatbuf_r+0x24>

0800e5ec <__smakebuf_r>:
 800e5ec:	898b      	ldrh	r3, [r1, #12]
 800e5ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5f0:	079d      	lsls	r5, r3, #30
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	460c      	mov	r4, r1
 800e5f6:	d507      	bpl.n	800e608 <__smakebuf_r+0x1c>
 800e5f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5fc:	6023      	str	r3, [r4, #0]
 800e5fe:	6123      	str	r3, [r4, #16]
 800e600:	2301      	movs	r3, #1
 800e602:	6163      	str	r3, [r4, #20]
 800e604:	b002      	add	sp, #8
 800e606:	bd70      	pop	{r4, r5, r6, pc}
 800e608:	ab01      	add	r3, sp, #4
 800e60a:	466a      	mov	r2, sp
 800e60c:	f7ff ffc8 	bl	800e5a0 <__swhatbuf_r>
 800e610:	9900      	ldr	r1, [sp, #0]
 800e612:	4605      	mov	r5, r0
 800e614:	4630      	mov	r0, r6
 800e616:	f7ff f8bd 	bl	800d794 <_malloc_r>
 800e61a:	b948      	cbnz	r0, 800e630 <__smakebuf_r+0x44>
 800e61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e620:	059a      	lsls	r2, r3, #22
 800e622:	d4ef      	bmi.n	800e604 <__smakebuf_r+0x18>
 800e624:	f023 0303 	bic.w	r3, r3, #3
 800e628:	f043 0302 	orr.w	r3, r3, #2
 800e62c:	81a3      	strh	r3, [r4, #12]
 800e62e:	e7e3      	b.n	800e5f8 <__smakebuf_r+0xc>
 800e630:	89a3      	ldrh	r3, [r4, #12]
 800e632:	6020      	str	r0, [r4, #0]
 800e634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e638:	81a3      	strh	r3, [r4, #12]
 800e63a:	9b00      	ldr	r3, [sp, #0]
 800e63c:	6163      	str	r3, [r4, #20]
 800e63e:	9b01      	ldr	r3, [sp, #4]
 800e640:	6120      	str	r0, [r4, #16]
 800e642:	b15b      	cbz	r3, 800e65c <__smakebuf_r+0x70>
 800e644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e648:	4630      	mov	r0, r6
 800e64a:	f000 f81d 	bl	800e688 <_isatty_r>
 800e64e:	b128      	cbz	r0, 800e65c <__smakebuf_r+0x70>
 800e650:	89a3      	ldrh	r3, [r4, #12]
 800e652:	f023 0303 	bic.w	r3, r3, #3
 800e656:	f043 0301 	orr.w	r3, r3, #1
 800e65a:	81a3      	strh	r3, [r4, #12]
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	431d      	orrs	r5, r3
 800e660:	81a5      	strh	r5, [r4, #12]
 800e662:	e7cf      	b.n	800e604 <__smakebuf_r+0x18>

0800e664 <_fstat_r>:
 800e664:	b538      	push	{r3, r4, r5, lr}
 800e666:	4d07      	ldr	r5, [pc, #28]	; (800e684 <_fstat_r+0x20>)
 800e668:	2300      	movs	r3, #0
 800e66a:	4604      	mov	r4, r0
 800e66c:	4608      	mov	r0, r1
 800e66e:	4611      	mov	r1, r2
 800e670:	602b      	str	r3, [r5, #0]
 800e672:	f7f4 fdc4 	bl	80031fe <_fstat>
 800e676:	1c43      	adds	r3, r0, #1
 800e678:	d102      	bne.n	800e680 <_fstat_r+0x1c>
 800e67a:	682b      	ldr	r3, [r5, #0]
 800e67c:	b103      	cbz	r3, 800e680 <_fstat_r+0x1c>
 800e67e:	6023      	str	r3, [r4, #0]
 800e680:	bd38      	pop	{r3, r4, r5, pc}
 800e682:	bf00      	nop
 800e684:	200025a8 	.word	0x200025a8

0800e688 <_isatty_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	4d06      	ldr	r5, [pc, #24]	; (800e6a4 <_isatty_r+0x1c>)
 800e68c:	2300      	movs	r3, #0
 800e68e:	4604      	mov	r4, r0
 800e690:	4608      	mov	r0, r1
 800e692:	602b      	str	r3, [r5, #0]
 800e694:	f7f4 fdc3 	bl	800321e <_isatty>
 800e698:	1c43      	adds	r3, r0, #1
 800e69a:	d102      	bne.n	800e6a2 <_isatty_r+0x1a>
 800e69c:	682b      	ldr	r3, [r5, #0]
 800e69e:	b103      	cbz	r3, 800e6a2 <_isatty_r+0x1a>
 800e6a0:	6023      	str	r3, [r4, #0]
 800e6a2:	bd38      	pop	{r3, r4, r5, pc}
 800e6a4:	200025a8 	.word	0x200025a8

0800e6a8 <abort>:
 800e6a8:	b508      	push	{r3, lr}
 800e6aa:	2006      	movs	r0, #6
 800e6ac:	f000 f82c 	bl	800e708 <raise>
 800e6b0:	2001      	movs	r0, #1
 800e6b2:	f7f4 fd55 	bl	8003160 <_exit>

0800e6b6 <_raise_r>:
 800e6b6:	291f      	cmp	r1, #31
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	460d      	mov	r5, r1
 800e6be:	d904      	bls.n	800e6ca <_raise_r+0x14>
 800e6c0:	2316      	movs	r3, #22
 800e6c2:	6003      	str	r3, [r0, #0]
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e6cc:	b112      	cbz	r2, 800e6d4 <_raise_r+0x1e>
 800e6ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d2:	b94b      	cbnz	r3, 800e6e8 <_raise_r+0x32>
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 f831 	bl	800e73c <_getpid_r>
 800e6da:	462a      	mov	r2, r5
 800e6dc:	4601      	mov	r1, r0
 800e6de:	4620      	mov	r0, r4
 800e6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e4:	f000 b818 	b.w	800e718 <_kill_r>
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d00a      	beq.n	800e702 <_raise_r+0x4c>
 800e6ec:	1c59      	adds	r1, r3, #1
 800e6ee:	d103      	bne.n	800e6f8 <_raise_r+0x42>
 800e6f0:	2316      	movs	r3, #22
 800e6f2:	6003      	str	r3, [r0, #0]
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	e7e7      	b.n	800e6c8 <_raise_r+0x12>
 800e6f8:	2400      	movs	r4, #0
 800e6fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6fe:	4628      	mov	r0, r5
 800e700:	4798      	blx	r3
 800e702:	2000      	movs	r0, #0
 800e704:	e7e0      	b.n	800e6c8 <_raise_r+0x12>
	...

0800e708 <raise>:
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <raise+0xc>)
 800e70a:	4601      	mov	r1, r0
 800e70c:	6818      	ldr	r0, [r3, #0]
 800e70e:	f7ff bfd2 	b.w	800e6b6 <_raise_r>
 800e712:	bf00      	nop
 800e714:	2000007c 	.word	0x2000007c

0800e718 <_kill_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	; (800e738 <_kill_r+0x20>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	4611      	mov	r1, r2
 800e724:	602b      	str	r3, [r5, #0]
 800e726:	f7f4 fd0b 	bl	8003140 <_kill>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d102      	bne.n	800e734 <_kill_r+0x1c>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b103      	cbz	r3, 800e734 <_kill_r+0x1c>
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop
 800e738:	200025a8 	.word	0x200025a8

0800e73c <_getpid_r>:
 800e73c:	f7f4 bcf8 	b.w	8003130 <_getpid>

0800e740 <_init>:
 800e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e742:	bf00      	nop
 800e744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e746:	bc08      	pop	{r3}
 800e748:	469e      	mov	lr, r3
 800e74a:	4770      	bx	lr

0800e74c <_fini>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	bf00      	nop
 800e750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e752:	bc08      	pop	{r3}
 800e754:	469e      	mov	lr, r3
 800e756:	4770      	bx	lr
